
smart-home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008396  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002c2  00800060  00008396  0000842a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  00800322  00800322  000086ec  2**0
                  ALLOC
  3 .stab         00008c04  00000000  00000000  000086ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000035c4  00000000  00000000  000112f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000148b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00014a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00014c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00017051  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000183d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000195b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00019770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00019a66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001a3d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 9e 13 	jmp	0x273c	; 0x273c <__vector_8>
      24:	0c 94 18 37 	jmp	0x6e30	; 0x6e30 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f3 e8       	ldi	r31, 0x83	; 131
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 32       	cpi	r26, 0x22	; 34
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a2 e2       	ldi	r26, 0x22	; 34
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 35       	cpi	r26, 0x51	; 81
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 c9 41 	jmp	0x8392	; 0x8392 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 52 3e 	jmp	0x7ca4	; 0x7ca4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ec       	ldi	r26, 0xC8	; 200
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6e 3e 	jmp	0x7cdc	; 0x7cdc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5e 3e 	jmp	0x7cbc	; 0x7cbc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7a 3e 	jmp	0x7cf4	; 0x7cf4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5e 3e 	jmp	0x7cbc	; 0x7cbc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7a 3e 	jmp	0x7cf4	; 0x7cf4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 52 3e 	jmp	0x7ca4	; 0x7ca4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 ec       	ldi	r24, 0xC8	; 200
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6e 3e 	jmp	0x7cdc	; 0x7cdc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5a 3e 	jmp	0x7cb4	; 0x7cb4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 ec       	ldi	r22, 0xC8	; 200
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 76 3e 	jmp	0x7cec	; 0x7cec <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5e 3e 	jmp	0x7cbc	; 0x7cbc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7a 3e 	jmp	0x7cf4	; 0x7cf4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 5e 3e 	jmp	0x7cbc	; 0x7cbc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7a 3e 	jmp	0x7cf4	; 0x7cf4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5e 3e 	jmp	0x7cbc	; 0x7cbc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7a 3e 	jmp	0x7cf4	; 0x7cf4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 62 3e 	jmp	0x7cc4	; 0x7cc4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 7e 3e 	jmp	0x7cfc	; 0x7cfc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 5a 3e 	jmp	0x7cb4	; 0x7cb4 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 76 3e 	jmp	0x7cec	; 0x7cec <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e0 53       	subi	r30, 0x30	; 48
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
void Stop_Fane(void);
void Check_Fane(void);
void Blutooth_Fn(u8 data,s8 m);

int main(void)
{
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	c2 57       	subi	r28, 0x72	; 114
     e3c:	d0 40       	sbci	r29, 0x00	; 0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
	// Initiating the project
	LM35_Int();
     e48:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <LM35_Int>
	Led_Init();
     e4c:	0e 94 01 31 	call	0x6202	; 0x6202 <Led_Init>
	Bluetooth_Init();
     e50:	0e 94 d4 26 	call	0x4da8	; 0x4da8 <Bluetooth_Init>
	Servo_Motor_Int();
     e54:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <Servo_Motor_Int>
	Servo_Motor_Rotat(5);
     e58:	85 e0       	ldi	r24, 0x05	; 5
     e5a:	0e 94 96 27 	call	0x4f2c	; 0x4f2c <Servo_Motor_Rotat>
	Lcd_Int();
     e5e:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <Lcd_Int>
	Keypad_Int();
     e62:	0e 94 04 2a 	call	0x5408	; 0x5408 <Keypad_Int>
	DC_Motor_Int();
     e66:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <DC_Motor_Int>
	//Dimmer_Int();
//Dimmer_duty(0);
	// Some commands for LCD
	Lcd_Cmd(_LCD_CLEAR);
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	0e 94 1b 30 	call	0x6036	; 0x6036 <Lcd_Cmd>
	Lcd_Cmd(_LCD_CURSOR_OFF);
     e70:	8c e0       	ldi	r24, 0x0C	; 12
     e72:	0e 94 1b 30 	call	0x6036	; 0x6036 <Lcd_Cmd>

	// the password of admin
	EEPROM_internal_Write(0,"admin");
     e76:	80 e6       	ldi	r24, 0x60	; 96
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	28 2f       	mov	r18, r24
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	62 2f       	mov	r22, r18
     e82:	0e 94 bc 39 	call	0x7378	; 0x7378 <EEPROM_internal_Write>

// interrupt for checking about the fane
Timer0_Delay(1000, Check_Fane);
     e86:	21 e9       	ldi	r18, 0x91	; 145
     e88:	3d e0       	ldi	r19, 0x0D	; 13
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	8a e7       	ldi	r24, 0x7A	; 122
     e90:	94 e4       	ldi	r25, 0x44	; 68
     e92:	a9 01       	movw	r20, r18
     e94:	0e 94 06 35 	call	0x6a0c	; 0x6a0c <Timer0_Delay>

	label:
	Lcd_Cmd(_LCD_CLEAR);
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	0e 94 1b 30 	call	0x6036	; 0x6036 <Lcd_Cmd>
Lcd_Display_str("    Welcome    ");
     e9e:	86 e6       	ldi	r24, 0x66	; 102
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
str = (s8 *)"Write your password";
     ea6:	86 e7       	ldi	r24, 0x76	; 118
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	90 93 45 03 	sts	0x0345, r25
     eae:	80 93 44 03 	sts	0x0344, r24
Bluetooth_TransmitString(str);
     eb2:	80 91 44 03 	lds	r24, 0x0344
     eb6:	90 91 45 03 	lds	r25, 0x0345
     eba:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <Bluetooth_TransmitString>
true=1;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	80 93 22 03 	sts	0x0322, r24
GINT_DISABLE_INTERRUPT();
     ec4:	0e 94 f0 38 	call	0x71e0	; 0x71e0 <GINT_DISABLE_INTERRUPT>
     ec8:	77 c1       	rjmp	.+750    	; 0x11b8 <main+0x38a>
// bluetooth loop
	while(true)
	{


		if(strcmp(UART1_Rx_Str(),"admin")==0)
     eca:	0e 94 37 32 	call	0x646e	; 0x646e <UART1_Rx_Str>
     ece:	20 e6       	ldi	r18, 0x60	; 96
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	b9 01       	movw	r22, r18
     ed4:	0e 94 89 3e 	call	0x7d12	; 0x7d12 <strcmp>
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	09 f0       	breq	.+2      	; 0xede <main+0xb0>
     edc:	d2 c0       	rjmp	.+420    	; 0x1082 <main+0x254>
		{

			Lcd_Cmd(_LCD_CLEAR);
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	0e 94 1b 30 	call	0x6036	; 0x6036 <Lcd_Cmd>
		Lcd_Display_str("Welcome Admin");
     ee4:	8a e8       	ldi	r24, 0x8A	; 138
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
			Bluetooth_TransmitString("Welcome Admin ");
     eec:	88 e9       	ldi	r24, 0x98	; 152
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <Bluetooth_TransmitString>
admin=1;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	80 93 23 03 	sts	0x0323, r24
Bluetooth_TransmitString("Write ur command");
     efa:	87 ea       	ldi	r24, 0xA7	; 167
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <Bluetooth_TransmitString>
     f02:	b9 c0       	rjmp	.+370    	; 0x1076 <main+0x248>
			while(admin)
			{

			Blutooth_Fn(Bluetooth_Receive(),1);
     f04:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <Bluetooth_Receive>
     f08:	61 e0       	ldi	r22, 0x01	; 1
     f0a:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <Blutooth_Fn>
     f0e:	fe 01       	movw	r30, r28
     f10:	e3 59       	subi	r30, 0x93	; 147
     f12:	ff 4f       	sbci	r31, 0xFF	; 255
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	aa ef       	ldi	r26, 0xFA	; 250
     f1a:	b3 e4       	ldi	r27, 0x43	; 67
     f1c:	80 83       	st	Z, r24
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	a2 83       	std	Z+2, r26	; 0x02
     f22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f24:	8e 01       	movw	r16, r28
     f26:	07 59       	subi	r16, 0x97	; 151
     f28:	1f 4f       	sbci	r17, 0xFF	; 255
     f2a:	fe 01       	movw	r30, r28
     f2c:	e3 59       	subi	r30, 0x93	; 147
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	60 81       	ld	r22, Z
     f32:	71 81       	ldd	r23, Z+1	; 0x01
     f34:	82 81       	ldd	r24, Z+2	; 0x02
     f36:	93 81       	ldd	r25, Z+3	; 0x03
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	4a e7       	ldi	r20, 0x7A	; 122
     f3e:	53 e4       	ldi	r21, 0x43	; 67
     f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	f8 01       	movw	r30, r16
     f4a:	80 83       	st	Z, r24
     f4c:	91 83       	std	Z+1, r25	; 0x01
     f4e:	a2 83       	std	Z+2, r26	; 0x02
     f50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f52:	fe 01       	movw	r30, r28
     f54:	e7 59       	subi	r30, 0x97	; 151
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	60 81       	ld	r22, Z
     f5a:	71 81       	ldd	r23, Z+1	; 0x01
     f5c:	82 81       	ldd	r24, Z+2	; 0x02
     f5e:	93 81       	ldd	r25, Z+3	; 0x03
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e8       	ldi	r20, 0x80	; 128
     f66:	5f e3       	ldi	r21, 0x3F	; 63
     f68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f6c:	88 23       	and	r24, r24
     f6e:	44 f4       	brge	.+16     	; 0xf80 <main+0x152>
		__ticks = 1;
     f70:	fe 01       	movw	r30, r28
     f72:	e9 59       	subi	r30, 0x99	; 153
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	91 83       	std	Z+1, r25	; 0x01
     f7c:	80 83       	st	Z, r24
     f7e:	64 c0       	rjmp	.+200    	; 0x1048 <main+0x21a>
	else if (__tmp > 65535)
     f80:	fe 01       	movw	r30, r28
     f82:	e7 59       	subi	r30, 0x97	; 151
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	60 81       	ld	r22, Z
     f88:	71 81       	ldd	r23, Z+1	; 0x01
     f8a:	82 81       	ldd	r24, Z+2	; 0x02
     f8c:	93 81       	ldd	r25, Z+3	; 0x03
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	3f ef       	ldi	r19, 0xFF	; 255
     f92:	4f e7       	ldi	r20, 0x7F	; 127
     f94:	57 e4       	ldi	r21, 0x47	; 71
     f96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f9a:	18 16       	cp	r1, r24
     f9c:	0c f0       	brlt	.+2      	; 0xfa0 <main+0x172>
     f9e:	43 c0       	rjmp	.+134    	; 0x1026 <main+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa0:	fe 01       	movw	r30, r28
     fa2:	e3 59       	subi	r30, 0x93	; 147
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	60 81       	ld	r22, Z
     fa8:	71 81       	ldd	r23, Z+1	; 0x01
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	93 81       	ldd	r25, Z+3	; 0x03
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	40 e2       	ldi	r20, 0x20	; 32
     fb4:	51 e4       	ldi	r21, 0x41	; 65
     fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	8e 01       	movw	r16, r28
     fc0:	09 59       	subi	r16, 0x99	; 153
     fc2:	1f 4f       	sbci	r17, 0xFF	; 255
     fc4:	bc 01       	movw	r22, r24
     fc6:	cd 01       	movw	r24, r26
     fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	f8 01       	movw	r30, r16
     fd2:	91 83       	std	Z+1, r25	; 0x01
     fd4:	80 83       	st	Z, r24
     fd6:	1f c0       	rjmp	.+62     	; 0x1016 <main+0x1e8>
     fd8:	fe 01       	movw	r30, r28
     fda:	eb 59       	subi	r30, 0x9B	; 155
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	89 e1       	ldi	r24, 0x19	; 25
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	91 83       	std	Z+1, r25	; 0x01
     fe4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fe6:	fe 01       	movw	r30, r28
     fe8:	eb 59       	subi	r30, 0x9B	; 155
     fea:	ff 4f       	sbci	r31, 0xFF	; 255
     fec:	80 81       	ld	r24, Z
     fee:	91 81       	ldd	r25, Z+1	; 0x01
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <main+0x1c2>
     ff4:	fe 01       	movw	r30, r28
     ff6:	eb 59       	subi	r30, 0x9B	; 155
     ff8:	ff 4f       	sbci	r31, 0xFF	; 255
     ffa:	91 83       	std	Z+1, r25	; 0x01
     ffc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ffe:	de 01       	movw	r26, r28
    1000:	a9 59       	subi	r26, 0x99	; 153
    1002:	bf 4f       	sbci	r27, 0xFF	; 255
    1004:	fe 01       	movw	r30, r28
    1006:	e9 59       	subi	r30, 0x99	; 153
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	80 81       	ld	r24, Z
    100c:	91 81       	ldd	r25, Z+1	; 0x01
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	11 96       	adiw	r26, 0x01	; 1
    1012:	9c 93       	st	X, r25
    1014:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1016:	fe 01       	movw	r30, r28
    1018:	e9 59       	subi	r30, 0x99	; 153
    101a:	ff 4f       	sbci	r31, 0xFF	; 255
    101c:	80 81       	ld	r24, Z
    101e:	91 81       	ldd	r25, Z+1	; 0x01
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	d1 f6       	brne	.-76     	; 0xfd8 <main+0x1aa>
    1024:	28 c0       	rjmp	.+80     	; 0x1076 <main+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1026:	8e 01       	movw	r16, r28
    1028:	09 59       	subi	r16, 0x99	; 153
    102a:	1f 4f       	sbci	r17, 0xFF	; 255
    102c:	fe 01       	movw	r30, r28
    102e:	e7 59       	subi	r30, 0x97	; 151
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	60 81       	ld	r22, Z
    1034:	71 81       	ldd	r23, Z+1	; 0x01
    1036:	82 81       	ldd	r24, Z+2	; 0x02
    1038:	93 81       	ldd	r25, Z+3	; 0x03
    103a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	f8 01       	movw	r30, r16
    1044:	91 83       	std	Z+1, r25	; 0x01
    1046:	80 83       	st	Z, r24
    1048:	de 01       	movw	r26, r28
    104a:	ad 59       	subi	r26, 0x9D	; 157
    104c:	bf 4f       	sbci	r27, 0xFF	; 255
    104e:	fe 01       	movw	r30, r28
    1050:	e9 59       	subi	r30, 0x99	; 153
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	11 96       	adiw	r26, 0x01	; 1
    105a:	9c 93       	st	X, r25
    105c:	8e 93       	st	-X, r24
    105e:	fe 01       	movw	r30, r28
    1060:	ed 59       	subi	r30, 0x9D	; 157
    1062:	ff 4f       	sbci	r31, 0xFF	; 255
    1064:	80 81       	ld	r24, Z
    1066:	91 81       	ldd	r25, Z+1	; 0x01
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <main+0x23a>
    106c:	fe 01       	movw	r30, r28
    106e:	ed 59       	subi	r30, 0x9D	; 157
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	91 83       	std	Z+1, r25	; 0x01
    1074:	80 83       	st	Z, r24
			Lcd_Cmd(_LCD_CLEAR);
		Lcd_Display_str("Welcome Admin");
			Bluetooth_TransmitString("Welcome Admin ");
admin=1;
Bluetooth_TransmitString("Write ur command");
			while(admin)
    1076:	80 91 23 03 	lds	r24, 0x0323
    107a:	88 23       	and	r24, r24
    107c:	09 f0       	breq	.+2      	; 0x1080 <main+0x252>
    107e:	42 cf       	rjmp	.-380    	; 0xf04 <main+0xd6>
    1080:	9b c0       	rjmp	.+310    	; 0x11b8 <main+0x38a>
			Blutooth_Fn(Bluetooth_Receive(),1);
			_delay_ms(500);
			}
		}

		else if(strcmp("guest",UART1_Rx_Str())==0)
    1082:	0e 94 37 32 	call	0x646e	; 0x646e <UART1_Rx_Str>
    1086:	9c 01       	movw	r18, r24
    1088:	88 eb       	ldi	r24, 0xB8	; 184
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	b9 01       	movw	r22, r18
    108e:	0e 94 89 3e 	call	0x7d12	; 0x7d12 <strcmp>
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	91 f5       	brne	.+100    	; 0x10fa <main+0x2cc>
			{
			Lcd_Cmd(_LCD_CLEAR);
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	0e 94 1b 30 	call	0x6036	; 0x6036 <Lcd_Cmd>
		Lcd_Display_str("Welcome Guest");
    109c:	8e eb       	ldi	r24, 0xBE	; 190
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
			Bluetooth_TransmitString("Welcome Guest");
    10a4:	8e eb       	ldi	r24, 0xBE	; 190
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <Bluetooth_TransmitString>

							guest=1;
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	80 93 24 03 	sts	0x0324, r24
							if(allowing1==1)
    10b2:	80 91 25 03 	lds	r24, 0x0325
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	59 f4       	brne	.+22     	; 0x10d0 <main+0x2a2>
    10ba:	05 c0       	rjmp	.+10     	; 0x10c6 <main+0x298>
							{
								while(guest)
											{

												Blutooth_Fn(Bluetooth_Receive(),0);
    10bc:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <Bluetooth_Receive>
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <Blutooth_Fn>
			Bluetooth_TransmitString("Welcome Guest");

							guest=1;
							if(allowing1==1)
							{
								while(guest)
    10c6:	80 91 24 03 	lds	r24, 0x0324
    10ca:	88 23       	and	r24, r24
    10cc:	b9 f7       	brne	.-18     	; 0x10bc <main+0x28e>
    10ce:	74 c0       	rjmp	.+232    	; 0x11b8 <main+0x38a>
												Blutooth_Fn(Bluetooth_Receive(),0);
											}
							}
							else
							{
								Lcd_Goto_Row_Column(1, 0);
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
								Lcd_Display_str("         ");
    10d8:	8c ec       	ldi	r24, 0xCC	; 204
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
								Lcd_Goto_Row_Column(1, 0);
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
								Lcd_Display_str("No permission");
    10e8:	86 ed       	ldi	r24, 0xD6	; 214
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
								Bluetooth_TransmitString("No permission");
    10f0:	86 ed       	ldi	r24, 0xD6	; 214
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <Bluetooth_TransmitString>
    10f8:	5f c0       	rjmp	.+190    	; 0x11b8 <main+0x38a>
			}




		else if(strcmp(UART1_Rx_Str(),"exit")==0) {
    10fa:	0e 94 37 32 	call	0x646e	; 0x646e <UART1_Rx_Str>
    10fe:	24 ee       	ldi	r18, 0xE4	; 228
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	b9 01       	movw	r22, r18
    1104:	0e 94 89 3e 	call	0x7d12	; 0x7d12 <strcmp>
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	71 f4       	brne	.+28     	; 0x1128 <main+0x2fa>
			true=0;
    110c:	10 92 22 03 	sts	0x0322, r1
			Lcd_Cmd(_LCD_CLEAR);
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	0e 94 1b 30 	call	0x6036	; 0x6036 <Lcd_Cmd>
			Lcd_Display_str("Exiting from blutooth");
    1116:	89 ee       	ldi	r24, 0xE9	; 233
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
Bluetooth_TransmitString("Exiting from blutooth");
    111e:	89 ee       	ldi	r24, 0xE9	; 233
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <Bluetooth_TransmitString>
    1126:	48 c0       	rjmp	.+144    	; 0x11b8 <main+0x38a>

	}


			else if (strcmp(EEPROM_internal_Read(0),name)!=0 &&strcmp(UART1_Rx_Str(),"exit")!=0 &&
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <EEPROM_internal_Read>
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	26 e2       	ldi	r18, 0x26	; 38
    1136:	33 e0       	ldi	r19, 0x03	; 3
    1138:	b9 01       	movw	r22, r18
    113a:	0e 94 89 3e 	call	0x7d12	; 0x7d12 <strcmp>
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	d9 f1       	breq	.+118    	; 0x11b8 <main+0x38a>
    1142:	0e 94 37 32 	call	0x646e	; 0x646e <UART1_Rx_Str>
    1146:	24 ee       	ldi	r18, 0xE4	; 228
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	b9 01       	movw	r22, r18
    114c:	0e 94 89 3e 	call	0x7d12	; 0x7d12 <strcmp>
    1150:	00 97       	sbiw	r24, 0x00	; 0
    1152:	91 f1       	breq	.+100    	; 0x11b8 <main+0x38a>
    1154:	0e 94 37 32 	call	0x646e	; 0x646e <UART1_Rx_Str>
    1158:	28 eb       	ldi	r18, 0xB8	; 184
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	b9 01       	movw	r22, r18
    115e:	0e 94 89 3e 	call	0x7d12	; 0x7d12 <strcmp>
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	49 f1       	breq	.+82     	; 0x11b8 <main+0x38a>
					strcmp(UART1_Rx_Str(),"guest")!=0)
		{
				Lcd_Cmd(_LCD_CLEAR);
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	0e 94 1b 30 	call	0x6036	; 0x6036 <Lcd_Cmd>
				Lcd_Display_str("Wrong password");
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>

			Bluetooth_TransmitString("Wrong password");
    1174:	8f ef       	ldi	r24, 0xFF	; 255
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <Bluetooth_TransmitString>
			for(u8 i=0;i<6;i++)
    117c:	fe 01       	movw	r30, r28
    117e:	ee 58       	subi	r30, 0x8E	; 142
    1180:	ff 4f       	sbci	r31, 0xFF	; 255
    1182:	10 82       	st	Z, r1
    1184:	13 c0       	rjmp	.+38     	; 0x11ac <main+0x37e>
			{

				name[i]=0;
    1186:	fe 01       	movw	r30, r28
    1188:	ee 58       	subi	r30, 0x8E	; 142
    118a:	ff 4f       	sbci	r31, 0xFF	; 255
    118c:	80 81       	ld	r24, Z
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	fc 01       	movw	r30, r24
    1194:	ea 5d       	subi	r30, 0xDA	; 218
    1196:	fc 4f       	sbci	r31, 0xFC	; 252
    1198:	10 82       	st	Z, r1
		{
				Lcd_Cmd(_LCD_CLEAR);
				Lcd_Display_str("Wrong password");

			Bluetooth_TransmitString("Wrong password");
			for(u8 i=0;i<6;i++)
    119a:	de 01       	movw	r26, r28
    119c:	ae 58       	subi	r26, 0x8E	; 142
    119e:	bf 4f       	sbci	r27, 0xFF	; 255
    11a0:	fe 01       	movw	r30, r28
    11a2:	ee 58       	subi	r30, 0x8E	; 142
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	80 81       	ld	r24, Z
    11a8:	8f 5f       	subi	r24, 0xFF	; 255
    11aa:	8c 93       	st	X, r24
    11ac:	fe 01       	movw	r30, r28
    11ae:	ee 58       	subi	r30, 0x8E	; 142
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	80 81       	ld	r24, Z
    11b4:	86 30       	cpi	r24, 0x06	; 6
    11b6:	38 f3       	brcs	.-50     	; 0x1186 <main+0x358>

while(1)
{

// bluetooth loop
	while(true)
    11b8:	80 91 22 03 	lds	r24, 0x0322
    11bc:	88 23       	and	r24, r24
    11be:	09 f0       	breq	.+2      	; 0x11c2 <main+0x394>
    11c0:	84 ce       	rjmp	.-760    	; 0xeca <main+0x9c>
	}



// enter to the user mode
	if(Keypad_Read()=='S')
    11c2:	0e 94 57 2a 	call	0x54ae	; 0x54ae <Keypad_Read>
    11c6:	83 35       	cpi	r24, 0x53	; 83
    11c8:	b9 f7       	brne	.-18     	; 0x11b8 <main+0x38a>
	{
		u8 user=1;
    11ca:	fe 01       	movw	r30, r28
    11cc:	ef 58       	subi	r30, 0x8F	; 143
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	80 83       	st	Z, r24

Lcd_Cmd(_LCD_CLEAR);
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	0e 94 1b 30 	call	0x6036	; 0x6036 <Lcd_Cmd>
Lcd_Display_str("User mode");
    11da:	8e e0       	ldi	r24, 0x0E	; 14
    11dc:	91 e0       	ldi	r25, 0x01	; 1
    11de:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
Bluetooth_Transmit(Keypad_Read());
    11e2:	0e 94 57 2a 	call	0x54ae	; 0x54ae <Keypad_Read>
    11e6:	0e 94 dd 26 	call	0x4dba	; 0x4dba <Bluetooth_Transmit>
    11ea:	7b c4       	rjmp	.+2294   	; 0x1ae2 <main+0xcb4>
// keypad loop
while(user)
{

	if(Keypad_Read()=='0')
    11ec:	0e 94 57 2a 	call	0x54ae	; 0x54ae <Keypad_Read>
    11f0:	80 33       	cpi	r24, 0x30	; 48
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <main+0x3c8>
    11f4:	cb c0       	rjmp	.+406    	; 0x138c <main+0x55e>
    11f6:	fe 01       	movw	r30, r28
    11f8:	e1 5a       	subi	r30, 0xA1	; 161
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a6 e9       	ldi	r26, 0x96	; 150
    1202:	b3 e4       	ldi	r27, 0x43	; 67
    1204:	80 83       	st	Z, r24
    1206:	91 83       	std	Z+1, r25	; 0x01
    1208:	a2 83       	std	Z+2, r26	; 0x02
    120a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120c:	8e 01       	movw	r16, r28
    120e:	05 5a       	subi	r16, 0xA5	; 165
    1210:	1f 4f       	sbci	r17, 0xFF	; 255
    1212:	fe 01       	movw	r30, r28
    1214:	e1 5a       	subi	r30, 0xA1	; 161
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	60 81       	ld	r22, Z
    121a:	71 81       	ldd	r23, Z+1	; 0x01
    121c:	82 81       	ldd	r24, Z+2	; 0x02
    121e:	93 81       	ldd	r25, Z+3	; 0x03
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	4a e7       	ldi	r20, 0x7A	; 122
    1226:	53 e4       	ldi	r21, 0x43	; 67
    1228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	f8 01       	movw	r30, r16
    1232:	80 83       	st	Z, r24
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	a2 83       	std	Z+2, r26	; 0x02
    1238:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    123a:	fe 01       	movw	r30, r28
    123c:	e5 5a       	subi	r30, 0xA5	; 165
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	60 81       	ld	r22, Z
    1242:	71 81       	ldd	r23, Z+1	; 0x01
    1244:	82 81       	ldd	r24, Z+2	; 0x02
    1246:	93 81       	ldd	r25, Z+3	; 0x03
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	40 e8       	ldi	r20, 0x80	; 128
    124e:	5f e3       	ldi	r21, 0x3F	; 63
    1250:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1254:	88 23       	and	r24, r24
    1256:	44 f4       	brge	.+16     	; 0x1268 <main+0x43a>
		__ticks = 1;
    1258:	fe 01       	movw	r30, r28
    125a:	e7 5a       	subi	r30, 0xA7	; 167
    125c:	ff 4f       	sbci	r31, 0xFF	; 255
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	91 83       	std	Z+1, r25	; 0x01
    1264:	80 83       	st	Z, r24
    1266:	64 c0       	rjmp	.+200    	; 0x1330 <main+0x502>
	else if (__tmp > 65535)
    1268:	fe 01       	movw	r30, r28
    126a:	e5 5a       	subi	r30, 0xA5	; 165
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	60 81       	ld	r22, Z
    1270:	71 81       	ldd	r23, Z+1	; 0x01
    1272:	82 81       	ldd	r24, Z+2	; 0x02
    1274:	93 81       	ldd	r25, Z+3	; 0x03
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	3f ef       	ldi	r19, 0xFF	; 255
    127a:	4f e7       	ldi	r20, 0x7F	; 127
    127c:	57 e4       	ldi	r21, 0x47	; 71
    127e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1282:	18 16       	cp	r1, r24
    1284:	0c f0       	brlt	.+2      	; 0x1288 <main+0x45a>
    1286:	43 c0       	rjmp	.+134    	; 0x130e <main+0x4e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1288:	fe 01       	movw	r30, r28
    128a:	e1 5a       	subi	r30, 0xA1	; 161
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	60 81       	ld	r22, Z
    1290:	71 81       	ldd	r23, Z+1	; 0x01
    1292:	82 81       	ldd	r24, Z+2	; 0x02
    1294:	93 81       	ldd	r25, Z+3	; 0x03
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e2       	ldi	r20, 0x20	; 32
    129c:	51 e4       	ldi	r21, 0x41	; 65
    129e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	8e 01       	movw	r16, r28
    12a8:	07 5a       	subi	r16, 0xA7	; 167
    12aa:	1f 4f       	sbci	r17, 0xFF	; 255
    12ac:	bc 01       	movw	r22, r24
    12ae:	cd 01       	movw	r24, r26
    12b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	f8 01       	movw	r30, r16
    12ba:	91 83       	std	Z+1, r25	; 0x01
    12bc:	80 83       	st	Z, r24
    12be:	1f c0       	rjmp	.+62     	; 0x12fe <main+0x4d0>
    12c0:	fe 01       	movw	r30, r28
    12c2:	e9 5a       	subi	r30, 0xA9	; 169
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	89 e1       	ldi	r24, 0x19	; 25
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	91 83       	std	Z+1, r25	; 0x01
    12cc:	80 83       	st	Z, r24
    12ce:	fe 01       	movw	r30, r28
    12d0:	e9 5a       	subi	r30, 0xA9	; 169
    12d2:	ff 4f       	sbci	r31, 0xFF	; 255
    12d4:	80 81       	ld	r24, Z
    12d6:	91 81       	ldd	r25, Z+1	; 0x01
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	f1 f7       	brne	.-4      	; 0x12d8 <main+0x4aa>
    12dc:	fe 01       	movw	r30, r28
    12de:	e9 5a       	subi	r30, 0xA9	; 169
    12e0:	ff 4f       	sbci	r31, 0xFF	; 255
    12e2:	91 83       	std	Z+1, r25	; 0x01
    12e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e6:	de 01       	movw	r26, r28
    12e8:	a7 5a       	subi	r26, 0xA7	; 167
    12ea:	bf 4f       	sbci	r27, 0xFF	; 255
    12ec:	fe 01       	movw	r30, r28
    12ee:	e7 5a       	subi	r30, 0xA7	; 167
    12f0:	ff 4f       	sbci	r31, 0xFF	; 255
    12f2:	80 81       	ld	r24, Z
    12f4:	91 81       	ldd	r25, Z+1	; 0x01
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	11 96       	adiw	r26, 0x01	; 1
    12fa:	9c 93       	st	X, r25
    12fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12fe:	fe 01       	movw	r30, r28
    1300:	e7 5a       	subi	r30, 0xA7	; 167
    1302:	ff 4f       	sbci	r31, 0xFF	; 255
    1304:	80 81       	ld	r24, Z
    1306:	91 81       	ldd	r25, Z+1	; 0x01
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	d1 f6       	brne	.-76     	; 0x12c0 <main+0x492>
    130c:	27 c0       	rjmp	.+78     	; 0x135c <main+0x52e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130e:	8e 01       	movw	r16, r28
    1310:	07 5a       	subi	r16, 0xA7	; 167
    1312:	1f 4f       	sbci	r17, 0xFF	; 255
    1314:	fe 01       	movw	r30, r28
    1316:	e5 5a       	subi	r30, 0xA5	; 165
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	60 81       	ld	r22, Z
    131c:	71 81       	ldd	r23, Z+1	; 0x01
    131e:	82 81       	ldd	r24, Z+2	; 0x02
    1320:	93 81       	ldd	r25, Z+3	; 0x03
    1322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	f8 01       	movw	r30, r16
    132c:	91 83       	std	Z+1, r25	; 0x01
    132e:	80 83       	st	Z, r24
    1330:	de 01       	movw	r26, r28
    1332:	ab 5a       	subi	r26, 0xAB	; 171
    1334:	bf 4f       	sbci	r27, 0xFF	; 255
    1336:	fe 01       	movw	r30, r28
    1338:	e7 5a       	subi	r30, 0xA7	; 167
    133a:	ff 4f       	sbci	r31, 0xFF	; 255
    133c:	80 81       	ld	r24, Z
    133e:	91 81       	ldd	r25, Z+1	; 0x01
    1340:	8d 93       	st	X+, r24
    1342:	9c 93       	st	X, r25
    1344:	fe 01       	movw	r30, r28
    1346:	eb 5a       	subi	r30, 0xAB	; 171
    1348:	ff 4f       	sbci	r31, 0xFF	; 255
    134a:	80 81       	ld	r24, Z
    134c:	91 81       	ldd	r25, Z+1	; 0x01
    134e:	01 97       	sbiw	r24, 0x01	; 1
    1350:	f1 f7       	brne	.-4      	; 0x134e <main+0x520>
    1352:	fe 01       	movw	r30, r28
    1354:	eb 5a       	subi	r30, 0xAB	; 171
    1356:	ff 4f       	sbci	r31, 0xFF	; 255
    1358:	91 83       	std	Z+1, r25	; 0x01
    135a:	80 83       	st	Z, r24
	{
		_delay_ms(300);
		Led_ON(LED0);
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	0e 94 26 31 	call	0x624c	; 0x624c <Led_ON>
Lcd_Goto_Row_Column(1, 0);
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
Lcd_Display_str("         ");
    136a:	8c ec       	ldi	r24, 0xCC	; 204
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
Lcd_Goto_Row_Column(1, 0);
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
		Lcd_Display_str("Led0:ON");
    137a:	88 e1       	ldi	r24, 0x18	; 24
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
		Bluetooth_Transmit(Keypad_Read());
    1382:	0e 94 57 2a 	call	0x54ae	; 0x54ae <Keypad_Read>
    1386:	0e 94 dd 26 	call	0x4dba	; 0x4dba <Bluetooth_Transmit>
    138a:	ab c3       	rjmp	.+1878   	; 0x1ae2 <main+0xcb4>
	}
	else if(Keypad_Read()=='1')
    138c:	0e 94 57 2a 	call	0x54ae	; 0x54ae <Keypad_Read>
    1390:	81 33       	cpi	r24, 0x31	; 49
    1392:	09 f0       	breq	.+2      	; 0x1396 <main+0x568>
    1394:	cb c0       	rjmp	.+406    	; 0x152c <main+0x6fe>
    1396:	fe 01       	movw	r30, r28
    1398:	ef 5a       	subi	r30, 0xAF	; 175
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	a6 e9       	ldi	r26, 0x96	; 150
    13a2:	b3 e4       	ldi	r27, 0x43	; 67
    13a4:	80 83       	st	Z, r24
    13a6:	91 83       	std	Z+1, r25	; 0x01
    13a8:	a2 83       	std	Z+2, r26	; 0x02
    13aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ac:	8e 01       	movw	r16, r28
    13ae:	03 5b       	subi	r16, 0xB3	; 179
    13b0:	1f 4f       	sbci	r17, 0xFF	; 255
    13b2:	fe 01       	movw	r30, r28
    13b4:	ef 5a       	subi	r30, 0xAF	; 175
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	60 81       	ld	r22, Z
    13ba:	71 81       	ldd	r23, Z+1	; 0x01
    13bc:	82 81       	ldd	r24, Z+2	; 0x02
    13be:	93 81       	ldd	r25, Z+3	; 0x03
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	4a e7       	ldi	r20, 0x7A	; 122
    13c6:	53 e4       	ldi	r21, 0x43	; 67
    13c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	f8 01       	movw	r30, r16
    13d2:	80 83       	st	Z, r24
    13d4:	91 83       	std	Z+1, r25	; 0x01
    13d6:	a2 83       	std	Z+2, r26	; 0x02
    13d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13da:	fe 01       	movw	r30, r28
    13dc:	e3 5b       	subi	r30, 0xB3	; 179
    13de:	ff 4f       	sbci	r31, 0xFF	; 255
    13e0:	60 81       	ld	r22, Z
    13e2:	71 81       	ldd	r23, Z+1	; 0x01
    13e4:	82 81       	ldd	r24, Z+2	; 0x02
    13e6:	93 81       	ldd	r25, Z+3	; 0x03
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e8       	ldi	r20, 0x80	; 128
    13ee:	5f e3       	ldi	r21, 0x3F	; 63
    13f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13f4:	88 23       	and	r24, r24
    13f6:	44 f4       	brge	.+16     	; 0x1408 <main+0x5da>
		__ticks = 1;
    13f8:	fe 01       	movw	r30, r28
    13fa:	e5 5b       	subi	r30, 0xB5	; 181
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	91 83       	std	Z+1, r25	; 0x01
    1404:	80 83       	st	Z, r24
    1406:	64 c0       	rjmp	.+200    	; 0x14d0 <main+0x6a2>
	else if (__tmp > 65535)
    1408:	fe 01       	movw	r30, r28
    140a:	e3 5b       	subi	r30, 0xB3	; 179
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	60 81       	ld	r22, Z
    1410:	71 81       	ldd	r23, Z+1	; 0x01
    1412:	82 81       	ldd	r24, Z+2	; 0x02
    1414:	93 81       	ldd	r25, Z+3	; 0x03
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	3f ef       	ldi	r19, 0xFF	; 255
    141a:	4f e7       	ldi	r20, 0x7F	; 127
    141c:	57 e4       	ldi	r21, 0x47	; 71
    141e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1422:	18 16       	cp	r1, r24
    1424:	0c f0       	brlt	.+2      	; 0x1428 <main+0x5fa>
    1426:	43 c0       	rjmp	.+134    	; 0x14ae <main+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1428:	fe 01       	movw	r30, r28
    142a:	ef 5a       	subi	r30, 0xAF	; 175
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	60 81       	ld	r22, Z
    1430:	71 81       	ldd	r23, Z+1	; 0x01
    1432:	82 81       	ldd	r24, Z+2	; 0x02
    1434:	93 81       	ldd	r25, Z+3	; 0x03
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	40 e2       	ldi	r20, 0x20	; 32
    143c:	51 e4       	ldi	r21, 0x41	; 65
    143e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	8e 01       	movw	r16, r28
    1448:	05 5b       	subi	r16, 0xB5	; 181
    144a:	1f 4f       	sbci	r17, 0xFF	; 255
    144c:	bc 01       	movw	r22, r24
    144e:	cd 01       	movw	r24, r26
    1450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	f8 01       	movw	r30, r16
    145a:	91 83       	std	Z+1, r25	; 0x01
    145c:	80 83       	st	Z, r24
    145e:	1f c0       	rjmp	.+62     	; 0x149e <main+0x670>
    1460:	fe 01       	movw	r30, r28
    1462:	e7 5b       	subi	r30, 0xB7	; 183
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	89 e1       	ldi	r24, 0x19	; 25
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	91 83       	std	Z+1, r25	; 0x01
    146c:	80 83       	st	Z, r24
    146e:	fe 01       	movw	r30, r28
    1470:	e7 5b       	subi	r30, 0xB7	; 183
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	80 81       	ld	r24, Z
    1476:	91 81       	ldd	r25, Z+1	; 0x01
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <main+0x64a>
    147c:	fe 01       	movw	r30, r28
    147e:	e7 5b       	subi	r30, 0xB7	; 183
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	91 83       	std	Z+1, r25	; 0x01
    1484:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1486:	de 01       	movw	r26, r28
    1488:	a5 5b       	subi	r26, 0xB5	; 181
    148a:	bf 4f       	sbci	r27, 0xFF	; 255
    148c:	fe 01       	movw	r30, r28
    148e:	e5 5b       	subi	r30, 0xB5	; 181
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	80 81       	ld	r24, Z
    1494:	91 81       	ldd	r25, Z+1	; 0x01
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	11 96       	adiw	r26, 0x01	; 1
    149a:	9c 93       	st	X, r25
    149c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    149e:	fe 01       	movw	r30, r28
    14a0:	e5 5b       	subi	r30, 0xB5	; 181
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	80 81       	ld	r24, Z
    14a6:	91 81       	ldd	r25, Z+1	; 0x01
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	d1 f6       	brne	.-76     	; 0x1460 <main+0x632>
    14ac:	27 c0       	rjmp	.+78     	; 0x14fc <main+0x6ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ae:	8e 01       	movw	r16, r28
    14b0:	05 5b       	subi	r16, 0xB5	; 181
    14b2:	1f 4f       	sbci	r17, 0xFF	; 255
    14b4:	fe 01       	movw	r30, r28
    14b6:	e3 5b       	subi	r30, 0xB3	; 179
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	60 81       	ld	r22, Z
    14bc:	71 81       	ldd	r23, Z+1	; 0x01
    14be:	82 81       	ldd	r24, Z+2	; 0x02
    14c0:	93 81       	ldd	r25, Z+3	; 0x03
    14c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	f8 01       	movw	r30, r16
    14cc:	91 83       	std	Z+1, r25	; 0x01
    14ce:	80 83       	st	Z, r24
    14d0:	de 01       	movw	r26, r28
    14d2:	a9 5b       	subi	r26, 0xB9	; 185
    14d4:	bf 4f       	sbci	r27, 0xFF	; 255
    14d6:	fe 01       	movw	r30, r28
    14d8:	e5 5b       	subi	r30, 0xB5	; 181
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	80 81       	ld	r24, Z
    14de:	91 81       	ldd	r25, Z+1	; 0x01
    14e0:	8d 93       	st	X+, r24
    14e2:	9c 93       	st	X, r25
    14e4:	fe 01       	movw	r30, r28
    14e6:	e9 5b       	subi	r30, 0xB9	; 185
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <main+0x6c0>
    14f2:	fe 01       	movw	r30, r28
    14f4:	e9 5b       	subi	r30, 0xB9	; 185
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	91 83       	std	Z+1, r25	; 0x01
    14fa:	80 83       	st	Z, r24
	{
		_delay_ms(300);
		Led_OFF(LED0);
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	0e 94 57 31 	call	0x62ae	; 0x62ae <Led_OFF>
		Lcd_Goto_Row_Column(1, 0);
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
		Lcd_Display_str("         ");
    150a:	8c ec       	ldi	r24, 0xCC	; 204
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
		Lcd_Goto_Row_Column(1, 0);
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
		Lcd_Display_str("Led0:Off");
    151a:	80 e2       	ldi	r24, 0x20	; 32
    151c:	91 e0       	ldi	r25, 0x01	; 1
    151e:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
		Bluetooth_Transmit(Keypad_Read());
    1522:	0e 94 57 2a 	call	0x54ae	; 0x54ae <Keypad_Read>
    1526:	0e 94 dd 26 	call	0x4dba	; 0x4dba <Bluetooth_Transmit>
    152a:	db c2       	rjmp	.+1462   	; 0x1ae2 <main+0xcb4>
	}
	else if(Keypad_Read()=='2')
    152c:	0e 94 57 2a 	call	0x54ae	; 0x54ae <Keypad_Read>
    1530:	82 33       	cpi	r24, 0x32	; 50
    1532:	09 f0       	breq	.+2      	; 0x1536 <main+0x708>
    1534:	9d c0       	rjmp	.+314    	; 0x1670 <main+0x842>
    1536:	fe 01       	movw	r30, r28
    1538:	ed 5b       	subi	r30, 0xBD	; 189
    153a:	ff 4f       	sbci	r31, 0xFF	; 255
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	a6 e9       	ldi	r26, 0x96	; 150
    1542:	b3 e4       	ldi	r27, 0x43	; 67
    1544:	80 83       	st	Z, r24
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	a2 83       	std	Z+2, r26	; 0x02
    154a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    154c:	8e 01       	movw	r16, r28
    154e:	01 5c       	subi	r16, 0xC1	; 193
    1550:	1f 4f       	sbci	r17, 0xFF	; 255
    1552:	fe 01       	movw	r30, r28
    1554:	ed 5b       	subi	r30, 0xBD	; 189
    1556:	ff 4f       	sbci	r31, 0xFF	; 255
    1558:	60 81       	ld	r22, Z
    155a:	71 81       	ldd	r23, Z+1	; 0x01
    155c:	82 81       	ldd	r24, Z+2	; 0x02
    155e:	93 81       	ldd	r25, Z+3	; 0x03
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	4a e7       	ldi	r20, 0x7A	; 122
    1566:	53 e4       	ldi	r21, 0x43	; 67
    1568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	f8 01       	movw	r30, r16
    1572:	80 83       	st	Z, r24
    1574:	91 83       	std	Z+1, r25	; 0x01
    1576:	a2 83       	std	Z+2, r26	; 0x02
    1578:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    157a:	fe 01       	movw	r30, r28
    157c:	ff 96       	adiw	r30, 0x3f	; 63
    157e:	60 81       	ld	r22, Z
    1580:	71 81       	ldd	r23, Z+1	; 0x01
    1582:	82 81       	ldd	r24, Z+2	; 0x02
    1584:	93 81       	ldd	r25, Z+3	; 0x03
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e8       	ldi	r20, 0x80	; 128
    158c:	5f e3       	ldi	r21, 0x3F	; 63
    158e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1592:	88 23       	and	r24, r24
    1594:	2c f4       	brge	.+10     	; 0x15a0 <main+0x772>
		__ticks = 1;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	9e af       	std	Y+62, r25	; 0x3e
    159c:	8d af       	std	Y+61, r24	; 0x3d
    159e:	46 c0       	rjmp	.+140    	; 0x162c <main+0x7fe>
	else if (__tmp > 65535)
    15a0:	fe 01       	movw	r30, r28
    15a2:	ff 96       	adiw	r30, 0x3f	; 63
    15a4:	60 81       	ld	r22, Z
    15a6:	71 81       	ldd	r23, Z+1	; 0x01
    15a8:	82 81       	ldd	r24, Z+2	; 0x02
    15aa:	93 81       	ldd	r25, Z+3	; 0x03
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	3f ef       	ldi	r19, 0xFF	; 255
    15b0:	4f e7       	ldi	r20, 0x7F	; 127
    15b2:	57 e4       	ldi	r21, 0x47	; 71
    15b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15b8:	18 16       	cp	r1, r24
    15ba:	64 f5       	brge	.+88     	; 0x1614 <main+0x7e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15bc:	fe 01       	movw	r30, r28
    15be:	ed 5b       	subi	r30, 0xBD	; 189
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	60 81       	ld	r22, Z
    15c4:	71 81       	ldd	r23, Z+1	; 0x01
    15c6:	82 81       	ldd	r24, Z+2	; 0x02
    15c8:	93 81       	ldd	r25, Z+3	; 0x03
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e2       	ldi	r20, 0x20	; 32
    15d0:	51 e4       	ldi	r21, 0x41	; 65
    15d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	bc 01       	movw	r22, r24
    15dc:	cd 01       	movw	r24, r26
    15de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	9e af       	std	Y+62, r25	; 0x3e
    15e8:	8d af       	std	Y+61, r24	; 0x3d
    15ea:	0f c0       	rjmp	.+30     	; 0x160a <main+0x7dc>
    15ec:	89 e1       	ldi	r24, 0x19	; 25
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	9c af       	std	Y+60, r25	; 0x3c
    15f2:	8b af       	std	Y+59, r24	; 0x3b
    15f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    15f6:	9c ad       	ldd	r25, Y+60	; 0x3c
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <main+0x7ca>
    15fc:	9c af       	std	Y+60, r25	; 0x3c
    15fe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1600:	8d ad       	ldd	r24, Y+61	; 0x3d
    1602:	9e ad       	ldd	r25, Y+62	; 0x3e
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	9e af       	std	Y+62, r25	; 0x3e
    1608:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160a:	8d ad       	ldd	r24, Y+61	; 0x3d
    160c:	9e ad       	ldd	r25, Y+62	; 0x3e
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	69 f7       	brne	.-38     	; 0x15ec <main+0x7be>
    1612:	16 c0       	rjmp	.+44     	; 0x1640 <main+0x812>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1614:	fe 01       	movw	r30, r28
    1616:	ff 96       	adiw	r30, 0x3f	; 63
    1618:	60 81       	ld	r22, Z
    161a:	71 81       	ldd	r23, Z+1	; 0x01
    161c:	82 81       	ldd	r24, Z+2	; 0x02
    161e:	93 81       	ldd	r25, Z+3	; 0x03
    1620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	9e af       	std	Y+62, r25	; 0x3e
    162a:	8d af       	std	Y+61, r24	; 0x3d
    162c:	8d ad       	ldd	r24, Y+61	; 0x3d
    162e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1630:	9a af       	std	Y+58, r25	; 0x3a
    1632:	89 af       	std	Y+57, r24	; 0x39
    1634:	89 ad       	ldd	r24, Y+57	; 0x39
    1636:	9a ad       	ldd	r25, Y+58	; 0x3a
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	f1 f7       	brne	.-4      	; 0x1638 <main+0x80a>
    163c:	9a af       	std	Y+58, r25	; 0x3a
    163e:	89 af       	std	Y+57, r24	; 0x39
	{
		_delay_ms(300);
		Led_ON(LED1);
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	0e 94 26 31 	call	0x624c	; 0x624c <Led_ON>
		Lcd_Goto_Row_Column(1, 0);
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
		Lcd_Display_str("         ");
    164e:	8c ec       	ldi	r24, 0xCC	; 204
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
		Lcd_Goto_Row_Column(1, 0);
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
		Lcd_Display_str("Led1:ON");
    165e:	89 e2       	ldi	r24, 0x29	; 41
    1660:	91 e0       	ldi	r25, 0x01	; 1
    1662:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
		Bluetooth_Transmit(Keypad_Read());
    1666:	0e 94 57 2a 	call	0x54ae	; 0x54ae <Keypad_Read>
    166a:	0e 94 dd 26 	call	0x4dba	; 0x4dba <Bluetooth_Transmit>
    166e:	39 c2       	rjmp	.+1138   	; 0x1ae2 <main+0xcb4>
	}
	else if(Keypad_Read()=='3')
    1670:	0e 94 57 2a 	call	0x54ae	; 0x54ae <Keypad_Read>
    1674:	83 33       	cpi	r24, 0x33	; 51
    1676:	09 f0       	breq	.+2      	; 0x167a <main+0x84c>
    1678:	8a c0       	rjmp	.+276    	; 0x178e <main+0x960>
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	a6 e9       	ldi	r26, 0x96	; 150
    1680:	b3 e4       	ldi	r27, 0x43	; 67
    1682:	8d ab       	std	Y+53, r24	; 0x35
    1684:	9e ab       	std	Y+54, r25	; 0x36
    1686:	af ab       	std	Y+55, r26	; 0x37
    1688:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168a:	6d a9       	ldd	r22, Y+53	; 0x35
    168c:	7e a9       	ldd	r23, Y+54	; 0x36
    168e:	8f a9       	ldd	r24, Y+55	; 0x37
    1690:	98 ad       	ldd	r25, Y+56	; 0x38
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	4a e7       	ldi	r20, 0x7A	; 122
    1698:	53 e4       	ldi	r21, 0x43	; 67
    169a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	89 ab       	std	Y+49, r24	; 0x31
    16a4:	9a ab       	std	Y+50, r25	; 0x32
    16a6:	ab ab       	std	Y+51, r26	; 0x33
    16a8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16aa:	69 a9       	ldd	r22, Y+49	; 0x31
    16ac:	7a a9       	ldd	r23, Y+50	; 0x32
    16ae:	8b a9       	ldd	r24, Y+51	; 0x33
    16b0:	9c a9       	ldd	r25, Y+52	; 0x34
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e8       	ldi	r20, 0x80	; 128
    16b8:	5f e3       	ldi	r21, 0x3F	; 63
    16ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16be:	88 23       	and	r24, r24
    16c0:	2c f4       	brge	.+10     	; 0x16cc <main+0x89e>
		__ticks = 1;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	98 ab       	std	Y+48, r25	; 0x30
    16c8:	8f a7       	std	Y+47, r24	; 0x2f
    16ca:	3f c0       	rjmp	.+126    	; 0x174a <main+0x91c>
	else if (__tmp > 65535)
    16cc:	69 a9       	ldd	r22, Y+49	; 0x31
    16ce:	7a a9       	ldd	r23, Y+50	; 0x32
    16d0:	8b a9       	ldd	r24, Y+51	; 0x33
    16d2:	9c a9       	ldd	r25, Y+52	; 0x34
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	3f ef       	ldi	r19, 0xFF	; 255
    16d8:	4f e7       	ldi	r20, 0x7F	; 127
    16da:	57 e4       	ldi	r21, 0x47	; 71
    16dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16e0:	18 16       	cp	r1, r24
    16e2:	4c f5       	brge	.+82     	; 0x1736 <main+0x908>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e4:	6d a9       	ldd	r22, Y+53	; 0x35
    16e6:	7e a9       	ldd	r23, Y+54	; 0x36
    16e8:	8f a9       	ldd	r24, Y+55	; 0x37
    16ea:	98 ad       	ldd	r25, Y+56	; 0x38
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e2       	ldi	r20, 0x20	; 32
    16f2:	51 e4       	ldi	r21, 0x41	; 65
    16f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	bc 01       	movw	r22, r24
    16fe:	cd 01       	movw	r24, r26
    1700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	98 ab       	std	Y+48, r25	; 0x30
    170a:	8f a7       	std	Y+47, r24	; 0x2f
    170c:	0f c0       	rjmp	.+30     	; 0x172c <main+0x8fe>
    170e:	89 e1       	ldi	r24, 0x19	; 25
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	9e a7       	std	Y+46, r25	; 0x2e
    1714:	8d a7       	std	Y+45, r24	; 0x2d
    1716:	8d a5       	ldd	r24, Y+45	; 0x2d
    1718:	9e a5       	ldd	r25, Y+46	; 0x2e
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	f1 f7       	brne	.-4      	; 0x171a <main+0x8ec>
    171e:	9e a7       	std	Y+46, r25	; 0x2e
    1720:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1722:	8f a5       	ldd	r24, Y+47	; 0x2f
    1724:	98 a9       	ldd	r25, Y+48	; 0x30
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	98 ab       	std	Y+48, r25	; 0x30
    172a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172c:	8f a5       	ldd	r24, Y+47	; 0x2f
    172e:	98 a9       	ldd	r25, Y+48	; 0x30
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	69 f7       	brne	.-38     	; 0x170e <main+0x8e0>
    1734:	14 c0       	rjmp	.+40     	; 0x175e <main+0x930>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1736:	69 a9       	ldd	r22, Y+49	; 0x31
    1738:	7a a9       	ldd	r23, Y+50	; 0x32
    173a:	8b a9       	ldd	r24, Y+51	; 0x33
    173c:	9c a9       	ldd	r25, Y+52	; 0x34
    173e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	98 ab       	std	Y+48, r25	; 0x30
    1748:	8f a7       	std	Y+47, r24	; 0x2f
    174a:	8f a5       	ldd	r24, Y+47	; 0x2f
    174c:	98 a9       	ldd	r25, Y+48	; 0x30
    174e:	9c a7       	std	Y+44, r25	; 0x2c
    1750:	8b a7       	std	Y+43, r24	; 0x2b
    1752:	8b a5       	ldd	r24, Y+43	; 0x2b
    1754:	9c a5       	ldd	r25, Y+44	; 0x2c
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	f1 f7       	brne	.-4      	; 0x1756 <main+0x928>
    175a:	9c a7       	std	Y+44, r25	; 0x2c
    175c:	8b a7       	std	Y+43, r24	; 0x2b
	{
		_delay_ms(300);
		Led_OFF(LED1);
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	0e 94 57 31 	call	0x62ae	; 0x62ae <Led_OFF>
		Lcd_Goto_Row_Column(1, 0);
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
		Lcd_Display_str("         ");
    176c:	8c ec       	ldi	r24, 0xCC	; 204
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
		Lcd_Goto_Row_Column(1, 0);
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
		Lcd_Display_str("Led1:Off");
    177c:	81 e3       	ldi	r24, 0x31	; 49
    177e:	91 e0       	ldi	r25, 0x01	; 1
    1780:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
		Bluetooth_Transmit(Keypad_Read());
    1784:	0e 94 57 2a 	call	0x54ae	; 0x54ae <Keypad_Read>
    1788:	0e 94 dd 26 	call	0x4dba	; 0x4dba <Bluetooth_Transmit>
    178c:	aa c1       	rjmp	.+852    	; 0x1ae2 <main+0xcb4>
	}
	else if(Keypad_Read()=='4')
    178e:	0e 94 57 2a 	call	0x54ae	; 0x54ae <Keypad_Read>
    1792:	84 33       	cpi	r24, 0x34	; 52
    1794:	09 f0       	breq	.+2      	; 0x1798 <main+0x96a>
    1796:	8a c0       	rjmp	.+276    	; 0x18ac <main+0xa7e>
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a6 e9       	ldi	r26, 0x96	; 150
    179e:	b3 e4       	ldi	r27, 0x43	; 67
    17a0:	8f a3       	std	Y+39, r24	; 0x27
    17a2:	98 a7       	std	Y+40, r25	; 0x28
    17a4:	a9 a7       	std	Y+41, r26	; 0x29
    17a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a8:	6f a1       	ldd	r22, Y+39	; 0x27
    17aa:	78 a5       	ldd	r23, Y+40	; 0x28
    17ac:	89 a5       	ldd	r24, Y+41	; 0x29
    17ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	4a e7       	ldi	r20, 0x7A	; 122
    17b6:	53 e4       	ldi	r21, 0x43	; 67
    17b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	8b a3       	std	Y+35, r24	; 0x23
    17c2:	9c a3       	std	Y+36, r25	; 0x24
    17c4:	ad a3       	std	Y+37, r26	; 0x25
    17c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17c8:	6b a1       	ldd	r22, Y+35	; 0x23
    17ca:	7c a1       	ldd	r23, Y+36	; 0x24
    17cc:	8d a1       	ldd	r24, Y+37	; 0x25
    17ce:	9e a1       	ldd	r25, Y+38	; 0x26
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e8       	ldi	r20, 0x80	; 128
    17d6:	5f e3       	ldi	r21, 0x3F	; 63
    17d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17dc:	88 23       	and	r24, r24
    17de:	2c f4       	brge	.+10     	; 0x17ea <main+0x9bc>
		__ticks = 1;
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	9a a3       	std	Y+34, r25	; 0x22
    17e6:	89 a3       	std	Y+33, r24	; 0x21
    17e8:	3f c0       	rjmp	.+126    	; 0x1868 <main+0xa3a>
	else if (__tmp > 65535)
    17ea:	6b a1       	ldd	r22, Y+35	; 0x23
    17ec:	7c a1       	ldd	r23, Y+36	; 0x24
    17ee:	8d a1       	ldd	r24, Y+37	; 0x25
    17f0:	9e a1       	ldd	r25, Y+38	; 0x26
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	3f ef       	ldi	r19, 0xFF	; 255
    17f6:	4f e7       	ldi	r20, 0x7F	; 127
    17f8:	57 e4       	ldi	r21, 0x47	; 71
    17fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17fe:	18 16       	cp	r1, r24
    1800:	4c f5       	brge	.+82     	; 0x1854 <main+0xa26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1802:	6f a1       	ldd	r22, Y+39	; 0x27
    1804:	78 a5       	ldd	r23, Y+40	; 0x28
    1806:	89 a5       	ldd	r24, Y+41	; 0x29
    1808:	9a a5       	ldd	r25, Y+42	; 0x2a
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e2       	ldi	r20, 0x20	; 32
    1810:	51 e4       	ldi	r21, 0x41	; 65
    1812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	bc 01       	movw	r22, r24
    181c:	cd 01       	movw	r24, r26
    181e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	9a a3       	std	Y+34, r25	; 0x22
    1828:	89 a3       	std	Y+33, r24	; 0x21
    182a:	0f c0       	rjmp	.+30     	; 0x184a <main+0xa1c>
    182c:	89 e1       	ldi	r24, 0x19	; 25
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	98 a3       	std	Y+32, r25	; 0x20
    1832:	8f 8f       	std	Y+31, r24	; 0x1f
    1834:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1836:	98 a1       	ldd	r25, Y+32	; 0x20
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <main+0xa0a>
    183c:	98 a3       	std	Y+32, r25	; 0x20
    183e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1840:	89 a1       	ldd	r24, Y+33	; 0x21
    1842:	9a a1       	ldd	r25, Y+34	; 0x22
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	9a a3       	std	Y+34, r25	; 0x22
    1848:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184a:	89 a1       	ldd	r24, Y+33	; 0x21
    184c:	9a a1       	ldd	r25, Y+34	; 0x22
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	69 f7       	brne	.-38     	; 0x182c <main+0x9fe>
    1852:	14 c0       	rjmp	.+40     	; 0x187c <main+0xa4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1854:	6b a1       	ldd	r22, Y+35	; 0x23
    1856:	7c a1       	ldd	r23, Y+36	; 0x24
    1858:	8d a1       	ldd	r24, Y+37	; 0x25
    185a:	9e a1       	ldd	r25, Y+38	; 0x26
    185c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	9a a3       	std	Y+34, r25	; 0x22
    1866:	89 a3       	std	Y+33, r24	; 0x21
    1868:	89 a1       	ldd	r24, Y+33	; 0x21
    186a:	9a a1       	ldd	r25, Y+34	; 0x22
    186c:	9e 8f       	std	Y+30, r25	; 0x1e
    186e:	8d 8f       	std	Y+29, r24	; 0x1d
    1870:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1872:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <main+0xa46>
    1878:	9e 8f       	std	Y+30, r25	; 0x1e
    187a:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(300);
			Led_ON(LED2);
    187c:	82 e0       	ldi	r24, 0x02	; 2
    187e:	0e 94 26 31 	call	0x624c	; 0x624c <Led_ON>
			Lcd_Goto_Row_Column(1, 0);
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
			Lcd_Display_str("         ");
    188a:	8c ec       	ldi	r24, 0xCC	; 204
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
			Lcd_Goto_Row_Column(1, 0);
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	60 e0       	ldi	r22, 0x00	; 0
    1896:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
			Lcd_Display_str("Led2:ON");
    189a:	8a e3       	ldi	r24, 0x3A	; 58
    189c:	91 e0       	ldi	r25, 0x01	; 1
    189e:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
			Bluetooth_Transmit(Keypad_Read());
    18a2:	0e 94 57 2a 	call	0x54ae	; 0x54ae <Keypad_Read>
    18a6:	0e 94 dd 26 	call	0x4dba	; 0x4dba <Bluetooth_Transmit>
    18aa:	1b c1       	rjmp	.+566    	; 0x1ae2 <main+0xcb4>
		}
		else if(Keypad_Read()=='5')
    18ac:	0e 94 57 2a 	call	0x54ae	; 0x54ae <Keypad_Read>
    18b0:	85 33       	cpi	r24, 0x35	; 53
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <main+0xa88>
    18b4:	8a c0       	rjmp	.+276    	; 0x19ca <main+0xb9c>
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	a6 e9       	ldi	r26, 0x96	; 150
    18bc:	b3 e4       	ldi	r27, 0x43	; 67
    18be:	89 8f       	std	Y+25, r24	; 0x19
    18c0:	9a 8f       	std	Y+26, r25	; 0x1a
    18c2:	ab 8f       	std	Y+27, r26	; 0x1b
    18c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c6:	69 8d       	ldd	r22, Y+25	; 0x19
    18c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	4a e7       	ldi	r20, 0x7A	; 122
    18d4:	53 e4       	ldi	r21, 0x43	; 67
    18d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	8d 8b       	std	Y+21, r24	; 0x15
    18e0:	9e 8b       	std	Y+22, r25	; 0x16
    18e2:	af 8b       	std	Y+23, r26	; 0x17
    18e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18e6:	6d 89       	ldd	r22, Y+21	; 0x15
    18e8:	7e 89       	ldd	r23, Y+22	; 0x16
    18ea:	8f 89       	ldd	r24, Y+23	; 0x17
    18ec:	98 8d       	ldd	r25, Y+24	; 0x18
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	40 e8       	ldi	r20, 0x80	; 128
    18f4:	5f e3       	ldi	r21, 0x3F	; 63
    18f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18fa:	88 23       	and	r24, r24
    18fc:	2c f4       	brge	.+10     	; 0x1908 <main+0xada>
		__ticks = 1;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	9c 8b       	std	Y+20, r25	; 0x14
    1904:	8b 8b       	std	Y+19, r24	; 0x13
    1906:	3f c0       	rjmp	.+126    	; 0x1986 <main+0xb58>
	else if (__tmp > 65535)
    1908:	6d 89       	ldd	r22, Y+21	; 0x15
    190a:	7e 89       	ldd	r23, Y+22	; 0x16
    190c:	8f 89       	ldd	r24, Y+23	; 0x17
    190e:	98 8d       	ldd	r25, Y+24	; 0x18
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	3f ef       	ldi	r19, 0xFF	; 255
    1914:	4f e7       	ldi	r20, 0x7F	; 127
    1916:	57 e4       	ldi	r21, 0x47	; 71
    1918:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    191c:	18 16       	cp	r1, r24
    191e:	4c f5       	brge	.+82     	; 0x1972 <main+0xb44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1920:	69 8d       	ldd	r22, Y+25	; 0x19
    1922:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1924:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1926:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e2       	ldi	r20, 0x20	; 32
    192e:	51 e4       	ldi	r21, 0x41	; 65
    1930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	bc 01       	movw	r22, r24
    193a:	cd 01       	movw	r24, r26
    193c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	9c 8b       	std	Y+20, r25	; 0x14
    1946:	8b 8b       	std	Y+19, r24	; 0x13
    1948:	0f c0       	rjmp	.+30     	; 0x1968 <main+0xb3a>
    194a:	89 e1       	ldi	r24, 0x19	; 25
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	9a 8b       	std	Y+18, r25	; 0x12
    1950:	89 8b       	std	Y+17, r24	; 0x11
    1952:	89 89       	ldd	r24, Y+17	; 0x11
    1954:	9a 89       	ldd	r25, Y+18	; 0x12
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <main+0xb28>
    195a:	9a 8b       	std	Y+18, r25	; 0x12
    195c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195e:	8b 89       	ldd	r24, Y+19	; 0x13
    1960:	9c 89       	ldd	r25, Y+20	; 0x14
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	9c 8b       	std	Y+20, r25	; 0x14
    1966:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1968:	8b 89       	ldd	r24, Y+19	; 0x13
    196a:	9c 89       	ldd	r25, Y+20	; 0x14
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	69 f7       	brne	.-38     	; 0x194a <main+0xb1c>
    1970:	14 c0       	rjmp	.+40     	; 0x199a <main+0xb6c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1972:	6d 89       	ldd	r22, Y+21	; 0x15
    1974:	7e 89       	ldd	r23, Y+22	; 0x16
    1976:	8f 89       	ldd	r24, Y+23	; 0x17
    1978:	98 8d       	ldd	r25, Y+24	; 0x18
    197a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	9c 8b       	std	Y+20, r25	; 0x14
    1984:	8b 8b       	std	Y+19, r24	; 0x13
    1986:	8b 89       	ldd	r24, Y+19	; 0x13
    1988:	9c 89       	ldd	r25, Y+20	; 0x14
    198a:	98 8b       	std	Y+16, r25	; 0x10
    198c:	8f 87       	std	Y+15, r24	; 0x0f
    198e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1990:	98 89       	ldd	r25, Y+16	; 0x10
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	f1 f7       	brne	.-4      	; 0x1992 <main+0xb64>
    1996:	98 8b       	std	Y+16, r25	; 0x10
    1998:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(300);
			Led_OFF(LED2);
    199a:	82 e0       	ldi	r24, 0x02	; 2
    199c:	0e 94 57 31 	call	0x62ae	; 0x62ae <Led_OFF>
			Lcd_Goto_Row_Column(1, 0);
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
			Lcd_Display_str("         ");
    19a8:	8c ec       	ldi	r24, 0xCC	; 204
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
			Lcd_Goto_Row_Column(1, 0);
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	60 e0       	ldi	r22, 0x00	; 0
    19b4:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
			Lcd_Display_str("Led2:Off");
    19b8:	82 e4       	ldi	r24, 0x42	; 66
    19ba:	91 e0       	ldi	r25, 0x01	; 1
    19bc:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
			Bluetooth_Transmit(Keypad_Read());
    19c0:	0e 94 57 2a 	call	0x54ae	; 0x54ae <Keypad_Read>
    19c4:	0e 94 dd 26 	call	0x4dba	; 0x4dba <Bluetooth_Transmit>
    19c8:	8c c0       	rjmp	.+280    	; 0x1ae2 <main+0xcb4>
		}

	else if(Keypad_Read()=='P')
    19ca:	0e 94 57 2a 	call	0x54ae	; 0x54ae <Keypad_Read>
    19ce:	80 35       	cpi	r24, 0x50	; 80
    19d0:	09 f0       	breq	.+2      	; 0x19d4 <main+0xba6>
    19d2:	87 c0       	rjmp	.+270    	; 0x1ae2 <main+0xcb4>
	{
		Bluetooth_Transmit(Keypad_Read());
    19d4:	0e 94 57 2a 	call	0x54ae	; 0x54ae <Keypad_Read>
    19d8:	0e 94 dd 26 	call	0x4dba	; 0x4dba <Bluetooth_Transmit>
    19dc:	04 c0       	rjmp	.+8      	; 0x19e6 <main+0xbb8>
// to go out from user keypad mode

while(Keypad_Read()=='P')
{
	Check_Fane();
    19de:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <Check_Fane>
	mode=0;
    19e2:	10 92 d1 02 	sts	0x02D1, r1
	else if(Keypad_Read()=='P')
	{
		Bluetooth_Transmit(Keypad_Read());
// to go out from user keypad mode

while(Keypad_Read()=='P')
    19e6:	0e 94 57 2a 	call	0x54ae	; 0x54ae <Keypad_Read>
    19ea:	80 35       	cpi	r24, 0x50	; 80
    19ec:	c1 f3       	breq	.-16     	; 0x19de <main+0xbb0>
{
	Check_Fane();
	mode=0;
}

		Lcd_Cmd(_LCD_CLEAR);
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	0e 94 1b 30 	call	0x6036	; 0x6036 <Lcd_Cmd>
		Lcd_Display_str("Going outside ");
    19f4:	8b e4       	ldi	r24, 0x4B	; 75
    19f6:	91 e0       	ldi	r25, 0x01	; 1
    19f8:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	a6 e9       	ldi	r26, 0x96	; 150
    1a02:	b3 e4       	ldi	r27, 0x43	; 67
    1a04:	8b 87       	std	Y+11, r24	; 0x0b
    1a06:	9c 87       	std	Y+12, r25	; 0x0c
    1a08:	ad 87       	std	Y+13, r26	; 0x0d
    1a0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	4a e7       	ldi	r20, 0x7A	; 122
    1a1a:	53 e4       	ldi	r21, 0x43	; 67
    1a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	8f 83       	std	Y+7, r24	; 0x07
    1a26:	98 87       	std	Y+8, r25	; 0x08
    1a28:	a9 87       	std	Y+9, r26	; 0x09
    1a2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2e:	78 85       	ldd	r23, Y+8	; 0x08
    1a30:	89 85       	ldd	r24, Y+9	; 0x09
    1a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e8       	ldi	r20, 0x80	; 128
    1a3a:	5f e3       	ldi	r21, 0x3F	; 63
    1a3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a40:	88 23       	and	r24, r24
    1a42:	2c f4       	brge	.+10     	; 0x1a4e <main+0xc20>
		__ticks = 1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9e 83       	std	Y+6, r25	; 0x06
    1a4a:	8d 83       	std	Y+5, r24	; 0x05
    1a4c:	3f c0       	rjmp	.+126    	; 0x1acc <main+0xc9e>
	else if (__tmp > 65535)
    1a4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a50:	78 85       	ldd	r23, Y+8	; 0x08
    1a52:	89 85       	ldd	r24, Y+9	; 0x09
    1a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	3f ef       	ldi	r19, 0xFF	; 255
    1a5a:	4f e7       	ldi	r20, 0x7F	; 127
    1a5c:	57 e4       	ldi	r21, 0x47	; 71
    1a5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a62:	18 16       	cp	r1, r24
    1a64:	4c f5       	brge	.+82     	; 0x1ab8 <main+0xc8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e2       	ldi	r20, 0x20	; 32
    1a74:	51 e4       	ldi	r21, 0x41	; 65
    1a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	bc 01       	movw	r22, r24
    1a80:	cd 01       	movw	r24, r26
    1a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	9e 83       	std	Y+6, r25	; 0x06
    1a8c:	8d 83       	std	Y+5, r24	; 0x05
    1a8e:	0f c0       	rjmp	.+30     	; 0x1aae <main+0xc80>
    1a90:	89 e1       	ldi	r24, 0x19	; 25
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	9c 83       	std	Y+4, r25	; 0x04
    1a96:	8b 83       	std	Y+3, r24	; 0x03
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	f1 f7       	brne	.-4      	; 0x1a9c <main+0xc6e>
    1aa0:	9c 83       	std	Y+4, r25	; 0x04
    1aa2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	9e 83       	std	Y+6, r25	; 0x06
    1aac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aae:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	69 f7       	brne	.-38     	; 0x1a90 <main+0xc62>
    1ab6:	f0 c9       	rjmp	.-3104   	; 0xe98 <main+0x6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aba:	78 85       	ldd	r23, Y+8	; 0x08
    1abc:	89 85       	ldd	r24, Y+9	; 0x09
    1abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	9e 83       	std	Y+6, r25	; 0x06
    1aca:	8d 83       	std	Y+5, r24	; 0x05
    1acc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ace:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad0:	9a 83       	std	Y+2, r25	; 0x02
    1ad2:	89 83       	std	Y+1, r24	; 0x01
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <main+0xcaa>
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	89 83       	std	Y+1, r24	; 0x01
    1ae0:	db c9       	rjmp	.-3146   	; 0xe98 <main+0x6a>

Lcd_Cmd(_LCD_CLEAR);
Lcd_Display_str("User mode");
Bluetooth_Transmit(Keypad_Read());
// keypad loop
while(user)
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	ef 58       	subi	r30, 0x8F	; 143
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	80 81       	ld	r24, Z
    1aea:	88 23       	and	r24, r24
    1aec:	09 f0       	breq	.+2      	; 0x1af0 <main+0xcc2>
    1aee:	7e cb       	rjmp	.-2308   	; 0x11ec <main+0x3be>
    1af0:	63 cb       	rjmp	.-2362   	; 0x11b8 <main+0x38a>

00001af2 <Start_Fane>:

}

//Fane Fun
void Start_Fane(void)
{
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
DC_Motor_Set_Direction(CLOCKWISE);
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <DC_Motor_Set_Direction>
DC_Motor_Speed(99);
    1b00:	83 e6       	ldi	r24, 0x63	; 99
    1b02:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <DC_Motor_Speed>
DC_Motor_Start();
    1b06:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <DC_Motor_Start>
}
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <Stop_Fane>:
void Stop_Fane(void)
{
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
DC_Motor_Stop();
    1b18:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <DC_Motor_Stop>
}
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <Check_Fane>:
void Check_Fane(void)
{
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
	read=LM35_Read();
    1b2a:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <LM35_Read>
    1b2e:	80 93 35 03 	sts	0x0335, r24

	sprintf(arr,"%d",read);
    1b32:	80 91 35 03 	lds	r24, 0x0335
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <Check_Fane+0x1a>
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <Check_Fane+0x1c>
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <Check_Fane+0x1e>
    1b40:	ed b7       	in	r30, 0x3d	; 61
    1b42:	fe b7       	in	r31, 0x3e	; 62
    1b44:	31 96       	adiw	r30, 0x01	; 1
    1b46:	80 e4       	ldi	r24, 0x40	; 64
    1b48:	93 e0       	ldi	r25, 0x03	; 3
    1b4a:	91 83       	std	Z+1, r25	; 0x01
    1b4c:	80 83       	st	Z, r24
    1b4e:	8a e5       	ldi	r24, 0x5A	; 90
    1b50:	91 e0       	ldi	r25, 0x01	; 1
    1b52:	93 83       	std	Z+3, r25	; 0x03
    1b54:	82 83       	std	Z+2, r24	; 0x02
    1b56:	35 83       	std	Z+5, r19	; 0x05
    1b58:	24 83       	std	Z+4, r18	; 0x04
    1b5a:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <sprintf>
    1b5e:	8d b7       	in	r24, 0x3d	; 61
    1b60:	9e b7       	in	r25, 0x3e	; 62
    1b62:	06 96       	adiw	r24, 0x06	; 6
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	9e bf       	out	0x3e, r25	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	8d bf       	out	0x3d, r24	; 61
	Lcd_Goto_Row_Column(0, 14);
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	6e e0       	ldi	r22, 0x0E	; 14
    1b72:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
			 Lcd_Display_str(arr);
    1b76:	80 e4       	ldi	r24, 0x40	; 64
    1b78:	93 e0       	ldi	r25, 0x03	; 3
    1b7a:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
	if(read>=21+error)
    1b7e:	80 91 35 03 	lds	r24, 0x0335
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	80 91 d0 02 	lds	r24, 0x02D0
    1b8a:	88 2f       	mov	r24, r24
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	45 96       	adiw	r24, 0x15	; 21
    1b90:	28 17       	cp	r18, r24
    1b92:	39 07       	cpc	r19, r25
    1b94:	14 f0       	brlt	.+4      	; 0x1b9a <Check_Fane+0x78>
			 {

		Start_Fane();
    1b96:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <Start_Fane>

			 }
			 if(read<21+error)
    1b9a:	80 91 35 03 	lds	r24, 0x0335
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	80 91 d0 02 	lds	r24, 0x02D0
    1ba6:	88 2f       	mov	r24, r24
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	45 96       	adiw	r24, 0x15	; 21
    1bac:	28 17       	cp	r18, r24
    1bae:	39 07       	cpc	r19, r25
    1bb0:	14 f4       	brge	.+4      	; 0x1bb6 <Check_Fane+0x94>
			 {



				 Stop_Fane();
    1bb2:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <Stop_Fane>

			 }
}
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <Blutooth_Fn>:

// Bluetooth Fun
void Blutooth_Fn(u8 data,s8 m)
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <Blutooth_Fn+0x6>
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <Blutooth_Fn+0x8>
    1bc4:	00 d0       	rcall	.+0      	; 0x1bc6 <Blutooth_Fn+0xa>
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	6a 83       	std	Y+2, r22	; 0x02

	//mode for user

	 if (m==0)
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	88 23       	and	r24, r24
    1bd2:	09 f0       	breq	.+2      	; 0x1bd6 <Blutooth_Fn+0x1a>
    1bd4:	c3 c0       	rjmp	.+390    	; 0x1d5c <Blutooth_Fn+0x1a0>
	{

		switch(data)
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	3e 83       	std	Y+6, r19	; 0x06
    1bde:	2d 83       	std	Y+5, r18	; 0x05
    1be0:	8d 81       	ldd	r24, Y+5	; 0x05
    1be2:	9e 81       	ldd	r25, Y+6	; 0x06
    1be4:	83 33       	cpi	r24, 0x33	; 51
    1be6:	91 05       	cpc	r25, r1
    1be8:	09 f4       	brne	.+2      	; 0x1bec <Blutooth_Fn+0x30>
    1bea:	65 c0       	rjmp	.+202    	; 0x1cb6 <Blutooth_Fn+0xfa>
    1bec:	2d 81       	ldd	r18, Y+5	; 0x05
    1bee:	3e 81       	ldd	r19, Y+6	; 0x06
    1bf0:	24 33       	cpi	r18, 0x34	; 52
    1bf2:	31 05       	cpc	r19, r1
    1bf4:	8c f4       	brge	.+34     	; 0x1c18 <Blutooth_Fn+0x5c>
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	81 33       	cpi	r24, 0x31	; 49
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	99 f1       	breq	.+102    	; 0x1c66 <Blutooth_Fn+0xaa>
    1c00:	2d 81       	ldd	r18, Y+5	; 0x05
    1c02:	3e 81       	ldd	r19, Y+6	; 0x06
    1c04:	22 33       	cpi	r18, 0x32	; 50
    1c06:	31 05       	cpc	r19, r1
    1c08:	0c f0       	brlt	.+2      	; 0x1c0c <Blutooth_Fn+0x50>
    1c0a:	41 c0       	rjmp	.+130    	; 0x1c8e <Blutooth_Fn+0xd2>
    1c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c10:	80 33       	cpi	r24, 0x30	; 48
    1c12:	91 05       	cpc	r25, r1
    1c14:	a1 f0       	breq	.+40     	; 0x1c3e <Blutooth_Fn+0x82>
    1c16:	e4 c1       	rjmp	.+968    	; 0x1fe0 <Blutooth_Fn+0x424>
    1c18:	2d 81       	ldd	r18, Y+5	; 0x05
    1c1a:	3e 81       	ldd	r19, Y+6	; 0x06
    1c1c:	25 33       	cpi	r18, 0x35	; 53
    1c1e:	31 05       	cpc	r19, r1
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <Blutooth_Fn+0x68>
    1c22:	71 c0       	rjmp	.+226    	; 0x1d06 <Blutooth_Fn+0x14a>
    1c24:	8d 81       	ldd	r24, Y+5	; 0x05
    1c26:	9e 81       	ldd	r25, Y+6	; 0x06
    1c28:	85 33       	cpi	r24, 0x35	; 53
    1c2a:	91 05       	cpc	r25, r1
    1c2c:	0c f4       	brge	.+2      	; 0x1c30 <Blutooth_Fn+0x74>
    1c2e:	57 c0       	rjmp	.+174    	; 0x1cde <Blutooth_Fn+0x122>
    1c30:	2d 81       	ldd	r18, Y+5	; 0x05
    1c32:	3e 81       	ldd	r19, Y+6	; 0x06
    1c34:	25 34       	cpi	r18, 0x45	; 69
    1c36:	31 05       	cpc	r19, r1
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <Blutooth_Fn+0x80>
    1c3a:	79 c0       	rjmp	.+242    	; 0x1d2e <Blutooth_Fn+0x172>
    1c3c:	d1 c1       	rjmp	.+930    	; 0x1fe0 <Blutooth_Fn+0x424>
			{
			case '0':
				Led_ON(LED0);
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	0e 94 26 31 	call	0x624c	; 0x624c <Led_ON>
				Lcd_Goto_Row_Column(1, 0);
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("         ");
    1c4c:	8c ec       	ldi	r24, 0xCC	; 204
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Lcd_Goto_Row_Column(1, 0);
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	60 e0       	ldi	r22, 0x00	; 0
    1c58:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("Led0:ON");
    1c5c:	88 e1       	ldi	r24, 0x18	; 24
    1c5e:	91 e0       	ldi	r25, 0x01	; 1
    1c60:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
    1c64:	bd c1       	rjmp	.+890    	; 0x1fe0 <Blutooth_Fn+0x424>
				break;
			case '1':
				Led_OFF(LED0);
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	0e 94 57 31 	call	0x62ae	; 0x62ae <Led_OFF>
				Lcd_Goto_Row_Column(1, 0);
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("         ");
    1c74:	8c ec       	ldi	r24, 0xCC	; 204
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Lcd_Goto_Row_Column(1, 0);
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("Led0:Off");
    1c84:	80 e2       	ldi	r24, 0x20	; 32
    1c86:	91 e0       	ldi	r25, 0x01	; 1
    1c88:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
    1c8c:	a9 c1       	rjmp	.+850    	; 0x1fe0 <Blutooth_Fn+0x424>
				break;
			case '2':
				Led_ON(LED1);
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	0e 94 26 31 	call	0x624c	; 0x624c <Led_ON>
				Lcd_Goto_Row_Column(1, 0);
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	60 e0       	ldi	r22, 0x00	; 0
    1c98:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("         ");
    1c9c:	8c ec       	ldi	r24, 0xCC	; 204
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Lcd_Goto_Row_Column(1, 0);
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	60 e0       	ldi	r22, 0x00	; 0
    1ca8:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("Led1:ON");
    1cac:	89 e2       	ldi	r24, 0x29	; 41
    1cae:	91 e0       	ldi	r25, 0x01	; 1
    1cb0:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
    1cb4:	95 c1       	rjmp	.+810    	; 0x1fe0 <Blutooth_Fn+0x424>
				break;
			case '3':
				Led_OFF(LED1);
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	0e 94 57 31 	call	0x62ae	; 0x62ae <Led_OFF>
				Lcd_Goto_Row_Column(1, 0);
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("         ");
    1cc4:	8c ec       	ldi	r24, 0xCC	; 204
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Lcd_Goto_Row_Column(1, 0);
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("Led1:Off");
    1cd4:	81 e3       	ldi	r24, 0x31	; 49
    1cd6:	91 e0       	ldi	r25, 0x01	; 1
    1cd8:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
    1cdc:	81 c1       	rjmp	.+770    	; 0x1fe0 <Blutooth_Fn+0x424>

				break;

			case '4':
				Led_ON(LED2);
    1cde:	82 e0       	ldi	r24, 0x02	; 2
    1ce0:	0e 94 26 31 	call	0x624c	; 0x624c <Led_ON>
				Lcd_Goto_Row_Column(1, 0);
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("         ");
    1cec:	8c ec       	ldi	r24, 0xCC	; 204
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Lcd_Goto_Row_Column(1, 0);
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	60 e0       	ldi	r22, 0x00	; 0
    1cf8:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("Led2:ON");
    1cfc:	8a e3       	ldi	r24, 0x3A	; 58
    1cfe:	91 e0       	ldi	r25, 0x01	; 1
    1d00:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
    1d04:	6d c1       	rjmp	.+730    	; 0x1fe0 <Blutooth_Fn+0x424>
				break;
			case '5':
				Led_OFF(LED2);
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	0e 94 57 31 	call	0x62ae	; 0x62ae <Led_OFF>
				Lcd_Goto_Row_Column(1, 0);
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	60 e0       	ldi	r22, 0x00	; 0
    1d10:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("         ");
    1d14:	8c ec       	ldi	r24, 0xCC	; 204
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Lcd_Goto_Row_Column(1, 0);
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("Led2:Off");
    1d24:	82 e4       	ldi	r24, 0x42	; 66
    1d26:	91 e0       	ldi	r25, 0x01	; 1
    1d28:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
    1d2c:	59 c1       	rjmp	.+690    	; 0x1fe0 <Blutooth_Fn+0x424>

				break;
			case 'E':
				guest=0;
    1d2e:	10 92 24 03 	sts	0x0324, r1
				Lcd_Goto_Row_Column(1, 0);
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	60 e0       	ldi	r22, 0x00	; 0
    1d36:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("         ");
    1d3a:	8c ec       	ldi	r24, 0xCC	; 204
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Lcd_Goto_Row_Column(1, 0);
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("Exit done ");
    1d4a:	8d e5       	ldi	r24, 0x5D	; 93
    1d4c:	91 e0       	ldi	r25, 0x01	; 1
    1d4e:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Bluetooth_TransmitString("Exit done > write the password");
    1d52:	88 e6       	ldi	r24, 0x68	; 104
    1d54:	91 e0       	ldi	r25, 0x01	; 1
    1d56:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <Bluetooth_TransmitString>
    1d5a:	42 c1       	rjmp	.+644    	; 0x1fe0 <Blutooth_Fn+0x424>
				break;

			}
	}
	 // mode for admin
	else if(m==1)
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	81 30       	cpi	r24, 0x01	; 1
    1d60:	09 f0       	breq	.+2      	; 0x1d64 <Blutooth_Fn+0x1a8>
    1d62:	3e c1       	rjmp	.+636    	; 0x1fe0 <Blutooth_Fn+0x424>
	{
		switch(data)
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	3c 83       	std	Y+4, r19	; 0x04
    1d6c:	2b 83       	std	Y+3, r18	; 0x03
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	9c 81       	ldd	r25, Y+4	; 0x04
    1d72:	85 33       	cpi	r24, 0x35	; 53
    1d74:	91 05       	cpc	r25, r1
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <Blutooth_Fn+0x1be>
    1d78:	b2 c0       	rjmp	.+356    	; 0x1ede <Blutooth_Fn+0x322>
    1d7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d7e:	26 33       	cpi	r18, 0x36	; 54
    1d80:	31 05       	cpc	r19, r1
    1d82:	24 f5       	brge	.+72     	; 0x1dcc <Blutooth_Fn+0x210>
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	82 33       	cpi	r24, 0x32	; 50
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <Blutooth_Fn+0x1d4>
    1d8e:	6b c0       	rjmp	.+214    	; 0x1e66 <Blutooth_Fn+0x2aa>
    1d90:	2b 81       	ldd	r18, Y+3	; 0x03
    1d92:	3c 81       	ldd	r19, Y+4	; 0x04
    1d94:	23 33       	cpi	r18, 0x33	; 51
    1d96:	31 05       	cpc	r19, r1
    1d98:	64 f4       	brge	.+24     	; 0x1db2 <Blutooth_Fn+0x1f6>
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	80 33       	cpi	r24, 0x30	; 48
    1da0:	91 05       	cpc	r25, r1
    1da2:	c9 f1       	breq	.+114    	; 0x1e16 <Blutooth_Fn+0x25a>
    1da4:	2b 81       	ldd	r18, Y+3	; 0x03
    1da6:	3c 81       	ldd	r19, Y+4	; 0x04
    1da8:	21 33       	cpi	r18, 0x31	; 49
    1daa:	31 05       	cpc	r19, r1
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <Blutooth_Fn+0x1f4>
    1dae:	47 c0       	rjmp	.+142    	; 0x1e3e <Blutooth_Fn+0x282>
    1db0:	17 c1       	rjmp	.+558    	; 0x1fe0 <Blutooth_Fn+0x424>
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	9c 81       	ldd	r25, Y+4	; 0x04
    1db6:	83 33       	cpi	r24, 0x33	; 51
    1db8:	91 05       	cpc	r25, r1
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <Blutooth_Fn+0x202>
    1dbc:	68 c0       	rjmp	.+208    	; 0x1e8e <Blutooth_Fn+0x2d2>
    1dbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc2:	24 33       	cpi	r18, 0x34	; 52
    1dc4:	31 05       	cpc	r19, r1
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <Blutooth_Fn+0x20e>
    1dc8:	76 c0       	rjmp	.+236    	; 0x1eb6 <Blutooth_Fn+0x2fa>
    1dca:	0a c1       	rjmp	.+532    	; 0x1fe0 <Blutooth_Fn+0x424>
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd0:	87 34       	cpi	r24, 0x47	; 71
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <Blutooth_Fn+0x21c>
    1dd6:	bf c0       	rjmp	.+382    	; 0x1f56 <Blutooth_Fn+0x39a>
    1dd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dda:	3c 81       	ldd	r19, Y+4	; 0x04
    1ddc:	28 34       	cpi	r18, 0x48	; 72
    1dde:	31 05       	cpc	r19, r1
    1de0:	6c f4       	brge	.+26     	; 0x1dfc <Blutooth_Fn+0x240>
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	9c 81       	ldd	r25, Y+4	; 0x04
    1de6:	84 34       	cpi	r24, 0x44	; 68
    1de8:	91 05       	cpc	r25, r1
    1dea:	09 f4       	brne	.+2      	; 0x1dee <Blutooth_Fn+0x232>
    1dec:	8c c0       	rjmp	.+280    	; 0x1f06 <Blutooth_Fn+0x34a>
    1dee:	2b 81       	ldd	r18, Y+3	; 0x03
    1df0:	3c 81       	ldd	r19, Y+4	; 0x04
    1df2:	25 34       	cpi	r18, 0x45	; 69
    1df4:	31 05       	cpc	r19, r1
    1df6:	09 f4       	brne	.+2      	; 0x1dfa <Blutooth_Fn+0x23e>
    1df8:	dd c0       	rjmp	.+442    	; 0x1fb4 <Blutooth_Fn+0x3f8>
    1dfa:	f2 c0       	rjmp	.+484    	; 0x1fe0 <Blutooth_Fn+0x424>
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	84 36       	cpi	r24, 0x64	; 100
    1e02:	91 05       	cpc	r25, r1
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <Blutooth_Fn+0x24c>
    1e06:	93 c0       	rjmp	.+294    	; 0x1f2e <Blutooth_Fn+0x372>
    1e08:	2b 81       	ldd	r18, Y+3	; 0x03
    1e0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e0c:	27 36       	cpi	r18, 0x67	; 103
    1e0e:	31 05       	cpc	r19, r1
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <Blutooth_Fn+0x258>
    1e12:	b9 c0       	rjmp	.+370    	; 0x1f86 <Blutooth_Fn+0x3ca>
    1e14:	e5 c0       	rjmp	.+458    	; 0x1fe0 <Blutooth_Fn+0x424>
			{
			case '0':
				Led_ON(LED0);
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	0e 94 26 31 	call	0x624c	; 0x624c <Led_ON>
				Lcd_Goto_Row_Column(1, 0);
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	60 e0       	ldi	r22, 0x00	; 0
    1e20:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("         ");
    1e24:	8c ec       	ldi	r24, 0xCC	; 204
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Lcd_Goto_Row_Column(1, 0);
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	60 e0       	ldi	r22, 0x00	; 0
    1e30:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("Led0:ON");
    1e34:	88 e1       	ldi	r24, 0x18	; 24
    1e36:	91 e0       	ldi	r25, 0x01	; 1
    1e38:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
    1e3c:	d1 c0       	rjmp	.+418    	; 0x1fe0 <Blutooth_Fn+0x424>
				break;
			case '1':
				Led_OFF(LED0);
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	0e 94 57 31 	call	0x62ae	; 0x62ae <Led_OFF>
				Lcd_Goto_Row_Column(1, 0);
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("         ");
    1e4c:	8c ec       	ldi	r24, 0xCC	; 204
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Lcd_Goto_Row_Column(1, 0);
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("Led0:Off");
    1e5c:	80 e2       	ldi	r24, 0x20	; 32
    1e5e:	91 e0       	ldi	r25, 0x01	; 1
    1e60:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
    1e64:	bd c0       	rjmp	.+378    	; 0x1fe0 <Blutooth_Fn+0x424>
				break;
			case '2':
				Led_ON(LED1);
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	0e 94 26 31 	call	0x624c	; 0x624c <Led_ON>
				Lcd_Goto_Row_Column(1, 0);
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	60 e0       	ldi	r22, 0x00	; 0
    1e70:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("         ");
    1e74:	8c ec       	ldi	r24, 0xCC	; 204
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Lcd_Goto_Row_Column(1, 0);
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	60 e0       	ldi	r22, 0x00	; 0
    1e80:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("Led1:ON");
    1e84:	89 e2       	ldi	r24, 0x29	; 41
    1e86:	91 e0       	ldi	r25, 0x01	; 1
    1e88:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
    1e8c:	a9 c0       	rjmp	.+338    	; 0x1fe0 <Blutooth_Fn+0x424>
				break;
			case '3':
				Led_OFF(LED1);
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	0e 94 57 31 	call	0x62ae	; 0x62ae <Led_OFF>
				Lcd_Goto_Row_Column(1, 0);
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	60 e0       	ldi	r22, 0x00	; 0
    1e98:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("         ");
    1e9c:	8c ec       	ldi	r24, 0xCC	; 204
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Lcd_Goto_Row_Column(1, 0);
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	60 e0       	ldi	r22, 0x00	; 0
    1ea8:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("Led1:Off");
    1eac:	81 e3       	ldi	r24, 0x31	; 49
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
    1eb4:	95 c0       	rjmp	.+298    	; 0x1fe0 <Blutooth_Fn+0x424>

				break;

			case '4':
				Led_ON(LED2);
    1eb6:	82 e0       	ldi	r24, 0x02	; 2
    1eb8:	0e 94 26 31 	call	0x624c	; 0x624c <Led_ON>
				Lcd_Goto_Row_Column(1, 0);
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("         ");
    1ec4:	8c ec       	ldi	r24, 0xCC	; 204
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Lcd_Goto_Row_Column(1, 0);
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	60 e0       	ldi	r22, 0x00	; 0
    1ed0:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("Led2:ON");
    1ed4:	8a e3       	ldi	r24, 0x3A	; 58
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
    1edc:	81 c0       	rjmp	.+258    	; 0x1fe0 <Blutooth_Fn+0x424>
				break;
			case '5':
				Led_OFF(LED2);
    1ede:	82 e0       	ldi	r24, 0x02	; 2
    1ee0:	0e 94 57 31 	call	0x62ae	; 0x62ae <Led_OFF>
				Lcd_Goto_Row_Column(1, 0);
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("         ");
    1eec:	8c ec       	ldi	r24, 0xCC	; 204
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Lcd_Goto_Row_Column(1, 0);
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("Led2:Off");
    1efc:	82 e4       	ldi	r24, 0x42	; 66
    1efe:	91 e0       	ldi	r25, 0x01	; 1
    1f00:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
    1f04:	6d c0       	rjmp	.+218    	; 0x1fe0 <Blutooth_Fn+0x424>

				break;

			case 'D':
			Servo_Motor_Rotat(10);
    1f06:	8a e0       	ldi	r24, 0x0A	; 10
    1f08:	0e 94 96 27 	call	0x4f2c	; 0x4f2c <Servo_Motor_Rotat>
			Lcd_Goto_Row_Column(1, 0);
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	60 e0       	ldi	r22, 0x00	; 0
    1f10:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
			Lcd_Display_str("         ");
    1f14:	8c ec       	ldi	r24, 0xCC	; 204
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
			Lcd_Goto_Row_Column(1, 0);
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	60 e0       	ldi	r22, 0x00	; 0
    1f20:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
					Lcd_Display_str("Door:open");
    1f24:	87 e8       	ldi	r24, 0x87	; 135
    1f26:	91 e0       	ldi	r25, 0x01	; 1
    1f28:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
    1f2c:	59 c0       	rjmp	.+178    	; 0x1fe0 <Blutooth_Fn+0x424>

				break;
			case 'd':
				Servo_Motor_Rotat(5);
    1f2e:	85 e0       	ldi	r24, 0x05	; 5
    1f30:	0e 94 96 27 	call	0x4f2c	; 0x4f2c <Servo_Motor_Rotat>
				Lcd_Goto_Row_Column(1, 0);
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("         ");
    1f3c:	8c ec       	ldi	r24, 0xCC	; 204
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Lcd_Goto_Row_Column(1, 0);
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
						Lcd_Display_str("Door:close");
    1f4c:	81 e9       	ldi	r24, 0x91	; 145
    1f4e:	91 e0       	ldi	r25, 0x01	; 1
    1f50:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
    1f54:	45 c0       	rjmp	.+138    	; 0x1fe0 <Blutooth_Fn+0x424>
			break;
			case 'G':
				allowing1=1;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	80 93 25 03 	sts	0x0325, r24
				Lcd_Goto_Row_Column(1, 0);
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	60 e0       	ldi	r22, 0x00	; 0
    1f60:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("         ");
    1f64:	8c ec       	ldi	r24, 0xCC	; 204
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Lcd_Goto_Row_Column(1, 0);
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("user 1 allowed");
    1f74:	8c e9       	ldi	r24, 0x9C	; 156
    1f76:	91 e0       	ldi	r25, 0x01	; 1
    1f78:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Bluetooth_TransmitString("user 1 allowed");
    1f7c:	8c e9       	ldi	r24, 0x9C	; 156
    1f7e:	91 e0       	ldi	r25, 0x01	; 1
    1f80:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <Bluetooth_TransmitString>
    1f84:	2d c0       	rjmp	.+90     	; 0x1fe0 <Blutooth_Fn+0x424>
				break;

			case 'g':
				allowing1=0;
    1f86:	10 92 25 03 	sts	0x0325, r1
				Lcd_Goto_Row_Column(1, 0);
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	60 e0       	ldi	r22, 0x00	; 0
    1f8e:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("         ");
    1f92:	8c ec       	ldi	r24, 0xCC	; 204
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Lcd_Goto_Row_Column(1, 0);
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("user 1 not allowed");
    1fa2:	8b ea       	ldi	r24, 0xAB	; 171
    1fa4:	91 e0       	ldi	r25, 0x01	; 1
    1fa6:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Bluetooth_TransmitString("user 1 not allowed");
    1faa:	8b ea       	ldi	r24, 0xAB	; 171
    1fac:	91 e0       	ldi	r25, 0x01	; 1
    1fae:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <Bluetooth_TransmitString>
    1fb2:	16 c0       	rjmp	.+44     	; 0x1fe0 <Blutooth_Fn+0x424>
				break;

			case 'E':
				Lcd_Goto_Row_Column(1, 0);
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	60 e0       	ldi	r22, 0x00	; 0
    1fb8:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("         ");
    1fbc:	8c ec       	ldi	r24, 0xCC	; 204
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Lcd_Goto_Row_Column(1, 0);
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	60 e0       	ldi	r22, 0x00	; 0
    1fc8:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>
				Lcd_Display_str("Exit done");
    1fcc:	8e eb       	ldi	r24, 0xBE	; 190
    1fce:	91 e0       	ldi	r25, 0x01	; 1
    1fd0:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Lcd_Display_str>
				Bluetooth_TransmitString("Exit done > write the password");
    1fd4:	88 e6       	ldi	r24, 0x68	; 104
    1fd6:	91 e0       	ldi	r25, 0x01	; 1
    1fd8:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <Bluetooth_TransmitString>
				admin=0;
    1fdc:	10 92 23 03 	sts	0x0323, r1
				break;
			}
	}

}
    1fe0:	26 96       	adiw	r28, 0x06	; 6
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <Dimmer_Int>:


#include "Dimmer_Interface.h"

void Dimmer_Int()
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
Timer0_Dimer();
    1ffa:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <Timer0_Dimer>
}
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <Dimmer_duty>:

void Dimmer_duty(u8 duty)
{
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	0f 92       	push	r0
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	89 83       	std	Y+1, r24	; 0x01
Timer0_Dimmer_Light(duty);
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	0e 94 ae 37 	call	0x6f5c	; 0x6f5c <Timer0_Dimmer_Light>
}
    2016:	0f 90       	pop	r0
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <Dimmer_OFF>:

void Dimmer_OFF()
{
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
Timer0_FPWM_Stop();
    2026:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <Timer0_FPWM_Stop>
DIO_cnfg_channel(DIO_PORTB, DIO_PIN3, DIO_INPUT);
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	63 e0       	ldi	r22, 0x03	; 3
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
}
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <Led_Dimmer_init>:
 *      Author: Anthony
 */
#include "Led_Dimmer_interface.h"

void Led_Dimmer_init()
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	a1 97       	sbiw	r28, 0x21	; 33
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
   DIO_DDRB_REG=(DIO_DDRB_REG|(1<<DIO_PORTB,5))&&(DIO_DDRB_REG &~(1<<DIO_PORTB,7));
    204e:	87 e3       	ldi	r24, 0x37	; 55
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	99 a3       	std	Y+33, r25	; 0x21
    2054:	88 a3       	std	Y+32, r24	; 0x20
    2056:	e7 e3       	ldi	r30, 0x37	; 55
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	90 81       	ld	r25, Z
    205c:	e7 e3       	ldi	r30, 0x37	; 55
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	88 2f       	mov	r24, r24
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	88 7f       	andi	r24, 0xF8	; 248
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	29 f0       	breq	.+10     	; 0x2076 <Led_Dimmer_init+0x3c>
    206c:	e1 e0       	ldi	r30, 0x01	; 1
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	ff 8f       	std	Y+31, r31	; 0x1f
    2072:	ee 8f       	std	Y+30, r30	; 0x1e
    2074:	02 c0       	rjmp	.+4      	; 0x207a <Led_Dimmer_init+0x40>
    2076:	1f 8e       	std	Y+31, r1	; 0x1f
    2078:	1e 8e       	std	Y+30, r1	; 0x1e
    207a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    207c:	e8 a1       	ldd	r30, Y+32	; 0x20
    207e:	f9 a1       	ldd	r31, Y+33	; 0x21
    2080:	80 83       	st	Z, r24
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	a0 e8       	ldi	r26, 0x80	; 128
    2088:	bf e3       	ldi	r27, 0x3F	; 63
    208a:	89 8f       	std	Y+25, r24	; 0x19
    208c:	9a 8f       	std	Y+26, r25	; 0x1a
    208e:	ab 8f       	std	Y+27, r26	; 0x1b
    2090:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2092:	69 8d       	ldd	r22, Y+25	; 0x19
    2094:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2096:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2098:	9c 8d       	ldd	r25, Y+28	; 0x1c
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a e7       	ldi	r20, 0x7A	; 122
    20a0:	53 e4       	ldi	r21, 0x43	; 67
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8d 8b       	std	Y+21, r24	; 0x15
    20ac:	9e 8b       	std	Y+22, r25	; 0x16
    20ae:	af 8b       	std	Y+23, r26	; 0x17
    20b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20b2:	6d 89       	ldd	r22, Y+21	; 0x15
    20b4:	7e 89       	ldd	r23, Y+22	; 0x16
    20b6:	8f 89       	ldd	r24, Y+23	; 0x17
    20b8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20c6:	88 23       	and	r24, r24
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <Led_Dimmer_init+0x9a>
		__ticks = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9c 8b       	std	Y+20, r25	; 0x14
    20d0:	8b 8b       	std	Y+19, r24	; 0x13
    20d2:	3f c0       	rjmp	.+126    	; 0x2152 <Led_Dimmer_init+0x118>
	else if (__tmp > 65535)
    20d4:	6d 89       	ldd	r22, Y+21	; 0x15
    20d6:	7e 89       	ldd	r23, Y+22	; 0x16
    20d8:	8f 89       	ldd	r24, Y+23	; 0x17
    20da:	98 8d       	ldd	r25, Y+24	; 0x18
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	4c f5       	brge	.+82     	; 0x213e <Led_Dimmer_init+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ec:	69 8d       	ldd	r22, Y+25	; 0x19
    20ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e2       	ldi	r20, 0x20	; 32
    20fa:	51 e4       	ldi	r21, 0x41	; 65
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9c 8b       	std	Y+20, r25	; 0x14
    2112:	8b 8b       	std	Y+19, r24	; 0x13
    2114:	0f c0       	rjmp	.+30     	; 0x2134 <Led_Dimmer_init+0xfa>
    2116:	89 e1       	ldi	r24, 0x19	; 25
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9a 8b       	std	Y+18, r25	; 0x12
    211c:	89 8b       	std	Y+17, r24	; 0x11
    211e:	89 89       	ldd	r24, Y+17	; 0x11
    2120:	9a 89       	ldd	r25, Y+18	; 0x12
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <Led_Dimmer_init+0xe8>
    2126:	9a 8b       	std	Y+18, r25	; 0x12
    2128:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212a:	8b 89       	ldd	r24, Y+19	; 0x13
    212c:	9c 89       	ldd	r25, Y+20	; 0x14
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	9c 8b       	std	Y+20, r25	; 0x14
    2132:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2134:	8b 89       	ldd	r24, Y+19	; 0x13
    2136:	9c 89       	ldd	r25, Y+20	; 0x14
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	69 f7       	brne	.-38     	; 0x2116 <Led_Dimmer_init+0xdc>
    213c:	14 c0       	rjmp	.+40     	; 0x2166 <Led_Dimmer_init+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213e:	6d 89       	ldd	r22, Y+21	; 0x15
    2140:	7e 89       	ldd	r23, Y+22	; 0x16
    2142:	8f 89       	ldd	r24, Y+23	; 0x17
    2144:	98 8d       	ldd	r25, Y+24	; 0x18
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9c 8b       	std	Y+20, r25	; 0x14
    2150:	8b 8b       	std	Y+19, r24	; 0x13
    2152:	8b 89       	ldd	r24, Y+19	; 0x13
    2154:	9c 89       	ldd	r25, Y+20	; 0x14
    2156:	98 8b       	std	Y+16, r25	; 0x10
    2158:	8f 87       	std	Y+15, r24	; 0x0f
    215a:	8f 85       	ldd	r24, Y+15	; 0x0f
    215c:	98 89       	ldd	r25, Y+16	; 0x10
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <Led_Dimmer_init+0x124>
    2162:	98 8b       	std	Y+16, r25	; 0x10
    2164:	8f 87       	std	Y+15, r24	; 0x0f
   _delay_ms(1);
   DIO_cnfg_channel(DIO_PORTB, DIO_PIN5, DIO_OUTPUT);
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	65 e0       	ldi	r22, 0x05	; 5
    216a:	41 e0       	ldi	r20, 0x01	; 1
    216c:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	a0 e8       	ldi	r26, 0x80	; 128
    2176:	bf e3       	ldi	r27, 0x3F	; 63
    2178:	8b 87       	std	Y+11, r24	; 0x0b
    217a:	9c 87       	std	Y+12, r25	; 0x0c
    217c:	ad 87       	std	Y+13, r26	; 0x0d
    217e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2180:	6b 85       	ldd	r22, Y+11	; 0x0b
    2182:	7c 85       	ldd	r23, Y+12	; 0x0c
    2184:	8d 85       	ldd	r24, Y+13	; 0x0d
    2186:	9e 85       	ldd	r25, Y+14	; 0x0e
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	4a e7       	ldi	r20, 0x7A	; 122
    218e:	53 e4       	ldi	r21, 0x43	; 67
    2190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	8f 83       	std	Y+7, r24	; 0x07
    219a:	98 87       	std	Y+8, r25	; 0x08
    219c:	a9 87       	std	Y+9, r26	; 0x09
    219e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21a0:	6f 81       	ldd	r22, Y+7	; 0x07
    21a2:	78 85       	ldd	r23, Y+8	; 0x08
    21a4:	89 85       	ldd	r24, Y+9	; 0x09
    21a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e8       	ldi	r20, 0x80	; 128
    21ae:	5f e3       	ldi	r21, 0x3F	; 63
    21b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b4:	88 23       	and	r24, r24
    21b6:	2c f4       	brge	.+10     	; 0x21c2 <Led_Dimmer_init+0x188>
		__ticks = 1;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	9e 83       	std	Y+6, r25	; 0x06
    21be:	8d 83       	std	Y+5, r24	; 0x05
    21c0:	3f c0       	rjmp	.+126    	; 0x2240 <Led_Dimmer_init+0x206>
	else if (__tmp > 65535)
    21c2:	6f 81       	ldd	r22, Y+7	; 0x07
    21c4:	78 85       	ldd	r23, Y+8	; 0x08
    21c6:	89 85       	ldd	r24, Y+9	; 0x09
    21c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	3f ef       	ldi	r19, 0xFF	; 255
    21ce:	4f e7       	ldi	r20, 0x7F	; 127
    21d0:	57 e4       	ldi	r21, 0x47	; 71
    21d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d6:	18 16       	cp	r1, r24
    21d8:	4c f5       	brge	.+82     	; 0x222c <Led_Dimmer_init+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21da:	6b 85       	ldd	r22, Y+11	; 0x0b
    21dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21de:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e2       	ldi	r20, 0x20	; 32
    21e8:	51 e4       	ldi	r21, 0x41	; 65
    21ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	bc 01       	movw	r22, r24
    21f4:	cd 01       	movw	r24, r26
    21f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	9e 83       	std	Y+6, r25	; 0x06
    2200:	8d 83       	std	Y+5, r24	; 0x05
    2202:	0f c0       	rjmp	.+30     	; 0x2222 <Led_Dimmer_init+0x1e8>
    2204:	89 e1       	ldi	r24, 0x19	; 25
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	9c 83       	std	Y+4, r25	; 0x04
    220a:	8b 83       	std	Y+3, r24	; 0x03
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	9c 81       	ldd	r25, Y+4	; 0x04
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <Led_Dimmer_init+0x1d6>
    2214:	9c 83       	std	Y+4, r25	; 0x04
    2216:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2218:	8d 81       	ldd	r24, Y+5	; 0x05
    221a:	9e 81       	ldd	r25, Y+6	; 0x06
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	9e 83       	std	Y+6, r25	; 0x06
    2220:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2222:	8d 81       	ldd	r24, Y+5	; 0x05
    2224:	9e 81       	ldd	r25, Y+6	; 0x06
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	69 f7       	brne	.-38     	; 0x2204 <Led_Dimmer_init+0x1ca>
    222a:	14 c0       	rjmp	.+40     	; 0x2254 <Led_Dimmer_init+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222c:	6f 81       	ldd	r22, Y+7	; 0x07
    222e:	78 85       	ldd	r23, Y+8	; 0x08
    2230:	89 85       	ldd	r24, Y+9	; 0x09
    2232:	9a 85       	ldd	r25, Y+10	; 0x0a
    2234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	9e 83       	std	Y+6, r25	; 0x06
    223e:	8d 83       	std	Y+5, r24	; 0x05
    2240:	8d 81       	ldd	r24, Y+5	; 0x05
    2242:	9e 81       	ldd	r25, Y+6	; 0x06
    2244:	9a 83       	std	Y+2, r25	; 0x02
    2246:	89 83       	std	Y+1, r24	; 0x01
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	9a 81       	ldd	r25, Y+2	; 0x02
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <Led_Dimmer_init+0x212>
    2250:	9a 83       	std	Y+2, r25	; 0x02
    2252:	89 83       	std	Y+1, r24	; 0x01
   _delay_ms(1);
   DIO_cnfg_channel(DIO_PORTB, DIO_PIN7, DIO_OUTPUT);
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	67 e0       	ldi	r22, 0x07	; 7
    2258:	41 e0       	ldi	r20, 0x01	; 1
    225a:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>

}
    225e:	a1 96       	adiw	r28, 0x21	; 33
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	de bf       	out	0x3e, r29	; 62
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	cd bf       	out	0x3d, r28	; 61
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <delay_on>:
void delay_on(int t)
{
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	62 97       	sbiw	r28, 0x12	; 18
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	9a 8b       	std	Y+18, r25	; 0x12
    2286:	89 8b       	std	Y+17, r24	; 0x11
  int i;
  for(i=0;i<t;i++)
    2288:	18 8a       	std	Y+16, r1	; 0x10
    228a:	1f 86       	std	Y+15, r1	; 0x0f
    228c:	77 c0       	rjmp	.+238    	; 0x237c <delay_on+0x10c>
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	a0 e8       	ldi	r26, 0x80	; 128
    2294:	bf e3       	ldi	r27, 0x3F	; 63
    2296:	8b 87       	std	Y+11, r24	; 0x0b
    2298:	9c 87       	std	Y+12, r25	; 0x0c
    229a:	ad 87       	std	Y+13, r26	; 0x0d
    229c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229e:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	4a e7       	ldi	r20, 0x7A	; 122
    22ac:	53 e4       	ldi	r21, 0x43	; 67
    22ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	8f 83       	std	Y+7, r24	; 0x07
    22b8:	98 87       	std	Y+8, r25	; 0x08
    22ba:	a9 87       	std	Y+9, r26	; 0x09
    22bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22be:	6f 81       	ldd	r22, Y+7	; 0x07
    22c0:	78 85       	ldd	r23, Y+8	; 0x08
    22c2:	89 85       	ldd	r24, Y+9	; 0x09
    22c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e8       	ldi	r20, 0x80	; 128
    22cc:	5f e3       	ldi	r21, 0x3F	; 63
    22ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d2:	88 23       	and	r24, r24
    22d4:	2c f4       	brge	.+10     	; 0x22e0 <delay_on+0x70>
		__ticks = 1;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	9e 83       	std	Y+6, r25	; 0x06
    22dc:	8d 83       	std	Y+5, r24	; 0x05
    22de:	3f c0       	rjmp	.+126    	; 0x235e <delay_on+0xee>
	else if (__tmp > 65535)
    22e0:	6f 81       	ldd	r22, Y+7	; 0x07
    22e2:	78 85       	ldd	r23, Y+8	; 0x08
    22e4:	89 85       	ldd	r24, Y+9	; 0x09
    22e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	3f ef       	ldi	r19, 0xFF	; 255
    22ec:	4f e7       	ldi	r20, 0x7F	; 127
    22ee:	57 e4       	ldi	r21, 0x47	; 71
    22f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f4:	18 16       	cp	r1, r24
    22f6:	4c f5       	brge	.+82     	; 0x234a <delay_on+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e2       	ldi	r20, 0x20	; 32
    2306:	51 e4       	ldi	r21, 0x41	; 65
    2308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	bc 01       	movw	r22, r24
    2312:	cd 01       	movw	r24, r26
    2314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	9e 83       	std	Y+6, r25	; 0x06
    231e:	8d 83       	std	Y+5, r24	; 0x05
    2320:	0f c0       	rjmp	.+30     	; 0x2340 <delay_on+0xd0>
    2322:	89 e1       	ldi	r24, 0x19	; 25
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	9c 83       	std	Y+4, r25	; 0x04
    2328:	8b 83       	std	Y+3, r24	; 0x03
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	9c 81       	ldd	r25, Y+4	; 0x04
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	f1 f7       	brne	.-4      	; 0x232e <delay_on+0xbe>
    2332:	9c 83       	std	Y+4, r25	; 0x04
    2334:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2336:	8d 81       	ldd	r24, Y+5	; 0x05
    2338:	9e 81       	ldd	r25, Y+6	; 0x06
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	9e 83       	std	Y+6, r25	; 0x06
    233e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2340:	8d 81       	ldd	r24, Y+5	; 0x05
    2342:	9e 81       	ldd	r25, Y+6	; 0x06
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	69 f7       	brne	.-38     	; 0x2322 <delay_on+0xb2>
    2348:	14 c0       	rjmp	.+40     	; 0x2372 <delay_on+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234a:	6f 81       	ldd	r22, Y+7	; 0x07
    234c:	78 85       	ldd	r23, Y+8	; 0x08
    234e:	89 85       	ldd	r24, Y+9	; 0x09
    2350:	9a 85       	ldd	r25, Y+10	; 0x0a
    2352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	9e 83       	std	Y+6, r25	; 0x06
    235c:	8d 83       	std	Y+5, r24	; 0x05
    235e:	8d 81       	ldd	r24, Y+5	; 0x05
    2360:	9e 81       	ldd	r25, Y+6	; 0x06
    2362:	9a 83       	std	Y+2, r25	; 0x02
    2364:	89 83       	std	Y+1, r24	; 0x01
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	9a 81       	ldd	r25, Y+2	; 0x02
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	f1 f7       	brne	.-4      	; 0x236a <delay_on+0xfa>
    236e:	9a 83       	std	Y+2, r25	; 0x02
    2370:	89 83       	std	Y+1, r24	; 0x01
    2372:	8f 85       	ldd	r24, Y+15	; 0x0f
    2374:	98 89       	ldd	r25, Y+16	; 0x10
    2376:	01 96       	adiw	r24, 0x01	; 1
    2378:	98 8b       	std	Y+16, r25	; 0x10
    237a:	8f 87       	std	Y+15, r24	; 0x0f
    237c:	2f 85       	ldd	r18, Y+15	; 0x0f
    237e:	38 89       	ldd	r19, Y+16	; 0x10
    2380:	89 89       	ldd	r24, Y+17	; 0x11
    2382:	9a 89       	ldd	r25, Y+18	; 0x12
    2384:	28 17       	cp	r18, r24
    2386:	39 07       	cpc	r19, r25
    2388:	0c f4       	brge	.+2      	; 0x238c <delay_on+0x11c>
    238a:	81 cf       	rjmp	.-254    	; 0x228e <delay_on+0x1e>
  {
	  _delay_ms(1);
  }
}
    238c:	62 96       	adiw	r28, 0x12	; 18
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	08 95       	ret

0000239e <init_timer>:
void init_timer(void)
{
    239e:	df 93       	push	r29
    23a0:	cf 93       	push	r28
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
   //set mode to ctc mode//
	CLEAR_BIT(TCCR1A_REG,0);
    23a6:	af e4       	ldi	r26, 0x4F	; 79
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	ef e4       	ldi	r30, 0x4F	; 79
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	8e 7f       	andi	r24, 0xFE	; 254
    23b2:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A_REG,1);
    23b4:	af e4       	ldi	r26, 0x4F	; 79
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	ef e4       	ldi	r30, 0x4F	; 79
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	8d 7f       	andi	r24, 0xFD	; 253
    23c0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,3);
    23c2:	af e4       	ldi	r26, 0x4F	; 79
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	ef e4       	ldi	r30, 0x4F	; 79
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	88 60       	ori	r24, 0x08	; 8
    23ce:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_REG,4);
    23d0:	ae e4       	ldi	r26, 0x4E	; 78
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	ee e4       	ldi	r30, 0x4E	; 78
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	8f 7e       	andi	r24, 0xEF	; 239
    23dc:	8c 93       	st	X, r24

	OCR1A_REG=0xF9;
    23de:	ea e4       	ldi	r30, 0x4A	; 74
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	89 ef       	ldi	r24, 0xF9	; 249
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	91 83       	std	Z+1, r25	; 0x01
    23e8:	80 83       	st	Z, r24
	//set pre-scaler to 1024//
	SET_BIT(TCCR1B_REG,0);
    23ea:	ae e4       	ldi	r26, 0x4E	; 78
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	ee e4       	ldi	r30, 0x4E	; 78
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	81 60       	ori	r24, 0x01	; 1
    23f6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_REG,1);
    23f8:	ae e4       	ldi	r26, 0x4E	; 78
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	ee e4       	ldi	r30, 0x4E	; 78
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	8d 7f       	andi	r24, 0xFD	; 253
    2404:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,2);
    2406:	ae e4       	ldi	r26, 0x4E	; 78
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	ee e4       	ldi	r30, 0x4E	; 78
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	84 60       	ori	r24, 0x04	; 4
    2412:	8c 93       	st	X, r24



}
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <Ultrasonic_Read>:
#include "DIO_INTERFACE.h"

volatile u16 TOV_Counter;

double Ultrasonic_Read(void)
{
    241a:	ef 92       	push	r14
    241c:	ff 92       	push	r15
    241e:	0f 93       	push	r16
    2420:	1f 93       	push	r17
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	a0 97       	sbiw	r28, 0x20	; 32
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
	double distance = 0;
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	a0 e0       	ldi	r26, 0x00	; 0
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	8d 8f       	std	Y+29, r24	; 0x1d
    2440:	9e 8f       	std	Y+30, r25	; 0x1e
    2442:	af 8f       	std	Y+31, r26	; 0x1f
    2444:	b8 a3       	std	Y+32, r27	; 0x20
		unsigned long Count = 0;
    2446:	19 8e       	std	Y+25, r1	; 0x19
    2448:	1a 8e       	std	Y+26, r1	; 0x1a
    244a:	1b 8e       	std	Y+27, r1	; 0x1b
    244c:	1c 8e       	std	Y+28, r1	; 0x1c

GINT_ENABLE_INTERRUPT();
    244e:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <GINT_ENABLE_INTERRUPT>
// choose normal mode in timer1
CLEAR_BIT(TCCR1A_REG,0);
    2452:	af e4       	ldi	r26, 0x4F	; 79
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	ef e4       	ldi	r30, 0x4F	; 79
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	8e 7f       	andi	r24, 0xFE	; 254
    245e:	8c 93       	st	X, r24
CLEAR_BIT(TCCR1A_REG,1);
    2460:	af e4       	ldi	r26, 0x4F	; 79
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	ef e4       	ldi	r30, 0x4F	; 79
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	8d 7f       	andi	r24, 0xFD	; 253
    246c:	8c 93       	st	X, r24
CLEAR_BIT(TCCR1B_REG,3);
    246e:	ae e4       	ldi	r26, 0x4E	; 78
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	ee e4       	ldi	r30, 0x4E	; 78
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	87 7f       	andi	r24, 0xF7	; 247
    247a:	8c 93       	st	X, r24
CLEAR_BIT(TCCR1B_REG,4);
    247c:	ae e4       	ldi	r26, 0x4E	; 78
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	ee e4       	ldi	r30, 0x4E	; 78
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	8f 7e       	andi	r24, 0xEF	; 239
    2488:	8c 93       	st	X, r24

// enable ISES1 to make it see the rising edge
SET_BIT(TCCR1B_REG,6);
    248a:	ae e4       	ldi	r26, 0x4E	; 78
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	ee e4       	ldi	r30, 0x4E	; 78
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	80 64       	ori	r24, 0x40	; 64
    2496:	8c 93       	st	X, r24
// to enable prescaller 8
SET_BIT(TCCR1B_REG,1);
    2498:	ae e4       	ldi	r26, 0x4E	; 78
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	ee e4       	ldi	r30, 0x4E	; 78
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	82 60       	ori	r24, 0x02	; 2
    24a4:	8c 93       	st	X, r24
//to enable over flow timer to take counter
SET_BIT(TIMSK_REG,2);
    24a6:	a9 e5       	ldi	r26, 0x59	; 89
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	e9 e5       	ldi	r30, 0x59	; 89
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	84 60       	ori	r24, 0x04	; 4
    24b2:	8c 93       	st	X, r24
// make pulse on pin A0 to enable ultrasonic
DIO_cnfg_channel(DIO_PORTA, 0, DIO_OUTPUT);
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	60 e0       	ldi	r22, 0x00	; 0
    24b8:	41 e0       	ldi	r20, 0x01	; 1
    24ba:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
DIO_cnfg_channel(DIO_PORTA, 0, DIO_HIGH);
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	60 e0       	ldi	r22, 0x00	; 0
    24c2:	41 e0       	ldi	r20, 0x01	; 1
    24c4:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	a0 e2       	ldi	r26, 0x20	; 32
    24ce:	b1 e4       	ldi	r27, 0x41	; 65
    24d0:	8d 8b       	std	Y+21, r24	; 0x15
    24d2:	9e 8b       	std	Y+22, r25	; 0x16
    24d4:	af 8b       	std	Y+23, r26	; 0x17
    24d6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24d8:	6d 89       	ldd	r22, Y+21	; 0x15
    24da:	7e 89       	ldd	r23, Y+22	; 0x16
    24dc:	8f 89       	ldd	r24, Y+23	; 0x17
    24de:	98 8d       	ldd	r25, Y+24	; 0x18
    24e0:	2b ea       	ldi	r18, 0xAB	; 171
    24e2:	3a ea       	ldi	r19, 0xAA	; 170
    24e4:	4a ea       	ldi	r20, 0xAA	; 170
    24e6:	5e e3       	ldi	r21, 0x3E	; 62
    24e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	89 8b       	std	Y+17, r24	; 0x11
    24f2:	9a 8b       	std	Y+18, r25	; 0x12
    24f4:	ab 8b       	std	Y+19, r26	; 0x13
    24f6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    24f8:	69 89       	ldd	r22, Y+17	; 0x11
    24fa:	7a 89       	ldd	r23, Y+18	; 0x12
    24fc:	8b 89       	ldd	r24, Y+19	; 0x13
    24fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e8       	ldi	r20, 0x80	; 128
    2506:	5f e3       	ldi	r21, 0x3F	; 63
    2508:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    250c:	88 23       	and	r24, r24
    250e:	1c f4       	brge	.+6      	; 0x2516 <Ultrasonic_Read+0xfc>
		__ticks = 1;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	88 8b       	std	Y+16, r24	; 0x10
    2514:	91 c0       	rjmp	.+290    	; 0x2638 <Ultrasonic_Read+0x21e>
	else if (__tmp > 255)
    2516:	69 89       	ldd	r22, Y+17	; 0x11
    2518:	7a 89       	ldd	r23, Y+18	; 0x12
    251a:	8b 89       	ldd	r24, Y+19	; 0x13
    251c:	9c 89       	ldd	r25, Y+20	; 0x14
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	4f e7       	ldi	r20, 0x7F	; 127
    2524:	53 e4       	ldi	r21, 0x43	; 67
    2526:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    252a:	18 16       	cp	r1, r24
    252c:	0c f0       	brlt	.+2      	; 0x2530 <Ultrasonic_Read+0x116>
    252e:	7b c0       	rjmp	.+246    	; 0x2626 <Ultrasonic_Read+0x20c>
	{
		_delay_ms(__us / 1000.0);
    2530:	6d 89       	ldd	r22, Y+21	; 0x15
    2532:	7e 89       	ldd	r23, Y+22	; 0x16
    2534:	8f 89       	ldd	r24, Y+23	; 0x17
    2536:	98 8d       	ldd	r25, Y+24	; 0x18
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	4a e7       	ldi	r20, 0x7A	; 122
    253e:	54 e4       	ldi	r21, 0x44	; 68
    2540:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	8c 87       	std	Y+12, r24	; 0x0c
    254a:	9d 87       	std	Y+13, r25	; 0x0d
    254c:	ae 87       	std	Y+14, r26	; 0x0e
    254e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2550:	6c 85       	ldd	r22, Y+12	; 0x0c
    2552:	7d 85       	ldd	r23, Y+13	; 0x0d
    2554:	8e 85       	ldd	r24, Y+14	; 0x0e
    2556:	9f 85       	ldd	r25, Y+15	; 0x0f
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	4a e7       	ldi	r20, 0x7A	; 122
    255e:	53 e4       	ldi	r21, 0x43	; 67
    2560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	88 87       	std	Y+8, r24	; 0x08
    256a:	99 87       	std	Y+9, r25	; 0x09
    256c:	aa 87       	std	Y+10, r26	; 0x0a
    256e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2570:	68 85       	ldd	r22, Y+8	; 0x08
    2572:	79 85       	ldd	r23, Y+9	; 0x09
    2574:	8a 85       	ldd	r24, Y+10	; 0x0a
    2576:	9b 85       	ldd	r25, Y+11	; 0x0b
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e8       	ldi	r20, 0x80	; 128
    257e:	5f e3       	ldi	r21, 0x3F	; 63
    2580:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2584:	88 23       	and	r24, r24
    2586:	2c f4       	brge	.+10     	; 0x2592 <Ultrasonic_Read+0x178>
		__ticks = 1;
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	9f 83       	std	Y+7, r25	; 0x07
    258e:	8e 83       	std	Y+6, r24	; 0x06
    2590:	3f c0       	rjmp	.+126    	; 0x2610 <Ultrasonic_Read+0x1f6>
	else if (__tmp > 65535)
    2592:	68 85       	ldd	r22, Y+8	; 0x08
    2594:	79 85       	ldd	r23, Y+9	; 0x09
    2596:	8a 85       	ldd	r24, Y+10	; 0x0a
    2598:	9b 85       	ldd	r25, Y+11	; 0x0b
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	3f ef       	ldi	r19, 0xFF	; 255
    259e:	4f e7       	ldi	r20, 0x7F	; 127
    25a0:	57 e4       	ldi	r21, 0x47	; 71
    25a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25a6:	18 16       	cp	r1, r24
    25a8:	4c f5       	brge	.+82     	; 0x25fc <Ultrasonic_Read+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    25ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    25ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    25b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e2       	ldi	r20, 0x20	; 32
    25b8:	51 e4       	ldi	r21, 0x41	; 65
    25ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	bc 01       	movw	r22, r24
    25c4:	cd 01       	movw	r24, r26
    25c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	9f 83       	std	Y+7, r25	; 0x07
    25d0:	8e 83       	std	Y+6, r24	; 0x06
    25d2:	0f c0       	rjmp	.+30     	; 0x25f2 <Ultrasonic_Read+0x1d8>
    25d4:	89 e1       	ldi	r24, 0x19	; 25
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	9d 83       	std	Y+5, r25	; 0x05
    25da:	8c 83       	std	Y+4, r24	; 0x04
    25dc:	8c 81       	ldd	r24, Y+4	; 0x04
    25de:	9d 81       	ldd	r25, Y+5	; 0x05
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	f1 f7       	brne	.-4      	; 0x25e0 <Ultrasonic_Read+0x1c6>
    25e4:	9d 83       	std	Y+5, r25	; 0x05
    25e6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e8:	8e 81       	ldd	r24, Y+6	; 0x06
    25ea:	9f 81       	ldd	r25, Y+7	; 0x07
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	9f 83       	std	Y+7, r25	; 0x07
    25f0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f2:	8e 81       	ldd	r24, Y+6	; 0x06
    25f4:	9f 81       	ldd	r25, Y+7	; 0x07
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	69 f7       	brne	.-38     	; 0x25d4 <Ultrasonic_Read+0x1ba>
    25fa:	24 c0       	rjmp	.+72     	; 0x2644 <Ultrasonic_Read+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25fc:	68 85       	ldd	r22, Y+8	; 0x08
    25fe:	79 85       	ldd	r23, Y+9	; 0x09
    2600:	8a 85       	ldd	r24, Y+10	; 0x0a
    2602:	9b 85       	ldd	r25, Y+11	; 0x0b
    2604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	9f 83       	std	Y+7, r25	; 0x07
    260e:	8e 83       	std	Y+6, r24	; 0x06
    2610:	8e 81       	ldd	r24, Y+6	; 0x06
    2612:	9f 81       	ldd	r25, Y+7	; 0x07
    2614:	9b 83       	std	Y+3, r25	; 0x03
    2616:	8a 83       	std	Y+2, r24	; 0x02
    2618:	8a 81       	ldd	r24, Y+2	; 0x02
    261a:	9b 81       	ldd	r25, Y+3	; 0x03
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	f1 f7       	brne	.-4      	; 0x261c <Ultrasonic_Read+0x202>
    2620:	9b 83       	std	Y+3, r25	; 0x03
    2622:	8a 83       	std	Y+2, r24	; 0x02
    2624:	0f c0       	rjmp	.+30     	; 0x2644 <Ultrasonic_Read+0x22a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2626:	69 89       	ldd	r22, Y+17	; 0x11
    2628:	7a 89       	ldd	r23, Y+18	; 0x12
    262a:	8b 89       	ldd	r24, Y+19	; 0x13
    262c:	9c 89       	ldd	r25, Y+20	; 0x14
    262e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	88 8b       	std	Y+16, r24	; 0x10
    2638:	88 89       	ldd	r24, Y+16	; 0x10
    263a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	8a 95       	dec	r24
    2640:	f1 f7       	brne	.-4      	; 0x263e <Ultrasonic_Read+0x224>
    2642:	89 83       	std	Y+1, r24	; 0x01
_delay_us(10);
DIO_write(DIO_PORTA, 0, DIO_LOW);
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	60 e0       	ldi	r22, 0x00	; 0
    2648:	40 e0       	ldi	r20, 0x00	; 0
    264a:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
// wait until rising edge come
while(CHECK_BIT(TIFR_REG,5)==0);
    264e:	e8 e5       	ldi	r30, 0x58	; 88
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	82 95       	swap	r24
    2656:	86 95       	lsr	r24
    2658:	87 70       	andi	r24, 0x07	; 7
    265a:	88 2f       	mov	r24, r24
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	81 70       	andi	r24, 0x01	; 1
    2660:	90 70       	andi	r25, 0x00	; 0
    2662:	00 97       	sbiw	r24, 0x00	; 0
    2664:	a1 f3       	breq	.-24     	; 0x264e <Ultrasonic_Read+0x234>
TCNT1_REG = 0;
    2666:	ec e4       	ldi	r30, 0x4C	; 76
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	11 82       	std	Z+1, r1	; 0x01
    266c:	10 82       	st	Z, r1
TOV_Counter = 0;
    266e:	10 92 47 03 	sts	0x0347, r1
    2672:	10 92 46 03 	sts	0x0346, r1
// clear flag of over flow
//SIT_BIT(TIFR_REG,2);
// clear ICF1 flag
SET_BIT(TIFR_REG,5);
    2676:	a8 e5       	ldi	r26, 0x58	; 88
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	e8 e5       	ldi	r30, 0x58	; 88
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	80 62       	ori	r24, 0x20	; 32
    2682:	8c 93       	st	X, r24
// change from rising edge to falling edge
CLEAR_BIT(TCCR1B_REG,6);
    2684:	ae e4       	ldi	r26, 0x4E	; 78
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	ee e4       	ldi	r30, 0x4E	; 78
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	8f 7b       	andi	r24, 0xBF	; 191
    2690:	8c 93       	st	X, r24

// wait until falling edge come
while(CHECK_BIT(TIFR_REG,5)==0);
    2692:	e8 e5       	ldi	r30, 0x58	; 88
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	82 95       	swap	r24
    269a:	86 95       	lsr	r24
    269c:	87 70       	andi	r24, 0x07	; 7
    269e:	88 2f       	mov	r24, r24
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	81 70       	andi	r24, 0x01	; 1
    26a4:	90 70       	andi	r25, 0x00	; 0
    26a6:	00 97       	sbiw	r24, 0x00	; 0
    26a8:	a1 f3       	breq	.-24     	; 0x2692 <Ultrasonic_Read+0x278>
// clear ICF1 flag
//SIT_BIT(TIFR_REG,5);


Count=ICR1_REG+(65535*TOV_Counter);
    26aa:	e6 e4       	ldi	r30, 0x46	; 70
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	80 81       	ld	r24, Z
    26b0:	91 81       	ldd	r25, Z+1	; 0x01
    26b2:	7c 01       	movw	r14, r24
    26b4:	00 e0       	ldi	r16, 0x00	; 0
    26b6:	10 e0       	ldi	r17, 0x00	; 0
    26b8:	80 91 46 03 	lds	r24, 0x0346
    26bc:	90 91 47 03 	lds	r25, 0x0347
    26c0:	cc 01       	movw	r24, r24
    26c2:	a0 e0       	ldi	r26, 0x00	; 0
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	2f ef       	ldi	r18, 0xFF	; 255
    26c8:	3f ef       	ldi	r19, 0xFF	; 255
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	50 e0       	ldi	r21, 0x00	; 0
    26ce:	bc 01       	movw	r22, r24
    26d0:	cd 01       	movw	r24, r26
    26d2:	0e 94 de 3d 	call	0x7bbc	; 0x7bbc <__mulsi3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	8e 0d       	add	r24, r14
    26dc:	9f 1d       	adc	r25, r15
    26de:	a0 1f       	adc	r26, r16
    26e0:	b1 1f       	adc	r27, r17
    26e2:	89 8f       	std	Y+25, r24	; 0x19
    26e4:	9a 8f       	std	Y+26, r25	; 0x1a
    26e6:	ab 8f       	std	Y+27, r26	; 0x1b
    26e8:	bc 8f       	std	Y+28, r27	; 0x1c

//distance=DISTANCE_EXEPT_COUNTER*Count;
distance=(double)0.008575*Count;
    26ea:	69 8d       	ldd	r22, Y+25	; 0x19
    26ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26f2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	bc 01       	movw	r22, r24
    26fc:	cd 01       	movw	r24, r26
    26fe:	28 e2       	ldi	r18, 0x28	; 40
    2700:	3e e7       	ldi	r19, 0x7E	; 126
    2702:	4c e0       	ldi	r20, 0x0C	; 12
    2704:	5c e3       	ldi	r21, 0x3C	; 60
    2706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	8d 8f       	std	Y+29, r24	; 0x1d
    2710:	9e 8f       	std	Y+30, r25	; 0x1e
    2712:	af 8f       	std	Y+31, r26	; 0x1f
    2714:	b8 a3       	std	Y+32, r27	; 0x20
return distance;
    2716:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2718:	9e 8d       	ldd	r25, Y+30	; 0x1e
    271a:	af 8d       	ldd	r26, Y+31	; 0x1f
    271c:	b8 a1       	ldd	r27, Y+32	; 0x20
}
    271e:	bc 01       	movw	r22, r24
    2720:	cd 01       	movw	r24, r26
    2722:	a0 96       	adiw	r28, 0x20	; 32
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	1f 91       	pop	r17
    2734:	0f 91       	pop	r16
    2736:	ff 90       	pop	r15
    2738:	ef 90       	pop	r14
    273a:	08 95       	ret

0000273c <__vector_8>:




ISR(TIMER1_OVF_vect){
    273c:	1f 92       	push	r1
    273e:	0f 92       	push	r0
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	0f 92       	push	r0
    2744:	11 24       	eor	r1, r1
    2746:	8f 93       	push	r24
    2748:	9f 93       	push	r25
    274a:	df 93       	push	r29
    274c:	cf 93       	push	r28
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
	TOV_Counter++;
    2752:	80 91 46 03 	lds	r24, 0x0346
    2756:	90 91 47 03 	lds	r25, 0x0347
    275a:	01 96       	adiw	r24, 0x01	; 1
    275c:	90 93 47 03 	sts	0x0347, r25
    2760:	80 93 46 03 	sts	0x0346, r24
}
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	9f 91       	pop	r25
    276a:	8f 91       	pop	r24
    276c:	0f 90       	pop	r0
    276e:	0f be       	out	0x3f, r0	; 63
    2770:	0f 90       	pop	r0
    2772:	1f 90       	pop	r1
    2774:	18 95       	reti

00002776 <Stepper_Int>:
#include "Stepper_Motor_Interface.h"

dio_port_t mport;
nipple_port mnipple;
void Stepper_Int(dio_port_t port,nipple_port nipple)
{
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	00 d0       	rcall	.+0      	; 0x277c <Stepper_Int+0x6>
    277c:	00 d0       	rcall	.+0      	; 0x277e <Stepper_Int+0x8>
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	89 83       	std	Y+1, r24	; 0x01
    2784:	6a 83       	std	Y+2, r22	; 0x02
	mport= port;
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	80 93 48 03 	sts	0x0348, r24
	mnipple=nipple;
    278c:	8a 81       	ldd	r24, Y+2	; 0x02
    278e:	80 93 49 03 	sts	0x0349, r24

	switch(nipple)
    2792:	8a 81       	ldd	r24, Y+2	; 0x02
    2794:	28 2f       	mov	r18, r24
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	3c 83       	std	Y+4, r19	; 0x04
    279a:	2b 83       	std	Y+3, r18	; 0x03
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	9c 81       	ldd	r25, Y+4	; 0x04
    27a0:	81 30       	cpi	r24, 0x01	; 1
    27a2:	91 05       	cpc	r25, r1
    27a4:	f9 f0       	breq	.+62     	; 0x27e4 <Stepper_Int+0x6e>
    27a6:	2b 81       	ldd	r18, Y+3	; 0x03
    27a8:	3c 81       	ldd	r19, Y+4	; 0x04
    27aa:	22 30       	cpi	r18, 0x02	; 2
    27ac:	31 05       	cpc	r19, r1
    27ae:	29 f0       	breq	.+10     	; 0x27ba <Stepper_Int+0x44>
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	9c 81       	ldd	r25, Y+4	; 0x04
    27b4:	00 97       	sbiw	r24, 0x00	; 0
    27b6:	59 f1       	breq	.+86     	; 0x280e <Stepper_Int+0x98>
    27b8:	3e c0       	rjmp	.+124    	; 0x2836 <Stepper_Int+0xc0>
{
	case RAND_NIPPLE:
		DIO_cnfg_channel(port, DIO_PIN1, DIO_OUTPUT);
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	61 e0       	ldi	r22, 0x01	; 1
    27be:	41 e0       	ldi	r20, 0x01	; 1
    27c0:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
		DIO_cnfg_channel(port, DIO_PIN3, DIO_OUTPUT);
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	63 e0       	ldi	r22, 0x03	; 3
    27c8:	41 e0       	ldi	r20, 0x01	; 1
    27ca:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
		DIO_cnfg_channel(port, DIO_PIN4, DIO_OUTPUT);
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	64 e0       	ldi	r22, 0x04	; 4
    27d2:	41 e0       	ldi	r20, 0x01	; 1
    27d4:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
		DIO_cnfg_channel(port, DIO_PIN5, DIO_OUTPUT);
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	65 e0       	ldi	r22, 0x05	; 5
    27dc:	41 e0       	ldi	r20, 0x01	; 1
    27de:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
    27e2:	29 c0       	rjmp	.+82     	; 0x2836 <Stepper_Int+0xc0>
		break;

case HIGH_NIPPLE:
	DIO_cnfg_channel(port, DIO_PIN4, DIO_OUTPUT);
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	64 e0       	ldi	r22, 0x04	; 4
    27e8:	41 e0       	ldi	r20, 0x01	; 1
    27ea:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
	DIO_cnfg_channel(port, DIO_PIN5, DIO_OUTPUT);
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	65 e0       	ldi	r22, 0x05	; 5
    27f2:	41 e0       	ldi	r20, 0x01	; 1
    27f4:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
	DIO_cnfg_channel(port, DIO_PIN6, DIO_OUTPUT);
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	66 e0       	ldi	r22, 0x06	; 6
    27fc:	41 e0       	ldi	r20, 0x01	; 1
    27fe:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
	DIO_cnfg_channel(port, DIO_PIN7, DIO_OUTPUT);
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	67 e0       	ldi	r22, 0x07	; 7
    2806:	41 e0       	ldi	r20, 0x01	; 1
    2808:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
    280c:	14 c0       	rjmp	.+40     	; 0x2836 <Stepper_Int+0xc0>
	break;
case LOW_NIPPLE:
	DIO_cnfg_channel(port, DIO_PIN0, DIO_OUTPUT);
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	60 e0       	ldi	r22, 0x00	; 0
    2812:	41 e0       	ldi	r20, 0x01	; 1
    2814:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
	DIO_cnfg_channel(port, DIO_PIN1, DIO_OUTPUT);
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	61 e0       	ldi	r22, 0x01	; 1
    281c:	41 e0       	ldi	r20, 0x01	; 1
    281e:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
	DIO_cnfg_channel(port, DIO_PIN2, DIO_OUTPUT);
    2822:	89 81       	ldd	r24, Y+1	; 0x01
    2824:	62 e0       	ldi	r22, 0x02	; 2
    2826:	41 e0       	ldi	r20, 0x01	; 1
    2828:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
	DIO_cnfg_channel(port, DIO_PIN3, DIO_OUTPUT);
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	63 e0       	ldi	r22, 0x03	; 3
    2830:	41 e0       	ldi	r20, 0x01	; 1
    2832:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
	break;

}
}
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	cf 91       	pop	r28
    2840:	df 91       	pop	r29
    2842:	08 95       	ret

00002844 <Stepper_Cfg>:

void Stepper_Cfg(u8 speed,clk_wise clk,nipple_port nipple)
{
    2844:	0f 93       	push	r16
    2846:	1f 93       	push	r17
    2848:	df 93       	push	r29
    284a:	cf 93       	push	r28
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	cb 54       	subi	r28, 0x4B	; 75
    2852:	d1 40       	sbci	r29, 0x01	; 1
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	cd bf       	out	0x3d, r28	; 61
    285e:	fe 01       	movw	r30, r28
    2860:	ed 5b       	subi	r30, 0xBD	; 189
    2862:	fe 4f       	sbci	r31, 0xFE	; 254
    2864:	80 83       	st	Z, r24
    2866:	fe 01       	movw	r30, r28
    2868:	ec 5b       	subi	r30, 0xBC	; 188
    286a:	fe 4f       	sbci	r31, 0xFE	; 254
    286c:	60 83       	st	Z, r22
    286e:	fe 01       	movw	r30, r28
    2870:	eb 5b       	subi	r30, 0xBB	; 187
    2872:	fe 4f       	sbci	r31, 0xFE	; 254
    2874:	40 83       	st	Z, r20
switch(clk)
    2876:	fe 01       	movw	r30, r28
    2878:	ec 5b       	subi	r30, 0xBC	; 188
    287a:	fe 4f       	sbci	r31, 0xFE	; 254
    287c:	80 81       	ld	r24, Z
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	c6 5b       	subi	r28, 0xB6	; 182
    2884:	de 4f       	sbci	r29, 0xFE	; 254
    2886:	39 83       	std	Y+1, r19	; 0x01
    2888:	28 83       	st	Y, r18
    288a:	ca 54       	subi	r28, 0x4A	; 74
    288c:	d1 40       	sbci	r29, 0x01	; 1
    288e:	c6 5b       	subi	r28, 0xB6	; 182
    2890:	de 4f       	sbci	r29, 0xFE	; 254
    2892:	88 81       	ld	r24, Y
    2894:	99 81       	ldd	r25, Y+1	; 0x01
    2896:	ca 54       	subi	r28, 0x4A	; 74
    2898:	d1 40       	sbci	r29, 0x01	; 1
    289a:	00 97       	sbiw	r24, 0x00	; 0
    289c:	69 f0       	breq	.+26     	; 0x28b8 <Stepper_Cfg+0x74>
    289e:	c6 5b       	subi	r28, 0xB6	; 182
    28a0:	de 4f       	sbci	r29, 0xFE	; 254
    28a2:	e8 81       	ld	r30, Y
    28a4:	f9 81       	ldd	r31, Y+1	; 0x01
    28a6:	ca 54       	subi	r28, 0x4A	; 74
    28a8:	d1 40       	sbci	r29, 0x01	; 1
    28aa:	e1 30       	cpi	r30, 0x01	; 1
    28ac:	f1 05       	cpc	r31, r1
    28ae:	11 f4       	brne	.+4      	; 0x28b4 <Stepper_Cfg+0x70>
    28b0:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <Stepper_Cfg+0x135c>
    28b4:	0c 94 c8 26 	jmp	0x4d90	; 0x4d90 <Stepper_Cfg+0x254c>
{
case CLOCK_WISE_STEPPER:


	switch(nipple)
    28b8:	fe 01       	movw	r30, r28
    28ba:	eb 5b       	subi	r30, 0xBB	; 187
    28bc:	fe 4f       	sbci	r31, 0xFE	; 254
    28be:	80 81       	ld	r24, Z
    28c0:	28 2f       	mov	r18, r24
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	c8 5b       	subi	r28, 0xB8	; 184
    28c6:	de 4f       	sbci	r29, 0xFE	; 254
    28c8:	39 83       	std	Y+1, r19	; 0x01
    28ca:	28 83       	st	Y, r18
    28cc:	c8 54       	subi	r28, 0x48	; 72
    28ce:	d1 40       	sbci	r29, 0x01	; 1
    28d0:	c8 5b       	subi	r28, 0xB8	; 184
    28d2:	de 4f       	sbci	r29, 0xFE	; 254
    28d4:	88 81       	ld	r24, Y
    28d6:	99 81       	ldd	r25, Y+1	; 0x01
    28d8:	c8 54       	subi	r28, 0x48	; 72
    28da:	d1 40       	sbci	r29, 0x01	; 1
    28dc:	81 30       	cpi	r24, 0x01	; 1
    28de:	91 05       	cpc	r25, r1
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <Stepper_Cfg+0xa0>
    28e2:	6d c3       	rjmp	.+1754   	; 0x2fbe <Stepper_Cfg+0x77a>
    28e4:	c8 5b       	subi	r28, 0xB8	; 184
    28e6:	de 4f       	sbci	r29, 0xFE	; 254
    28e8:	e8 81       	ld	r30, Y
    28ea:	f9 81       	ldd	r31, Y+1	; 0x01
    28ec:	c8 54       	subi	r28, 0x48	; 72
    28ee:	d1 40       	sbci	r29, 0x01	; 1
    28f0:	e2 30       	cpi	r30, 0x02	; 2
    28f2:	f1 05       	cpc	r31, r1
    28f4:	61 f0       	breq	.+24     	; 0x290e <Stepper_Cfg+0xca>
    28f6:	c8 5b       	subi	r28, 0xB8	; 184
    28f8:	de 4f       	sbci	r29, 0xFE	; 254
    28fa:	28 81       	ld	r18, Y
    28fc:	39 81       	ldd	r19, Y+1	; 0x01
    28fe:	c8 54       	subi	r28, 0x48	; 72
    2900:	d1 40       	sbci	r29, 0x01	; 1
    2902:	21 15       	cp	r18, r1
    2904:	31 05       	cpc	r19, r1
    2906:	09 f4       	brne	.+2      	; 0x290a <Stepper_Cfg+0xc6>
    2908:	b2 c6       	rjmp	.+3428   	; 0x366e <Stepper_Cfg+0xe2a>
    290a:	0c 94 c8 26 	jmp	0x4d90	; 0x4d90 <Stepper_Cfg+0x254c>
{
	case RAND_NIPPLE:
		DIO_write(mport,DIO_PIN1 , DIO_HIGH);
    290e:	80 91 48 03 	lds	r24, 0x0348
    2912:	61 e0       	ldi	r22, 0x01	; 1
    2914:	41 e0       	ldi	r20, 0x01	; 1
    2916:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		DIO_write(mport,DIO_PIN3 , DIO_LOW);
    291a:	80 91 48 03 	lds	r24, 0x0348
    291e:	63 e0       	ldi	r22, 0x03	; 3
    2920:	40 e0       	ldi	r20, 0x00	; 0
    2922:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		DIO_write(mport,DIO_PIN4 , DIO_LOW);
    2926:	80 91 48 03 	lds	r24, 0x0348
    292a:	64 e0       	ldi	r22, 0x04	; 4
    292c:	40 e0       	ldi	r20, 0x00	; 0
    292e:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		DIO_write(mport,DIO_PIN5 , DIO_LOW);
    2932:	80 91 48 03 	lds	r24, 0x0348
    2936:	65 e0       	ldi	r22, 0x05	; 5
    2938:	40 e0       	ldi	r20, 0x00	; 0
    293a:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>

			_delay_ms(speed);
    293e:	fe 01       	movw	r30, r28
    2940:	ed 5b       	subi	r30, 0xBD	; 189
    2942:	fe 4f       	sbci	r31, 0xFE	; 254
    2944:	80 81       	ld	r24, Z
    2946:	88 2f       	mov	r24, r24
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	a0 e0       	ldi	r26, 0x00	; 0
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	bc 01       	movw	r22, r24
    2950:	cd 01       	movw	r24, r26
    2952:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	fe 01       	movw	r30, r28
    295c:	e1 5c       	subi	r30, 0xC1	; 193
    295e:	fe 4f       	sbci	r31, 0xFE	; 254
    2960:	80 83       	st	Z, r24
    2962:	91 83       	std	Z+1, r25	; 0x01
    2964:	a2 83       	std	Z+2, r26	; 0x02
    2966:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2968:	8e 01       	movw	r16, r28
    296a:	05 5c       	subi	r16, 0xC5	; 197
    296c:	1e 4f       	sbci	r17, 0xFE	; 254
    296e:	fe 01       	movw	r30, r28
    2970:	e1 5c       	subi	r30, 0xC1	; 193
    2972:	fe 4f       	sbci	r31, 0xFE	; 254
    2974:	60 81       	ld	r22, Z
    2976:	71 81       	ldd	r23, Z+1	; 0x01
    2978:	82 81       	ldd	r24, Z+2	; 0x02
    297a:	93 81       	ldd	r25, Z+3	; 0x03
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	4a e7       	ldi	r20, 0x7A	; 122
    2982:	53 e4       	ldi	r21, 0x43	; 67
    2984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	f8 01       	movw	r30, r16
    298e:	80 83       	st	Z, r24
    2990:	91 83       	std	Z+1, r25	; 0x01
    2992:	a2 83       	std	Z+2, r26	; 0x02
    2994:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2996:	fe 01       	movw	r30, r28
    2998:	e5 5c       	subi	r30, 0xC5	; 197
    299a:	fe 4f       	sbci	r31, 0xFE	; 254
    299c:	60 81       	ld	r22, Z
    299e:	71 81       	ldd	r23, Z+1	; 0x01
    29a0:	82 81       	ldd	r24, Z+2	; 0x02
    29a2:	93 81       	ldd	r25, Z+3	; 0x03
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e8       	ldi	r20, 0x80	; 128
    29aa:	5f e3       	ldi	r21, 0x3F	; 63
    29ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29b0:	88 23       	and	r24, r24
    29b2:	44 f4       	brge	.+16     	; 0x29c4 <Stepper_Cfg+0x180>
		__ticks = 1;
    29b4:	fe 01       	movw	r30, r28
    29b6:	e7 5c       	subi	r30, 0xC7	; 199
    29b8:	fe 4f       	sbci	r31, 0xFE	; 254
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	91 83       	std	Z+1, r25	; 0x01
    29c0:	80 83       	st	Z, r24
    29c2:	64 c0       	rjmp	.+200    	; 0x2a8c <Stepper_Cfg+0x248>
	else if (__tmp > 65535)
    29c4:	fe 01       	movw	r30, r28
    29c6:	e5 5c       	subi	r30, 0xC5	; 197
    29c8:	fe 4f       	sbci	r31, 0xFE	; 254
    29ca:	60 81       	ld	r22, Z
    29cc:	71 81       	ldd	r23, Z+1	; 0x01
    29ce:	82 81       	ldd	r24, Z+2	; 0x02
    29d0:	93 81       	ldd	r25, Z+3	; 0x03
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	3f ef       	ldi	r19, 0xFF	; 255
    29d6:	4f e7       	ldi	r20, 0x7F	; 127
    29d8:	57 e4       	ldi	r21, 0x47	; 71
    29da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29de:	18 16       	cp	r1, r24
    29e0:	0c f0       	brlt	.+2      	; 0x29e4 <Stepper_Cfg+0x1a0>
    29e2:	43 c0       	rjmp	.+134    	; 0x2a6a <Stepper_Cfg+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e4:	fe 01       	movw	r30, r28
    29e6:	e1 5c       	subi	r30, 0xC1	; 193
    29e8:	fe 4f       	sbci	r31, 0xFE	; 254
    29ea:	60 81       	ld	r22, Z
    29ec:	71 81       	ldd	r23, Z+1	; 0x01
    29ee:	82 81       	ldd	r24, Z+2	; 0x02
    29f0:	93 81       	ldd	r25, Z+3	; 0x03
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	40 e2       	ldi	r20, 0x20	; 32
    29f8:	51 e4       	ldi	r21, 0x41	; 65
    29fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	8e 01       	movw	r16, r28
    2a04:	07 5c       	subi	r16, 0xC7	; 199
    2a06:	1e 4f       	sbci	r17, 0xFE	; 254
    2a08:	bc 01       	movw	r22, r24
    2a0a:	cd 01       	movw	r24, r26
    2a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	f8 01       	movw	r30, r16
    2a16:	91 83       	std	Z+1, r25	; 0x01
    2a18:	80 83       	st	Z, r24
    2a1a:	1f c0       	rjmp	.+62     	; 0x2a5a <Stepper_Cfg+0x216>
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	e9 5c       	subi	r30, 0xC9	; 201
    2a20:	fe 4f       	sbci	r31, 0xFE	; 254
    2a22:	89 e1       	ldi	r24, 0x19	; 25
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	91 83       	std	Z+1, r25	; 0x01
    2a28:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	e9 5c       	subi	r30, 0xC9	; 201
    2a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a30:	80 81       	ld	r24, Z
    2a32:	91 81       	ldd	r25, Z+1	; 0x01
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <Stepper_Cfg+0x1f0>
    2a38:	fe 01       	movw	r30, r28
    2a3a:	e9 5c       	subi	r30, 0xC9	; 201
    2a3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a3e:	91 83       	std	Z+1, r25	; 0x01
    2a40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a42:	de 01       	movw	r26, r28
    2a44:	a7 5c       	subi	r26, 0xC7	; 199
    2a46:	be 4f       	sbci	r27, 0xFE	; 254
    2a48:	fe 01       	movw	r30, r28
    2a4a:	e7 5c       	subi	r30, 0xC7	; 199
    2a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a4e:	80 81       	ld	r24, Z
    2a50:	91 81       	ldd	r25, Z+1	; 0x01
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	11 96       	adiw	r26, 0x01	; 1
    2a56:	9c 93       	st	X, r25
    2a58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	e7 5c       	subi	r30, 0xC7	; 199
    2a5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a60:	80 81       	ld	r24, Z
    2a62:	91 81       	ldd	r25, Z+1	; 0x01
    2a64:	00 97       	sbiw	r24, 0x00	; 0
    2a66:	d1 f6       	brne	.-76     	; 0x2a1c <Stepper_Cfg+0x1d8>
    2a68:	27 c0       	rjmp	.+78     	; 0x2ab8 <Stepper_Cfg+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6a:	8e 01       	movw	r16, r28
    2a6c:	07 5c       	subi	r16, 0xC7	; 199
    2a6e:	1e 4f       	sbci	r17, 0xFE	; 254
    2a70:	fe 01       	movw	r30, r28
    2a72:	e5 5c       	subi	r30, 0xC5	; 197
    2a74:	fe 4f       	sbci	r31, 0xFE	; 254
    2a76:	60 81       	ld	r22, Z
    2a78:	71 81       	ldd	r23, Z+1	; 0x01
    2a7a:	82 81       	ldd	r24, Z+2	; 0x02
    2a7c:	93 81       	ldd	r25, Z+3	; 0x03
    2a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	f8 01       	movw	r30, r16
    2a88:	91 83       	std	Z+1, r25	; 0x01
    2a8a:	80 83       	st	Z, r24
    2a8c:	de 01       	movw	r26, r28
    2a8e:	ab 5c       	subi	r26, 0xCB	; 203
    2a90:	be 4f       	sbci	r27, 0xFE	; 254
    2a92:	fe 01       	movw	r30, r28
    2a94:	e7 5c       	subi	r30, 0xC7	; 199
    2a96:	fe 4f       	sbci	r31, 0xFE	; 254
    2a98:	80 81       	ld	r24, Z
    2a9a:	91 81       	ldd	r25, Z+1	; 0x01
    2a9c:	8d 93       	st	X+, r24
    2a9e:	9c 93       	st	X, r25
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	eb 5c       	subi	r30, 0xCB	; 203
    2aa4:	fe 4f       	sbci	r31, 0xFE	; 254
    2aa6:	80 81       	ld	r24, Z
    2aa8:	91 81       	ldd	r25, Z+1	; 0x01
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	f1 f7       	brne	.-4      	; 0x2aaa <Stepper_Cfg+0x266>
    2aae:	fe 01       	movw	r30, r28
    2ab0:	eb 5c       	subi	r30, 0xCB	; 203
    2ab2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab4:	91 83       	std	Z+1, r25	; 0x01
    2ab6:	80 83       	st	Z, r24
			DIO_write(mport,DIO_PIN1 , DIO_LOW);
    2ab8:	80 91 48 03 	lds	r24, 0x0348
    2abc:	61 e0       	ldi	r22, 0x01	; 1
    2abe:	40 e0       	ldi	r20, 0x00	; 0
    2ac0:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(mport,DIO_PIN3 , DIO_HIGH);
    2ac4:	80 91 48 03 	lds	r24, 0x0348
    2ac8:	63 e0       	ldi	r22, 0x03	; 3
    2aca:	41 e0       	ldi	r20, 0x01	; 1
    2acc:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(mport,DIO_PIN4 , DIO_LOW);
    2ad0:	80 91 48 03 	lds	r24, 0x0348
    2ad4:	64 e0       	ldi	r22, 0x04	; 4
    2ad6:	40 e0       	ldi	r20, 0x00	; 0
    2ad8:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(mport,DIO_PIN5 , DIO_LOW);
    2adc:	80 91 48 03 	lds	r24, 0x0348
    2ae0:	65 e0       	ldi	r22, 0x05	; 5
    2ae2:	40 e0       	ldi	r20, 0x00	; 0
    2ae4:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			_delay_ms(speed);
    2ae8:	fe 01       	movw	r30, r28
    2aea:	ed 5b       	subi	r30, 0xBD	; 189
    2aec:	fe 4f       	sbci	r31, 0xFE	; 254
    2aee:	80 81       	ld	r24, Z
    2af0:	88 2f       	mov	r24, r24
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	a0 e0       	ldi	r26, 0x00	; 0
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	bc 01       	movw	r22, r24
    2afa:	cd 01       	movw	r24, r26
    2afc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	fe 01       	movw	r30, r28
    2b06:	ef 5c       	subi	r30, 0xCF	; 207
    2b08:	fe 4f       	sbci	r31, 0xFE	; 254
    2b0a:	80 83       	st	Z, r24
    2b0c:	91 83       	std	Z+1, r25	; 0x01
    2b0e:	a2 83       	std	Z+2, r26	; 0x02
    2b10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b12:	8e 01       	movw	r16, r28
    2b14:	03 5d       	subi	r16, 0xD3	; 211
    2b16:	1e 4f       	sbci	r17, 0xFE	; 254
    2b18:	fe 01       	movw	r30, r28
    2b1a:	ef 5c       	subi	r30, 0xCF	; 207
    2b1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b1e:	60 81       	ld	r22, Z
    2b20:	71 81       	ldd	r23, Z+1	; 0x01
    2b22:	82 81       	ldd	r24, Z+2	; 0x02
    2b24:	93 81       	ldd	r25, Z+3	; 0x03
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	4a e7       	ldi	r20, 0x7A	; 122
    2b2c:	53 e4       	ldi	r21, 0x43	; 67
    2b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	f8 01       	movw	r30, r16
    2b38:	80 83       	st	Z, r24
    2b3a:	91 83       	std	Z+1, r25	; 0x01
    2b3c:	a2 83       	std	Z+2, r26	; 0x02
    2b3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b40:	fe 01       	movw	r30, r28
    2b42:	e3 5d       	subi	r30, 0xD3	; 211
    2b44:	fe 4f       	sbci	r31, 0xFE	; 254
    2b46:	60 81       	ld	r22, Z
    2b48:	71 81       	ldd	r23, Z+1	; 0x01
    2b4a:	82 81       	ldd	r24, Z+2	; 0x02
    2b4c:	93 81       	ldd	r25, Z+3	; 0x03
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e8       	ldi	r20, 0x80	; 128
    2b54:	5f e3       	ldi	r21, 0x3F	; 63
    2b56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b5a:	88 23       	and	r24, r24
    2b5c:	44 f4       	brge	.+16     	; 0x2b6e <Stepper_Cfg+0x32a>
		__ticks = 1;
    2b5e:	fe 01       	movw	r30, r28
    2b60:	e5 5d       	subi	r30, 0xD5	; 213
    2b62:	fe 4f       	sbci	r31, 0xFE	; 254
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	91 83       	std	Z+1, r25	; 0x01
    2b6a:	80 83       	st	Z, r24
    2b6c:	64 c0       	rjmp	.+200    	; 0x2c36 <Stepper_Cfg+0x3f2>
	else if (__tmp > 65535)
    2b6e:	fe 01       	movw	r30, r28
    2b70:	e3 5d       	subi	r30, 0xD3	; 211
    2b72:	fe 4f       	sbci	r31, 0xFE	; 254
    2b74:	60 81       	ld	r22, Z
    2b76:	71 81       	ldd	r23, Z+1	; 0x01
    2b78:	82 81       	ldd	r24, Z+2	; 0x02
    2b7a:	93 81       	ldd	r25, Z+3	; 0x03
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	3f ef       	ldi	r19, 0xFF	; 255
    2b80:	4f e7       	ldi	r20, 0x7F	; 127
    2b82:	57 e4       	ldi	r21, 0x47	; 71
    2b84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b88:	18 16       	cp	r1, r24
    2b8a:	0c f0       	brlt	.+2      	; 0x2b8e <Stepper_Cfg+0x34a>
    2b8c:	43 c0       	rjmp	.+134    	; 0x2c14 <Stepper_Cfg+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8e:	fe 01       	movw	r30, r28
    2b90:	ef 5c       	subi	r30, 0xCF	; 207
    2b92:	fe 4f       	sbci	r31, 0xFE	; 254
    2b94:	60 81       	ld	r22, Z
    2b96:	71 81       	ldd	r23, Z+1	; 0x01
    2b98:	82 81       	ldd	r24, Z+2	; 0x02
    2b9a:	93 81       	ldd	r25, Z+3	; 0x03
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	40 e2       	ldi	r20, 0x20	; 32
    2ba2:	51 e4       	ldi	r21, 0x41	; 65
    2ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	8e 01       	movw	r16, r28
    2bae:	05 5d       	subi	r16, 0xD5	; 213
    2bb0:	1e 4f       	sbci	r17, 0xFE	; 254
    2bb2:	bc 01       	movw	r22, r24
    2bb4:	cd 01       	movw	r24, r26
    2bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	f8 01       	movw	r30, r16
    2bc0:	91 83       	std	Z+1, r25	; 0x01
    2bc2:	80 83       	st	Z, r24
    2bc4:	1f c0       	rjmp	.+62     	; 0x2c04 <Stepper_Cfg+0x3c0>
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	e7 5d       	subi	r30, 0xD7	; 215
    2bca:	fe 4f       	sbci	r31, 0xFE	; 254
    2bcc:	89 e1       	ldi	r24, 0x19	; 25
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	91 83       	std	Z+1, r25	; 0x01
    2bd2:	80 83       	st	Z, r24
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e7 5d       	subi	r30, 0xD7	; 215
    2bd8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bda:	80 81       	ld	r24, Z
    2bdc:	91 81       	ldd	r25, Z+1	; 0x01
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <Stepper_Cfg+0x39a>
    2be2:	fe 01       	movw	r30, r28
    2be4:	e7 5d       	subi	r30, 0xD7	; 215
    2be6:	fe 4f       	sbci	r31, 0xFE	; 254
    2be8:	91 83       	std	Z+1, r25	; 0x01
    2bea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bec:	de 01       	movw	r26, r28
    2bee:	a5 5d       	subi	r26, 0xD5	; 213
    2bf0:	be 4f       	sbci	r27, 0xFE	; 254
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	e5 5d       	subi	r30, 0xD5	; 213
    2bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf8:	80 81       	ld	r24, Z
    2bfa:	91 81       	ldd	r25, Z+1	; 0x01
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	11 96       	adiw	r26, 0x01	; 1
    2c00:	9c 93       	st	X, r25
    2c02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c04:	fe 01       	movw	r30, r28
    2c06:	e5 5d       	subi	r30, 0xD5	; 213
    2c08:	fe 4f       	sbci	r31, 0xFE	; 254
    2c0a:	80 81       	ld	r24, Z
    2c0c:	91 81       	ldd	r25, Z+1	; 0x01
    2c0e:	00 97       	sbiw	r24, 0x00	; 0
    2c10:	d1 f6       	brne	.-76     	; 0x2bc6 <Stepper_Cfg+0x382>
    2c12:	27 c0       	rjmp	.+78     	; 0x2c62 <Stepper_Cfg+0x41e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c14:	8e 01       	movw	r16, r28
    2c16:	05 5d       	subi	r16, 0xD5	; 213
    2c18:	1e 4f       	sbci	r17, 0xFE	; 254
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	e3 5d       	subi	r30, 0xD3	; 211
    2c1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c20:	60 81       	ld	r22, Z
    2c22:	71 81       	ldd	r23, Z+1	; 0x01
    2c24:	82 81       	ldd	r24, Z+2	; 0x02
    2c26:	93 81       	ldd	r25, Z+3	; 0x03
    2c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	f8 01       	movw	r30, r16
    2c32:	91 83       	std	Z+1, r25	; 0x01
    2c34:	80 83       	st	Z, r24
    2c36:	de 01       	movw	r26, r28
    2c38:	a9 5d       	subi	r26, 0xD9	; 217
    2c3a:	be 4f       	sbci	r27, 0xFE	; 254
    2c3c:	fe 01       	movw	r30, r28
    2c3e:	e5 5d       	subi	r30, 0xD5	; 213
    2c40:	fe 4f       	sbci	r31, 0xFE	; 254
    2c42:	80 81       	ld	r24, Z
    2c44:	91 81       	ldd	r25, Z+1	; 0x01
    2c46:	8d 93       	st	X+, r24
    2c48:	9c 93       	st	X, r25
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	e9 5d       	subi	r30, 0xD9	; 217
    2c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c50:	80 81       	ld	r24, Z
    2c52:	91 81       	ldd	r25, Z+1	; 0x01
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	f1 f7       	brne	.-4      	; 0x2c54 <Stepper_Cfg+0x410>
    2c58:	fe 01       	movw	r30, r28
    2c5a:	e9 5d       	subi	r30, 0xD9	; 217
    2c5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c5e:	91 83       	std	Z+1, r25	; 0x01
    2c60:	80 83       	st	Z, r24
			DIO_write(mport,DIO_PIN1 , DIO_LOW);
    2c62:	80 91 48 03 	lds	r24, 0x0348
    2c66:	61 e0       	ldi	r22, 0x01	; 1
    2c68:	40 e0       	ldi	r20, 0x00	; 0
    2c6a:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(mport,DIO_PIN3 , DIO_LOW);
    2c6e:	80 91 48 03 	lds	r24, 0x0348
    2c72:	63 e0       	ldi	r22, 0x03	; 3
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(mport,DIO_PIN4 , DIO_HIGH);
    2c7a:	80 91 48 03 	lds	r24, 0x0348
    2c7e:	64 e0       	ldi	r22, 0x04	; 4
    2c80:	41 e0       	ldi	r20, 0x01	; 1
    2c82:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(mport,DIO_PIN5 , DIO_LOW);
    2c86:	80 91 48 03 	lds	r24, 0x0348
    2c8a:	65 e0       	ldi	r22, 0x05	; 5
    2c8c:	40 e0       	ldi	r20, 0x00	; 0
    2c8e:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			_delay_ms(speed);
    2c92:	fe 01       	movw	r30, r28
    2c94:	ed 5b       	subi	r30, 0xBD	; 189
    2c96:	fe 4f       	sbci	r31, 0xFE	; 254
    2c98:	80 81       	ld	r24, Z
    2c9a:	88 2f       	mov	r24, r24
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	a0 e0       	ldi	r26, 0x00	; 0
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	bc 01       	movw	r22, r24
    2ca4:	cd 01       	movw	r24, r26
    2ca6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	fe 01       	movw	r30, r28
    2cb0:	ed 5d       	subi	r30, 0xDD	; 221
    2cb2:	fe 4f       	sbci	r31, 0xFE	; 254
    2cb4:	80 83       	st	Z, r24
    2cb6:	91 83       	std	Z+1, r25	; 0x01
    2cb8:	a2 83       	std	Z+2, r26	; 0x02
    2cba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cbc:	8e 01       	movw	r16, r28
    2cbe:	01 5e       	subi	r16, 0xE1	; 225
    2cc0:	1e 4f       	sbci	r17, 0xFE	; 254
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	ed 5d       	subi	r30, 0xDD	; 221
    2cc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2cc8:	60 81       	ld	r22, Z
    2cca:	71 81       	ldd	r23, Z+1	; 0x01
    2ccc:	82 81       	ldd	r24, Z+2	; 0x02
    2cce:	93 81       	ldd	r25, Z+3	; 0x03
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	4a e7       	ldi	r20, 0x7A	; 122
    2cd6:	53 e4       	ldi	r21, 0x43	; 67
    2cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	f8 01       	movw	r30, r16
    2ce2:	80 83       	st	Z, r24
    2ce4:	91 83       	std	Z+1, r25	; 0x01
    2ce6:	a2 83       	std	Z+2, r26	; 0x02
    2ce8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cea:	fe 01       	movw	r30, r28
    2cec:	e1 5e       	subi	r30, 0xE1	; 225
    2cee:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf0:	60 81       	ld	r22, Z
    2cf2:	71 81       	ldd	r23, Z+1	; 0x01
    2cf4:	82 81       	ldd	r24, Z+2	; 0x02
    2cf6:	93 81       	ldd	r25, Z+3	; 0x03
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 e8       	ldi	r20, 0x80	; 128
    2cfe:	5f e3       	ldi	r21, 0x3F	; 63
    2d00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d04:	88 23       	and	r24, r24
    2d06:	44 f4       	brge	.+16     	; 0x2d18 <Stepper_Cfg+0x4d4>
		__ticks = 1;
    2d08:	fe 01       	movw	r30, r28
    2d0a:	e3 5e       	subi	r30, 0xE3	; 227
    2d0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	91 83       	std	Z+1, r25	; 0x01
    2d14:	80 83       	st	Z, r24
    2d16:	64 c0       	rjmp	.+200    	; 0x2de0 <Stepper_Cfg+0x59c>
	else if (__tmp > 65535)
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e1 5e       	subi	r30, 0xE1	; 225
    2d1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d1e:	60 81       	ld	r22, Z
    2d20:	71 81       	ldd	r23, Z+1	; 0x01
    2d22:	82 81       	ldd	r24, Z+2	; 0x02
    2d24:	93 81       	ldd	r25, Z+3	; 0x03
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	3f ef       	ldi	r19, 0xFF	; 255
    2d2a:	4f e7       	ldi	r20, 0x7F	; 127
    2d2c:	57 e4       	ldi	r21, 0x47	; 71
    2d2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d32:	18 16       	cp	r1, r24
    2d34:	0c f0       	brlt	.+2      	; 0x2d38 <Stepper_Cfg+0x4f4>
    2d36:	43 c0       	rjmp	.+134    	; 0x2dbe <Stepper_Cfg+0x57a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d38:	fe 01       	movw	r30, r28
    2d3a:	ed 5d       	subi	r30, 0xDD	; 221
    2d3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d3e:	60 81       	ld	r22, Z
    2d40:	71 81       	ldd	r23, Z+1	; 0x01
    2d42:	82 81       	ldd	r24, Z+2	; 0x02
    2d44:	93 81       	ldd	r25, Z+3	; 0x03
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e2       	ldi	r20, 0x20	; 32
    2d4c:	51 e4       	ldi	r21, 0x41	; 65
    2d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	8e 01       	movw	r16, r28
    2d58:	03 5e       	subi	r16, 0xE3	; 227
    2d5a:	1e 4f       	sbci	r17, 0xFE	; 254
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	cd 01       	movw	r24, r26
    2d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	f8 01       	movw	r30, r16
    2d6a:	91 83       	std	Z+1, r25	; 0x01
    2d6c:	80 83       	st	Z, r24
    2d6e:	1f c0       	rjmp	.+62     	; 0x2dae <Stepper_Cfg+0x56a>
    2d70:	fe 01       	movw	r30, r28
    2d72:	e5 5e       	subi	r30, 0xE5	; 229
    2d74:	fe 4f       	sbci	r31, 0xFE	; 254
    2d76:	89 e1       	ldi	r24, 0x19	; 25
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	80 83       	st	Z, r24
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e5 5e       	subi	r30, 0xE5	; 229
    2d82:	fe 4f       	sbci	r31, 0xFE	; 254
    2d84:	80 81       	ld	r24, Z
    2d86:	91 81       	ldd	r25, Z+1	; 0x01
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	f1 f7       	brne	.-4      	; 0x2d88 <Stepper_Cfg+0x544>
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	e5 5e       	subi	r30, 0xE5	; 229
    2d90:	fe 4f       	sbci	r31, 0xFE	; 254
    2d92:	91 83       	std	Z+1, r25	; 0x01
    2d94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d96:	de 01       	movw	r26, r28
    2d98:	a3 5e       	subi	r26, 0xE3	; 227
    2d9a:	be 4f       	sbci	r27, 0xFE	; 254
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e3 5e       	subi	r30, 0xE3	; 227
    2da0:	fe 4f       	sbci	r31, 0xFE	; 254
    2da2:	80 81       	ld	r24, Z
    2da4:	91 81       	ldd	r25, Z+1	; 0x01
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	11 96       	adiw	r26, 0x01	; 1
    2daa:	9c 93       	st	X, r25
    2dac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dae:	fe 01       	movw	r30, r28
    2db0:	e3 5e       	subi	r30, 0xE3	; 227
    2db2:	fe 4f       	sbci	r31, 0xFE	; 254
    2db4:	80 81       	ld	r24, Z
    2db6:	91 81       	ldd	r25, Z+1	; 0x01
    2db8:	00 97       	sbiw	r24, 0x00	; 0
    2dba:	d1 f6       	brne	.-76     	; 0x2d70 <Stepper_Cfg+0x52c>
    2dbc:	27 c0       	rjmp	.+78     	; 0x2e0c <Stepper_Cfg+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dbe:	8e 01       	movw	r16, r28
    2dc0:	03 5e       	subi	r16, 0xE3	; 227
    2dc2:	1e 4f       	sbci	r17, 0xFE	; 254
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e1 5e       	subi	r30, 0xE1	; 225
    2dc8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dca:	60 81       	ld	r22, Z
    2dcc:	71 81       	ldd	r23, Z+1	; 0x01
    2dce:	82 81       	ldd	r24, Z+2	; 0x02
    2dd0:	93 81       	ldd	r25, Z+3	; 0x03
    2dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	f8 01       	movw	r30, r16
    2ddc:	91 83       	std	Z+1, r25	; 0x01
    2dde:	80 83       	st	Z, r24
    2de0:	de 01       	movw	r26, r28
    2de2:	a7 5e       	subi	r26, 0xE7	; 231
    2de4:	be 4f       	sbci	r27, 0xFE	; 254
    2de6:	fe 01       	movw	r30, r28
    2de8:	e3 5e       	subi	r30, 0xE3	; 227
    2dea:	fe 4f       	sbci	r31, 0xFE	; 254
    2dec:	80 81       	ld	r24, Z
    2dee:	91 81       	ldd	r25, Z+1	; 0x01
    2df0:	8d 93       	st	X+, r24
    2df2:	9c 93       	st	X, r25
    2df4:	fe 01       	movw	r30, r28
    2df6:	e7 5e       	subi	r30, 0xE7	; 231
    2df8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dfa:	80 81       	ld	r24, Z
    2dfc:	91 81       	ldd	r25, Z+1	; 0x01
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	f1 f7       	brne	.-4      	; 0x2dfe <Stepper_Cfg+0x5ba>
    2e02:	fe 01       	movw	r30, r28
    2e04:	e7 5e       	subi	r30, 0xE7	; 231
    2e06:	fe 4f       	sbci	r31, 0xFE	; 254
    2e08:	91 83       	std	Z+1, r25	; 0x01
    2e0a:	80 83       	st	Z, r24
			DIO_write(mport,DIO_PIN1 , DIO_LOW);
    2e0c:	80 91 48 03 	lds	r24, 0x0348
    2e10:	61 e0       	ldi	r22, 0x01	; 1
    2e12:	40 e0       	ldi	r20, 0x00	; 0
    2e14:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(mport,DIO_PIN3 , DIO_LOW);
    2e18:	80 91 48 03 	lds	r24, 0x0348
    2e1c:	63 e0       	ldi	r22, 0x03	; 3
    2e1e:	40 e0       	ldi	r20, 0x00	; 0
    2e20:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(mport,DIO_PIN4 , DIO_LOW);
    2e24:	80 91 48 03 	lds	r24, 0x0348
    2e28:	64 e0       	ldi	r22, 0x04	; 4
    2e2a:	40 e0       	ldi	r20, 0x00	; 0
    2e2c:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(mport,DIO_PIN5 , DIO_HIGH);
    2e30:	80 91 48 03 	lds	r24, 0x0348
    2e34:	65 e0       	ldi	r22, 0x05	; 5
    2e36:	41 e0       	ldi	r20, 0x01	; 1
    2e38:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>

			_delay_ms(speed);
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	ed 5b       	subi	r30, 0xBD	; 189
    2e40:	fe 4f       	sbci	r31, 0xFE	; 254
    2e42:	80 81       	ld	r24, Z
    2e44:	88 2f       	mov	r24, r24
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	a0 e0       	ldi	r26, 0x00	; 0
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	bc 01       	movw	r22, r24
    2e4e:	cd 01       	movw	r24, r26
    2e50:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	fe 01       	movw	r30, r28
    2e5a:	eb 5e       	subi	r30, 0xEB	; 235
    2e5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e5e:	80 83       	st	Z, r24
    2e60:	91 83       	std	Z+1, r25	; 0x01
    2e62:	a2 83       	std	Z+2, r26	; 0x02
    2e64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e66:	8e 01       	movw	r16, r28
    2e68:	0f 5e       	subi	r16, 0xEF	; 239
    2e6a:	1e 4f       	sbci	r17, 0xFE	; 254
    2e6c:	fe 01       	movw	r30, r28
    2e6e:	eb 5e       	subi	r30, 0xEB	; 235
    2e70:	fe 4f       	sbci	r31, 0xFE	; 254
    2e72:	60 81       	ld	r22, Z
    2e74:	71 81       	ldd	r23, Z+1	; 0x01
    2e76:	82 81       	ldd	r24, Z+2	; 0x02
    2e78:	93 81       	ldd	r25, Z+3	; 0x03
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	4a e7       	ldi	r20, 0x7A	; 122
    2e80:	53 e4       	ldi	r21, 0x43	; 67
    2e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	f8 01       	movw	r30, r16
    2e8c:	80 83       	st	Z, r24
    2e8e:	91 83       	std	Z+1, r25	; 0x01
    2e90:	a2 83       	std	Z+2, r26	; 0x02
    2e92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e94:	fe 01       	movw	r30, r28
    2e96:	ef 5e       	subi	r30, 0xEF	; 239
    2e98:	fe 4f       	sbci	r31, 0xFE	; 254
    2e9a:	60 81       	ld	r22, Z
    2e9c:	71 81       	ldd	r23, Z+1	; 0x01
    2e9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ea0:	93 81       	ldd	r25, Z+3	; 0x03
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	40 e8       	ldi	r20, 0x80	; 128
    2ea8:	5f e3       	ldi	r21, 0x3F	; 63
    2eaa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eae:	88 23       	and	r24, r24
    2eb0:	44 f4       	brge	.+16     	; 0x2ec2 <Stepper_Cfg+0x67e>
		__ticks = 1;
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	e1 5f       	subi	r30, 0xF1	; 241
    2eb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	91 83       	std	Z+1, r25	; 0x01
    2ebe:	80 83       	st	Z, r24
    2ec0:	65 c0       	rjmp	.+202    	; 0x2f8c <Stepper_Cfg+0x748>
	else if (__tmp > 65535)
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	ef 5e       	subi	r30, 0xEF	; 239
    2ec6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec8:	60 81       	ld	r22, Z
    2eca:	71 81       	ldd	r23, Z+1	; 0x01
    2ecc:	82 81       	ldd	r24, Z+2	; 0x02
    2ece:	93 81       	ldd	r25, Z+3	; 0x03
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	3f ef       	ldi	r19, 0xFF	; 255
    2ed4:	4f e7       	ldi	r20, 0x7F	; 127
    2ed6:	57 e4       	ldi	r21, 0x47	; 71
    2ed8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2edc:	18 16       	cp	r1, r24
    2ede:	0c f0       	brlt	.+2      	; 0x2ee2 <Stepper_Cfg+0x69e>
    2ee0:	44 c0       	rjmp	.+136    	; 0x2f6a <Stepper_Cfg+0x726>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	eb 5e       	subi	r30, 0xEB	; 235
    2ee6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee8:	60 81       	ld	r22, Z
    2eea:	71 81       	ldd	r23, Z+1	; 0x01
    2eec:	82 81       	ldd	r24, Z+2	; 0x02
    2eee:	93 81       	ldd	r25, Z+3	; 0x03
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	40 e2       	ldi	r20, 0x20	; 32
    2ef6:	51 e4       	ldi	r21, 0x41	; 65
    2ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	8e 01       	movw	r16, r28
    2f02:	01 5f       	subi	r16, 0xF1	; 241
    2f04:	1e 4f       	sbci	r17, 0xFE	; 254
    2f06:	bc 01       	movw	r22, r24
    2f08:	cd 01       	movw	r24, r26
    2f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	f8 01       	movw	r30, r16
    2f14:	91 83       	std	Z+1, r25	; 0x01
    2f16:	80 83       	st	Z, r24
    2f18:	1f c0       	rjmp	.+62     	; 0x2f58 <Stepper_Cfg+0x714>
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	e3 5f       	subi	r30, 0xF3	; 243
    2f1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f20:	89 e1       	ldi	r24, 0x19	; 25
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	91 83       	std	Z+1, r25	; 0x01
    2f26:	80 83       	st	Z, r24
    2f28:	fe 01       	movw	r30, r28
    2f2a:	e3 5f       	subi	r30, 0xF3	; 243
    2f2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2e:	80 81       	ld	r24, Z
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	01 97       	sbiw	r24, 0x01	; 1
    2f34:	f1 f7       	brne	.-4      	; 0x2f32 <Stepper_Cfg+0x6ee>
    2f36:	fe 01       	movw	r30, r28
    2f38:	e3 5f       	subi	r30, 0xF3	; 243
    2f3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3c:	91 83       	std	Z+1, r25	; 0x01
    2f3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f40:	de 01       	movw	r26, r28
    2f42:	a1 5f       	subi	r26, 0xF1	; 241
    2f44:	be 4f       	sbci	r27, 0xFE	; 254
    2f46:	fe 01       	movw	r30, r28
    2f48:	e1 5f       	subi	r30, 0xF1	; 241
    2f4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f4c:	80 81       	ld	r24, Z
    2f4e:	91 81       	ldd	r25, Z+1	; 0x01
    2f50:	01 97       	sbiw	r24, 0x01	; 1
    2f52:	11 96       	adiw	r26, 0x01	; 1
    2f54:	9c 93       	st	X, r25
    2f56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f58:	fe 01       	movw	r30, r28
    2f5a:	e1 5f       	subi	r30, 0xF1	; 241
    2f5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f5e:	80 81       	ld	r24, Z
    2f60:	91 81       	ldd	r25, Z+1	; 0x01
    2f62:	00 97       	sbiw	r24, 0x00	; 0
    2f64:	d1 f6       	brne	.-76     	; 0x2f1a <Stepper_Cfg+0x6d6>
    2f66:	0c 94 c8 26 	jmp	0x4d90	; 0x4d90 <Stepper_Cfg+0x254c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f6a:	8e 01       	movw	r16, r28
    2f6c:	01 5f       	subi	r16, 0xF1	; 241
    2f6e:	1e 4f       	sbci	r17, 0xFE	; 254
    2f70:	fe 01       	movw	r30, r28
    2f72:	ef 5e       	subi	r30, 0xEF	; 239
    2f74:	fe 4f       	sbci	r31, 0xFE	; 254
    2f76:	60 81       	ld	r22, Z
    2f78:	71 81       	ldd	r23, Z+1	; 0x01
    2f7a:	82 81       	ldd	r24, Z+2	; 0x02
    2f7c:	93 81       	ldd	r25, Z+3	; 0x03
    2f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	f8 01       	movw	r30, r16
    2f88:	91 83       	std	Z+1, r25	; 0x01
    2f8a:	80 83       	st	Z, r24
    2f8c:	de 01       	movw	r26, r28
    2f8e:	a5 5f       	subi	r26, 0xF5	; 245
    2f90:	be 4f       	sbci	r27, 0xFE	; 254
    2f92:	fe 01       	movw	r30, r28
    2f94:	e1 5f       	subi	r30, 0xF1	; 241
    2f96:	fe 4f       	sbci	r31, 0xFE	; 254
    2f98:	80 81       	ld	r24, Z
    2f9a:	91 81       	ldd	r25, Z+1	; 0x01
    2f9c:	11 96       	adiw	r26, 0x01	; 1
    2f9e:	9c 93       	st	X, r25
    2fa0:	8e 93       	st	-X, r24
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e5 5f       	subi	r30, 0xF5	; 245
    2fa6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa8:	80 81       	ld	r24, Z
    2faa:	91 81       	ldd	r25, Z+1	; 0x01
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	f1 f7       	brne	.-4      	; 0x2fac <Stepper_Cfg+0x768>
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	e5 5f       	subi	r30, 0xF5	; 245
    2fb4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb6:	91 83       	std	Z+1, r25	; 0x01
    2fb8:	80 83       	st	Z, r24
    2fba:	0c 94 c8 26 	jmp	0x4d90	; 0x4d90 <Stepper_Cfg+0x254c>
		break;

case HIGH_NIPPLE:
	DIO_write(mport,DIO_PIN4 , DIO_HIGH);
    2fbe:	80 91 48 03 	lds	r24, 0x0348
    2fc2:	64 e0       	ldi	r22, 0x04	; 4
    2fc4:	41 e0       	ldi	r20, 0x01	; 1
    2fc6:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN5 , DIO_LOW);
    2fca:	80 91 48 03 	lds	r24, 0x0348
    2fce:	65 e0       	ldi	r22, 0x05	; 5
    2fd0:	40 e0       	ldi	r20, 0x00	; 0
    2fd2:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN6 , DIO_LOW);
    2fd6:	80 91 48 03 	lds	r24, 0x0348
    2fda:	66 e0       	ldi	r22, 0x06	; 6
    2fdc:	40 e0       	ldi	r20, 0x00	; 0
    2fde:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN7 , DIO_LOW);
    2fe2:	80 91 48 03 	lds	r24, 0x0348
    2fe6:	67 e0       	ldi	r22, 0x07	; 7
    2fe8:	40 e0       	ldi	r20, 0x00	; 0
    2fea:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>

	_delay_ms(speed);
    2fee:	fe 01       	movw	r30, r28
    2ff0:	ed 5b       	subi	r30, 0xBD	; 189
    2ff2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ff4:	80 81       	ld	r24, Z
    2ff6:	88 2f       	mov	r24, r24
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	a0 e0       	ldi	r26, 0x00	; 0
    2ffc:	b0 e0       	ldi	r27, 0x00	; 0
    2ffe:	bc 01       	movw	r22, r24
    3000:	cd 01       	movw	r24, r26
    3002:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	fe 01       	movw	r30, r28
    300c:	e9 5f       	subi	r30, 0xF9	; 249
    300e:	fe 4f       	sbci	r31, 0xFE	; 254
    3010:	80 83       	st	Z, r24
    3012:	91 83       	std	Z+1, r25	; 0x01
    3014:	a2 83       	std	Z+2, r26	; 0x02
    3016:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3018:	8e 01       	movw	r16, r28
    301a:	0d 5f       	subi	r16, 0xFD	; 253
    301c:	1e 4f       	sbci	r17, 0xFE	; 254
    301e:	fe 01       	movw	r30, r28
    3020:	e9 5f       	subi	r30, 0xF9	; 249
    3022:	fe 4f       	sbci	r31, 0xFE	; 254
    3024:	60 81       	ld	r22, Z
    3026:	71 81       	ldd	r23, Z+1	; 0x01
    3028:	82 81       	ldd	r24, Z+2	; 0x02
    302a:	93 81       	ldd	r25, Z+3	; 0x03
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	4a e7       	ldi	r20, 0x7A	; 122
    3032:	53 e4       	ldi	r21, 0x43	; 67
    3034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3038:	dc 01       	movw	r26, r24
    303a:	cb 01       	movw	r24, r22
    303c:	f8 01       	movw	r30, r16
    303e:	80 83       	st	Z, r24
    3040:	91 83       	std	Z+1, r25	; 0x01
    3042:	a2 83       	std	Z+2, r26	; 0x02
    3044:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3046:	fe 01       	movw	r30, r28
    3048:	ed 5f       	subi	r30, 0xFD	; 253
    304a:	fe 4f       	sbci	r31, 0xFE	; 254
    304c:	60 81       	ld	r22, Z
    304e:	71 81       	ldd	r23, Z+1	; 0x01
    3050:	82 81       	ldd	r24, Z+2	; 0x02
    3052:	93 81       	ldd	r25, Z+3	; 0x03
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	40 e8       	ldi	r20, 0x80	; 128
    305a:	5f e3       	ldi	r21, 0x3F	; 63
    305c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3060:	88 23       	and	r24, r24
    3062:	44 f4       	brge	.+16     	; 0x3074 <Stepper_Cfg+0x830>
		__ticks = 1;
    3064:	fe 01       	movw	r30, r28
    3066:	ef 5f       	subi	r30, 0xFF	; 255
    3068:	fe 4f       	sbci	r31, 0xFE	; 254
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	91 83       	std	Z+1, r25	; 0x01
    3070:	80 83       	st	Z, r24
    3072:	64 c0       	rjmp	.+200    	; 0x313c <Stepper_Cfg+0x8f8>
	else if (__tmp > 65535)
    3074:	fe 01       	movw	r30, r28
    3076:	ed 5f       	subi	r30, 0xFD	; 253
    3078:	fe 4f       	sbci	r31, 0xFE	; 254
    307a:	60 81       	ld	r22, Z
    307c:	71 81       	ldd	r23, Z+1	; 0x01
    307e:	82 81       	ldd	r24, Z+2	; 0x02
    3080:	93 81       	ldd	r25, Z+3	; 0x03
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	3f ef       	ldi	r19, 0xFF	; 255
    3086:	4f e7       	ldi	r20, 0x7F	; 127
    3088:	57 e4       	ldi	r21, 0x47	; 71
    308a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    308e:	18 16       	cp	r1, r24
    3090:	0c f0       	brlt	.+2      	; 0x3094 <Stepper_Cfg+0x850>
    3092:	43 c0       	rjmp	.+134    	; 0x311a <Stepper_Cfg+0x8d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3094:	fe 01       	movw	r30, r28
    3096:	e9 5f       	subi	r30, 0xF9	; 249
    3098:	fe 4f       	sbci	r31, 0xFE	; 254
    309a:	60 81       	ld	r22, Z
    309c:	71 81       	ldd	r23, Z+1	; 0x01
    309e:	82 81       	ldd	r24, Z+2	; 0x02
    30a0:	93 81       	ldd	r25, Z+3	; 0x03
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	40 e2       	ldi	r20, 0x20	; 32
    30a8:	51 e4       	ldi	r21, 0x41	; 65
    30aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22
    30b2:	8e 01       	movw	r16, r28
    30b4:	0f 5f       	subi	r16, 0xFF	; 255
    30b6:	1e 4f       	sbci	r17, 0xFE	; 254
    30b8:	bc 01       	movw	r22, r24
    30ba:	cd 01       	movw	r24, r26
    30bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	f8 01       	movw	r30, r16
    30c6:	91 83       	std	Z+1, r25	; 0x01
    30c8:	80 83       	st	Z, r24
    30ca:	1f c0       	rjmp	.+62     	; 0x310a <Stepper_Cfg+0x8c6>
    30cc:	fe 01       	movw	r30, r28
    30ce:	e1 50       	subi	r30, 0x01	; 1
    30d0:	ff 4f       	sbci	r31, 0xFF	; 255
    30d2:	89 e1       	ldi	r24, 0x19	; 25
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	91 83       	std	Z+1, r25	; 0x01
    30d8:	80 83       	st	Z, r24
    30da:	fe 01       	movw	r30, r28
    30dc:	e1 50       	subi	r30, 0x01	; 1
    30de:	ff 4f       	sbci	r31, 0xFF	; 255
    30e0:	80 81       	ld	r24, Z
    30e2:	91 81       	ldd	r25, Z+1	; 0x01
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	f1 f7       	brne	.-4      	; 0x30e4 <Stepper_Cfg+0x8a0>
    30e8:	fe 01       	movw	r30, r28
    30ea:	e1 50       	subi	r30, 0x01	; 1
    30ec:	ff 4f       	sbci	r31, 0xFF	; 255
    30ee:	91 83       	std	Z+1, r25	; 0x01
    30f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f2:	de 01       	movw	r26, r28
    30f4:	af 5f       	subi	r26, 0xFF	; 255
    30f6:	be 4f       	sbci	r27, 0xFE	; 254
    30f8:	fe 01       	movw	r30, r28
    30fa:	ef 5f       	subi	r30, 0xFF	; 255
    30fc:	fe 4f       	sbci	r31, 0xFE	; 254
    30fe:	80 81       	ld	r24, Z
    3100:	91 81       	ldd	r25, Z+1	; 0x01
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	11 96       	adiw	r26, 0x01	; 1
    3106:	9c 93       	st	X, r25
    3108:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    310a:	fe 01       	movw	r30, r28
    310c:	ef 5f       	subi	r30, 0xFF	; 255
    310e:	fe 4f       	sbci	r31, 0xFE	; 254
    3110:	80 81       	ld	r24, Z
    3112:	91 81       	ldd	r25, Z+1	; 0x01
    3114:	00 97       	sbiw	r24, 0x00	; 0
    3116:	d1 f6       	brne	.-76     	; 0x30cc <Stepper_Cfg+0x888>
    3118:	27 c0       	rjmp	.+78     	; 0x3168 <Stepper_Cfg+0x924>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    311a:	8e 01       	movw	r16, r28
    311c:	0f 5f       	subi	r16, 0xFF	; 255
    311e:	1e 4f       	sbci	r17, 0xFE	; 254
    3120:	fe 01       	movw	r30, r28
    3122:	ed 5f       	subi	r30, 0xFD	; 253
    3124:	fe 4f       	sbci	r31, 0xFE	; 254
    3126:	60 81       	ld	r22, Z
    3128:	71 81       	ldd	r23, Z+1	; 0x01
    312a:	82 81       	ldd	r24, Z+2	; 0x02
    312c:	93 81       	ldd	r25, Z+3	; 0x03
    312e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	f8 01       	movw	r30, r16
    3138:	91 83       	std	Z+1, r25	; 0x01
    313a:	80 83       	st	Z, r24
    313c:	de 01       	movw	r26, r28
    313e:	a3 50       	subi	r26, 0x03	; 3
    3140:	bf 4f       	sbci	r27, 0xFF	; 255
    3142:	fe 01       	movw	r30, r28
    3144:	ef 5f       	subi	r30, 0xFF	; 255
    3146:	fe 4f       	sbci	r31, 0xFE	; 254
    3148:	80 81       	ld	r24, Z
    314a:	91 81       	ldd	r25, Z+1	; 0x01
    314c:	8d 93       	st	X+, r24
    314e:	9c 93       	st	X, r25
    3150:	fe 01       	movw	r30, r28
    3152:	e3 50       	subi	r30, 0x03	; 3
    3154:	ff 4f       	sbci	r31, 0xFF	; 255
    3156:	80 81       	ld	r24, Z
    3158:	91 81       	ldd	r25, Z+1	; 0x01
    315a:	01 97       	sbiw	r24, 0x01	; 1
    315c:	f1 f7       	brne	.-4      	; 0x315a <Stepper_Cfg+0x916>
    315e:	fe 01       	movw	r30, r28
    3160:	e3 50       	subi	r30, 0x03	; 3
    3162:	ff 4f       	sbci	r31, 0xFF	; 255
    3164:	91 83       	std	Z+1, r25	; 0x01
    3166:	80 83       	st	Z, r24
	DIO_write(mport,DIO_PIN4 , DIO_LOW);
    3168:	80 91 48 03 	lds	r24, 0x0348
    316c:	64 e0       	ldi	r22, 0x04	; 4
    316e:	40 e0       	ldi	r20, 0x00	; 0
    3170:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN5 , DIO_HIGH);
    3174:	80 91 48 03 	lds	r24, 0x0348
    3178:	65 e0       	ldi	r22, 0x05	; 5
    317a:	41 e0       	ldi	r20, 0x01	; 1
    317c:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN6 , DIO_LOW);
    3180:	80 91 48 03 	lds	r24, 0x0348
    3184:	66 e0       	ldi	r22, 0x06	; 6
    3186:	40 e0       	ldi	r20, 0x00	; 0
    3188:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN7 , DIO_LOW);
    318c:	80 91 48 03 	lds	r24, 0x0348
    3190:	67 e0       	ldi	r22, 0x07	; 7
    3192:	40 e0       	ldi	r20, 0x00	; 0
    3194:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	_delay_ms(speed);
    3198:	fe 01       	movw	r30, r28
    319a:	ed 5b       	subi	r30, 0xBD	; 189
    319c:	fe 4f       	sbci	r31, 0xFE	; 254
    319e:	80 81       	ld	r24, Z
    31a0:	88 2f       	mov	r24, r24
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	a0 e0       	ldi	r26, 0x00	; 0
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	bc 01       	movw	r22, r24
    31aa:	cd 01       	movw	r24, r26
    31ac:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	fe 01       	movw	r30, r28
    31b6:	e7 50       	subi	r30, 0x07	; 7
    31b8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ba:	80 83       	st	Z, r24
    31bc:	91 83       	std	Z+1, r25	; 0x01
    31be:	a2 83       	std	Z+2, r26	; 0x02
    31c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c2:	8e 01       	movw	r16, r28
    31c4:	0b 50       	subi	r16, 0x0B	; 11
    31c6:	1f 4f       	sbci	r17, 0xFF	; 255
    31c8:	fe 01       	movw	r30, r28
    31ca:	e7 50       	subi	r30, 0x07	; 7
    31cc:	ff 4f       	sbci	r31, 0xFF	; 255
    31ce:	60 81       	ld	r22, Z
    31d0:	71 81       	ldd	r23, Z+1	; 0x01
    31d2:	82 81       	ldd	r24, Z+2	; 0x02
    31d4:	93 81       	ldd	r25, Z+3	; 0x03
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	4a e7       	ldi	r20, 0x7A	; 122
    31dc:	53 e4       	ldi	r21, 0x43	; 67
    31de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	f8 01       	movw	r30, r16
    31e8:	80 83       	st	Z, r24
    31ea:	91 83       	std	Z+1, r25	; 0x01
    31ec:	a2 83       	std	Z+2, r26	; 0x02
    31ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31f0:	fe 01       	movw	r30, r28
    31f2:	eb 50       	subi	r30, 0x0B	; 11
    31f4:	ff 4f       	sbci	r31, 0xFF	; 255
    31f6:	60 81       	ld	r22, Z
    31f8:	71 81       	ldd	r23, Z+1	; 0x01
    31fa:	82 81       	ldd	r24, Z+2	; 0x02
    31fc:	93 81       	ldd	r25, Z+3	; 0x03
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	40 e8       	ldi	r20, 0x80	; 128
    3204:	5f e3       	ldi	r21, 0x3F	; 63
    3206:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    320a:	88 23       	and	r24, r24
    320c:	44 f4       	brge	.+16     	; 0x321e <Stepper_Cfg+0x9da>
		__ticks = 1;
    320e:	fe 01       	movw	r30, r28
    3210:	ed 50       	subi	r30, 0x0D	; 13
    3212:	ff 4f       	sbci	r31, 0xFF	; 255
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	91 83       	std	Z+1, r25	; 0x01
    321a:	80 83       	st	Z, r24
    321c:	64 c0       	rjmp	.+200    	; 0x32e6 <Stepper_Cfg+0xaa2>
	else if (__tmp > 65535)
    321e:	fe 01       	movw	r30, r28
    3220:	eb 50       	subi	r30, 0x0B	; 11
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	60 81       	ld	r22, Z
    3226:	71 81       	ldd	r23, Z+1	; 0x01
    3228:	82 81       	ldd	r24, Z+2	; 0x02
    322a:	93 81       	ldd	r25, Z+3	; 0x03
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	3f ef       	ldi	r19, 0xFF	; 255
    3230:	4f e7       	ldi	r20, 0x7F	; 127
    3232:	57 e4       	ldi	r21, 0x47	; 71
    3234:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3238:	18 16       	cp	r1, r24
    323a:	0c f0       	brlt	.+2      	; 0x323e <Stepper_Cfg+0x9fa>
    323c:	43 c0       	rjmp	.+134    	; 0x32c4 <Stepper_Cfg+0xa80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    323e:	fe 01       	movw	r30, r28
    3240:	e7 50       	subi	r30, 0x07	; 7
    3242:	ff 4f       	sbci	r31, 0xFF	; 255
    3244:	60 81       	ld	r22, Z
    3246:	71 81       	ldd	r23, Z+1	; 0x01
    3248:	82 81       	ldd	r24, Z+2	; 0x02
    324a:	93 81       	ldd	r25, Z+3	; 0x03
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	40 e2       	ldi	r20, 0x20	; 32
    3252:	51 e4       	ldi	r21, 0x41	; 65
    3254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	8e 01       	movw	r16, r28
    325e:	0d 50       	subi	r16, 0x0D	; 13
    3260:	1f 4f       	sbci	r17, 0xFF	; 255
    3262:	bc 01       	movw	r22, r24
    3264:	cd 01       	movw	r24, r26
    3266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	f8 01       	movw	r30, r16
    3270:	91 83       	std	Z+1, r25	; 0x01
    3272:	80 83       	st	Z, r24
    3274:	1f c0       	rjmp	.+62     	; 0x32b4 <Stepper_Cfg+0xa70>
    3276:	fe 01       	movw	r30, r28
    3278:	ef 50       	subi	r30, 0x0F	; 15
    327a:	ff 4f       	sbci	r31, 0xFF	; 255
    327c:	89 e1       	ldi	r24, 0x19	; 25
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	91 83       	std	Z+1, r25	; 0x01
    3282:	80 83       	st	Z, r24
    3284:	fe 01       	movw	r30, r28
    3286:	ef 50       	subi	r30, 0x0F	; 15
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	80 81       	ld	r24, Z
    328c:	91 81       	ldd	r25, Z+1	; 0x01
    328e:	01 97       	sbiw	r24, 0x01	; 1
    3290:	f1 f7       	brne	.-4      	; 0x328e <Stepper_Cfg+0xa4a>
    3292:	fe 01       	movw	r30, r28
    3294:	ef 50       	subi	r30, 0x0F	; 15
    3296:	ff 4f       	sbci	r31, 0xFF	; 255
    3298:	91 83       	std	Z+1, r25	; 0x01
    329a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329c:	de 01       	movw	r26, r28
    329e:	ad 50       	subi	r26, 0x0D	; 13
    32a0:	bf 4f       	sbci	r27, 0xFF	; 255
    32a2:	fe 01       	movw	r30, r28
    32a4:	ed 50       	subi	r30, 0x0D	; 13
    32a6:	ff 4f       	sbci	r31, 0xFF	; 255
    32a8:	80 81       	ld	r24, Z
    32aa:	91 81       	ldd	r25, Z+1	; 0x01
    32ac:	01 97       	sbiw	r24, 0x01	; 1
    32ae:	11 96       	adiw	r26, 0x01	; 1
    32b0:	9c 93       	st	X, r25
    32b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b4:	fe 01       	movw	r30, r28
    32b6:	ed 50       	subi	r30, 0x0D	; 13
    32b8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ba:	80 81       	ld	r24, Z
    32bc:	91 81       	ldd	r25, Z+1	; 0x01
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	d1 f6       	brne	.-76     	; 0x3276 <Stepper_Cfg+0xa32>
    32c2:	27 c0       	rjmp	.+78     	; 0x3312 <Stepper_Cfg+0xace>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c4:	8e 01       	movw	r16, r28
    32c6:	0d 50       	subi	r16, 0x0D	; 13
    32c8:	1f 4f       	sbci	r17, 0xFF	; 255
    32ca:	fe 01       	movw	r30, r28
    32cc:	eb 50       	subi	r30, 0x0B	; 11
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	60 81       	ld	r22, Z
    32d2:	71 81       	ldd	r23, Z+1	; 0x01
    32d4:	82 81       	ldd	r24, Z+2	; 0x02
    32d6:	93 81       	ldd	r25, Z+3	; 0x03
    32d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	f8 01       	movw	r30, r16
    32e2:	91 83       	std	Z+1, r25	; 0x01
    32e4:	80 83       	st	Z, r24
    32e6:	de 01       	movw	r26, r28
    32e8:	a1 51       	subi	r26, 0x11	; 17
    32ea:	bf 4f       	sbci	r27, 0xFF	; 255
    32ec:	fe 01       	movw	r30, r28
    32ee:	ed 50       	subi	r30, 0x0D	; 13
    32f0:	ff 4f       	sbci	r31, 0xFF	; 255
    32f2:	80 81       	ld	r24, Z
    32f4:	91 81       	ldd	r25, Z+1	; 0x01
    32f6:	8d 93       	st	X+, r24
    32f8:	9c 93       	st	X, r25
    32fa:	fe 01       	movw	r30, r28
    32fc:	e1 51       	subi	r30, 0x11	; 17
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	80 81       	ld	r24, Z
    3302:	91 81       	ldd	r25, Z+1	; 0x01
    3304:	01 97       	sbiw	r24, 0x01	; 1
    3306:	f1 f7       	brne	.-4      	; 0x3304 <Stepper_Cfg+0xac0>
    3308:	fe 01       	movw	r30, r28
    330a:	e1 51       	subi	r30, 0x11	; 17
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	91 83       	std	Z+1, r25	; 0x01
    3310:	80 83       	st	Z, r24
	DIO_write(mport,DIO_PIN4 , DIO_LOW);
    3312:	80 91 48 03 	lds	r24, 0x0348
    3316:	64 e0       	ldi	r22, 0x04	; 4
    3318:	40 e0       	ldi	r20, 0x00	; 0
    331a:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN5 , DIO_LOW);
    331e:	80 91 48 03 	lds	r24, 0x0348
    3322:	65 e0       	ldi	r22, 0x05	; 5
    3324:	40 e0       	ldi	r20, 0x00	; 0
    3326:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN6 , DIO_HIGH);
    332a:	80 91 48 03 	lds	r24, 0x0348
    332e:	66 e0       	ldi	r22, 0x06	; 6
    3330:	41 e0       	ldi	r20, 0x01	; 1
    3332:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN7 , DIO_LOW);
    3336:	80 91 48 03 	lds	r24, 0x0348
    333a:	67 e0       	ldi	r22, 0x07	; 7
    333c:	40 e0       	ldi	r20, 0x00	; 0
    333e:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	_delay_ms(speed);
    3342:	fe 01       	movw	r30, r28
    3344:	ed 5b       	subi	r30, 0xBD	; 189
    3346:	fe 4f       	sbci	r31, 0xFE	; 254
    3348:	80 81       	ld	r24, Z
    334a:	88 2f       	mov	r24, r24
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	a0 e0       	ldi	r26, 0x00	; 0
    3350:	b0 e0       	ldi	r27, 0x00	; 0
    3352:	bc 01       	movw	r22, r24
    3354:	cd 01       	movw	r24, r26
    3356:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	fe 01       	movw	r30, r28
    3360:	e5 51       	subi	r30, 0x15	; 21
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	80 83       	st	Z, r24
    3366:	91 83       	std	Z+1, r25	; 0x01
    3368:	a2 83       	std	Z+2, r26	; 0x02
    336a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    336c:	8e 01       	movw	r16, r28
    336e:	09 51       	subi	r16, 0x19	; 25
    3370:	1f 4f       	sbci	r17, 0xFF	; 255
    3372:	fe 01       	movw	r30, r28
    3374:	e5 51       	subi	r30, 0x15	; 21
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	60 81       	ld	r22, Z
    337a:	71 81       	ldd	r23, Z+1	; 0x01
    337c:	82 81       	ldd	r24, Z+2	; 0x02
    337e:	93 81       	ldd	r25, Z+3	; 0x03
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	4a e7       	ldi	r20, 0x7A	; 122
    3386:	53 e4       	ldi	r21, 0x43	; 67
    3388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	f8 01       	movw	r30, r16
    3392:	80 83       	st	Z, r24
    3394:	91 83       	std	Z+1, r25	; 0x01
    3396:	a2 83       	std	Z+2, r26	; 0x02
    3398:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    339a:	fe 01       	movw	r30, r28
    339c:	e9 51       	subi	r30, 0x19	; 25
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	60 81       	ld	r22, Z
    33a2:	71 81       	ldd	r23, Z+1	; 0x01
    33a4:	82 81       	ldd	r24, Z+2	; 0x02
    33a6:	93 81       	ldd	r25, Z+3	; 0x03
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	40 e8       	ldi	r20, 0x80	; 128
    33ae:	5f e3       	ldi	r21, 0x3F	; 63
    33b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33b4:	88 23       	and	r24, r24
    33b6:	44 f4       	brge	.+16     	; 0x33c8 <Stepper_Cfg+0xb84>
		__ticks = 1;
    33b8:	fe 01       	movw	r30, r28
    33ba:	eb 51       	subi	r30, 0x1B	; 27
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	91 83       	std	Z+1, r25	; 0x01
    33c4:	80 83       	st	Z, r24
    33c6:	64 c0       	rjmp	.+200    	; 0x3490 <Stepper_Cfg+0xc4c>
	else if (__tmp > 65535)
    33c8:	fe 01       	movw	r30, r28
    33ca:	e9 51       	subi	r30, 0x19	; 25
    33cc:	ff 4f       	sbci	r31, 0xFF	; 255
    33ce:	60 81       	ld	r22, Z
    33d0:	71 81       	ldd	r23, Z+1	; 0x01
    33d2:	82 81       	ldd	r24, Z+2	; 0x02
    33d4:	93 81       	ldd	r25, Z+3	; 0x03
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	3f ef       	ldi	r19, 0xFF	; 255
    33da:	4f e7       	ldi	r20, 0x7F	; 127
    33dc:	57 e4       	ldi	r21, 0x47	; 71
    33de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33e2:	18 16       	cp	r1, r24
    33e4:	0c f0       	brlt	.+2      	; 0x33e8 <Stepper_Cfg+0xba4>
    33e6:	43 c0       	rjmp	.+134    	; 0x346e <Stepper_Cfg+0xc2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e8:	fe 01       	movw	r30, r28
    33ea:	e5 51       	subi	r30, 0x15	; 21
    33ec:	ff 4f       	sbci	r31, 0xFF	; 255
    33ee:	60 81       	ld	r22, Z
    33f0:	71 81       	ldd	r23, Z+1	; 0x01
    33f2:	82 81       	ldd	r24, Z+2	; 0x02
    33f4:	93 81       	ldd	r25, Z+3	; 0x03
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	40 e2       	ldi	r20, 0x20	; 32
    33fc:	51 e4       	ldi	r21, 0x41	; 65
    33fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	8e 01       	movw	r16, r28
    3408:	0b 51       	subi	r16, 0x1B	; 27
    340a:	1f 4f       	sbci	r17, 0xFF	; 255
    340c:	bc 01       	movw	r22, r24
    340e:	cd 01       	movw	r24, r26
    3410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	f8 01       	movw	r30, r16
    341a:	91 83       	std	Z+1, r25	; 0x01
    341c:	80 83       	st	Z, r24
    341e:	1f c0       	rjmp	.+62     	; 0x345e <Stepper_Cfg+0xc1a>
    3420:	fe 01       	movw	r30, r28
    3422:	ed 51       	subi	r30, 0x1D	; 29
    3424:	ff 4f       	sbci	r31, 0xFF	; 255
    3426:	89 e1       	ldi	r24, 0x19	; 25
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	91 83       	std	Z+1, r25	; 0x01
    342c:	80 83       	st	Z, r24
    342e:	fe 01       	movw	r30, r28
    3430:	ed 51       	subi	r30, 0x1D	; 29
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	80 81       	ld	r24, Z
    3436:	91 81       	ldd	r25, Z+1	; 0x01
    3438:	01 97       	sbiw	r24, 0x01	; 1
    343a:	f1 f7       	brne	.-4      	; 0x3438 <Stepper_Cfg+0xbf4>
    343c:	fe 01       	movw	r30, r28
    343e:	ed 51       	subi	r30, 0x1D	; 29
    3440:	ff 4f       	sbci	r31, 0xFF	; 255
    3442:	91 83       	std	Z+1, r25	; 0x01
    3444:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3446:	de 01       	movw	r26, r28
    3448:	ab 51       	subi	r26, 0x1B	; 27
    344a:	bf 4f       	sbci	r27, 0xFF	; 255
    344c:	fe 01       	movw	r30, r28
    344e:	eb 51       	subi	r30, 0x1B	; 27
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	80 81       	ld	r24, Z
    3454:	91 81       	ldd	r25, Z+1	; 0x01
    3456:	01 97       	sbiw	r24, 0x01	; 1
    3458:	11 96       	adiw	r26, 0x01	; 1
    345a:	9c 93       	st	X, r25
    345c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    345e:	fe 01       	movw	r30, r28
    3460:	eb 51       	subi	r30, 0x1B	; 27
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	80 81       	ld	r24, Z
    3466:	91 81       	ldd	r25, Z+1	; 0x01
    3468:	00 97       	sbiw	r24, 0x00	; 0
    346a:	d1 f6       	brne	.-76     	; 0x3420 <Stepper_Cfg+0xbdc>
    346c:	27 c0       	rjmp	.+78     	; 0x34bc <Stepper_Cfg+0xc78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    346e:	8e 01       	movw	r16, r28
    3470:	0b 51       	subi	r16, 0x1B	; 27
    3472:	1f 4f       	sbci	r17, 0xFF	; 255
    3474:	fe 01       	movw	r30, r28
    3476:	e9 51       	subi	r30, 0x19	; 25
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	60 81       	ld	r22, Z
    347c:	71 81       	ldd	r23, Z+1	; 0x01
    347e:	82 81       	ldd	r24, Z+2	; 0x02
    3480:	93 81       	ldd	r25, Z+3	; 0x03
    3482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	f8 01       	movw	r30, r16
    348c:	91 83       	std	Z+1, r25	; 0x01
    348e:	80 83       	st	Z, r24
    3490:	de 01       	movw	r26, r28
    3492:	af 51       	subi	r26, 0x1F	; 31
    3494:	bf 4f       	sbci	r27, 0xFF	; 255
    3496:	fe 01       	movw	r30, r28
    3498:	eb 51       	subi	r30, 0x1B	; 27
    349a:	ff 4f       	sbci	r31, 0xFF	; 255
    349c:	80 81       	ld	r24, Z
    349e:	91 81       	ldd	r25, Z+1	; 0x01
    34a0:	8d 93       	st	X+, r24
    34a2:	9c 93       	st	X, r25
    34a4:	fe 01       	movw	r30, r28
    34a6:	ef 51       	subi	r30, 0x1F	; 31
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	80 81       	ld	r24, Z
    34ac:	91 81       	ldd	r25, Z+1	; 0x01
    34ae:	01 97       	sbiw	r24, 0x01	; 1
    34b0:	f1 f7       	brne	.-4      	; 0x34ae <Stepper_Cfg+0xc6a>
    34b2:	fe 01       	movw	r30, r28
    34b4:	ef 51       	subi	r30, 0x1F	; 31
    34b6:	ff 4f       	sbci	r31, 0xFF	; 255
    34b8:	91 83       	std	Z+1, r25	; 0x01
    34ba:	80 83       	st	Z, r24
	DIO_write(mport,DIO_PIN4 , DIO_LOW);
    34bc:	80 91 48 03 	lds	r24, 0x0348
    34c0:	64 e0       	ldi	r22, 0x04	; 4
    34c2:	40 e0       	ldi	r20, 0x00	; 0
    34c4:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN5 , DIO_LOW);
    34c8:	80 91 48 03 	lds	r24, 0x0348
    34cc:	65 e0       	ldi	r22, 0x05	; 5
    34ce:	40 e0       	ldi	r20, 0x00	; 0
    34d0:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN6 , DIO_LOW);
    34d4:	80 91 48 03 	lds	r24, 0x0348
    34d8:	66 e0       	ldi	r22, 0x06	; 6
    34da:	40 e0       	ldi	r20, 0x00	; 0
    34dc:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN7 , DIO_HIGH);
    34e0:	80 91 48 03 	lds	r24, 0x0348
    34e4:	67 e0       	ldi	r22, 0x07	; 7
    34e6:	41 e0       	ldi	r20, 0x01	; 1
    34e8:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>

	_delay_ms(speed);
    34ec:	fe 01       	movw	r30, r28
    34ee:	ed 5b       	subi	r30, 0xBD	; 189
    34f0:	fe 4f       	sbci	r31, 0xFE	; 254
    34f2:	80 81       	ld	r24, Z
    34f4:	88 2f       	mov	r24, r24
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	a0 e0       	ldi	r26, 0x00	; 0
    34fa:	b0 e0       	ldi	r27, 0x00	; 0
    34fc:	bc 01       	movw	r22, r24
    34fe:	cd 01       	movw	r24, r26
    3500:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3504:	dc 01       	movw	r26, r24
    3506:	cb 01       	movw	r24, r22
    3508:	fe 01       	movw	r30, r28
    350a:	e3 52       	subi	r30, 0x23	; 35
    350c:	ff 4f       	sbci	r31, 0xFF	; 255
    350e:	80 83       	st	Z, r24
    3510:	91 83       	std	Z+1, r25	; 0x01
    3512:	a2 83       	std	Z+2, r26	; 0x02
    3514:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3516:	8e 01       	movw	r16, r28
    3518:	07 52       	subi	r16, 0x27	; 39
    351a:	1f 4f       	sbci	r17, 0xFF	; 255
    351c:	fe 01       	movw	r30, r28
    351e:	e3 52       	subi	r30, 0x23	; 35
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	60 81       	ld	r22, Z
    3524:	71 81       	ldd	r23, Z+1	; 0x01
    3526:	82 81       	ldd	r24, Z+2	; 0x02
    3528:	93 81       	ldd	r25, Z+3	; 0x03
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	4a e7       	ldi	r20, 0x7A	; 122
    3530:	53 e4       	ldi	r21, 0x43	; 67
    3532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3536:	dc 01       	movw	r26, r24
    3538:	cb 01       	movw	r24, r22
    353a:	f8 01       	movw	r30, r16
    353c:	80 83       	st	Z, r24
    353e:	91 83       	std	Z+1, r25	; 0x01
    3540:	a2 83       	std	Z+2, r26	; 0x02
    3542:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3544:	fe 01       	movw	r30, r28
    3546:	e7 52       	subi	r30, 0x27	; 39
    3548:	ff 4f       	sbci	r31, 0xFF	; 255
    354a:	60 81       	ld	r22, Z
    354c:	71 81       	ldd	r23, Z+1	; 0x01
    354e:	82 81       	ldd	r24, Z+2	; 0x02
    3550:	93 81       	ldd	r25, Z+3	; 0x03
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	40 e8       	ldi	r20, 0x80	; 128
    3558:	5f e3       	ldi	r21, 0x3F	; 63
    355a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    355e:	88 23       	and	r24, r24
    3560:	44 f4       	brge	.+16     	; 0x3572 <Stepper_Cfg+0xd2e>
		__ticks = 1;
    3562:	fe 01       	movw	r30, r28
    3564:	e9 52       	subi	r30, 0x29	; 41
    3566:	ff 4f       	sbci	r31, 0xFF	; 255
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	91 83       	std	Z+1, r25	; 0x01
    356e:	80 83       	st	Z, r24
    3570:	65 c0       	rjmp	.+202    	; 0x363c <Stepper_Cfg+0xdf8>
	else if (__tmp > 65535)
    3572:	fe 01       	movw	r30, r28
    3574:	e7 52       	subi	r30, 0x27	; 39
    3576:	ff 4f       	sbci	r31, 0xFF	; 255
    3578:	60 81       	ld	r22, Z
    357a:	71 81       	ldd	r23, Z+1	; 0x01
    357c:	82 81       	ldd	r24, Z+2	; 0x02
    357e:	93 81       	ldd	r25, Z+3	; 0x03
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	3f ef       	ldi	r19, 0xFF	; 255
    3584:	4f e7       	ldi	r20, 0x7F	; 127
    3586:	57 e4       	ldi	r21, 0x47	; 71
    3588:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    358c:	18 16       	cp	r1, r24
    358e:	0c f0       	brlt	.+2      	; 0x3592 <Stepper_Cfg+0xd4e>
    3590:	44 c0       	rjmp	.+136    	; 0x361a <Stepper_Cfg+0xdd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3592:	fe 01       	movw	r30, r28
    3594:	e3 52       	subi	r30, 0x23	; 35
    3596:	ff 4f       	sbci	r31, 0xFF	; 255
    3598:	60 81       	ld	r22, Z
    359a:	71 81       	ldd	r23, Z+1	; 0x01
    359c:	82 81       	ldd	r24, Z+2	; 0x02
    359e:	93 81       	ldd	r25, Z+3	; 0x03
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	40 e2       	ldi	r20, 0x20	; 32
    35a6:	51 e4       	ldi	r21, 0x41	; 65
    35a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	8e 01       	movw	r16, r28
    35b2:	09 52       	subi	r16, 0x29	; 41
    35b4:	1f 4f       	sbci	r17, 0xFF	; 255
    35b6:	bc 01       	movw	r22, r24
    35b8:	cd 01       	movw	r24, r26
    35ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	f8 01       	movw	r30, r16
    35c4:	91 83       	std	Z+1, r25	; 0x01
    35c6:	80 83       	st	Z, r24
    35c8:	1f c0       	rjmp	.+62     	; 0x3608 <Stepper_Cfg+0xdc4>
    35ca:	fe 01       	movw	r30, r28
    35cc:	eb 52       	subi	r30, 0x2B	; 43
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	89 e1       	ldi	r24, 0x19	; 25
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	91 83       	std	Z+1, r25	; 0x01
    35d6:	80 83       	st	Z, r24
    35d8:	fe 01       	movw	r30, r28
    35da:	eb 52       	subi	r30, 0x2B	; 43
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	80 81       	ld	r24, Z
    35e0:	91 81       	ldd	r25, Z+1	; 0x01
    35e2:	01 97       	sbiw	r24, 0x01	; 1
    35e4:	f1 f7       	brne	.-4      	; 0x35e2 <Stepper_Cfg+0xd9e>
    35e6:	fe 01       	movw	r30, r28
    35e8:	eb 52       	subi	r30, 0x2B	; 43
    35ea:	ff 4f       	sbci	r31, 0xFF	; 255
    35ec:	91 83       	std	Z+1, r25	; 0x01
    35ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35f0:	de 01       	movw	r26, r28
    35f2:	a9 52       	subi	r26, 0x29	; 41
    35f4:	bf 4f       	sbci	r27, 0xFF	; 255
    35f6:	fe 01       	movw	r30, r28
    35f8:	e9 52       	subi	r30, 0x29	; 41
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
    35fc:	80 81       	ld	r24, Z
    35fe:	91 81       	ldd	r25, Z+1	; 0x01
    3600:	01 97       	sbiw	r24, 0x01	; 1
    3602:	11 96       	adiw	r26, 0x01	; 1
    3604:	9c 93       	st	X, r25
    3606:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3608:	fe 01       	movw	r30, r28
    360a:	e9 52       	subi	r30, 0x29	; 41
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	80 81       	ld	r24, Z
    3610:	91 81       	ldd	r25, Z+1	; 0x01
    3612:	00 97       	sbiw	r24, 0x00	; 0
    3614:	d1 f6       	brne	.-76     	; 0x35ca <Stepper_Cfg+0xd86>
    3616:	0c 94 c8 26 	jmp	0x4d90	; 0x4d90 <Stepper_Cfg+0x254c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    361a:	8e 01       	movw	r16, r28
    361c:	09 52       	subi	r16, 0x29	; 41
    361e:	1f 4f       	sbci	r17, 0xFF	; 255
    3620:	fe 01       	movw	r30, r28
    3622:	e7 52       	subi	r30, 0x27	; 39
    3624:	ff 4f       	sbci	r31, 0xFF	; 255
    3626:	60 81       	ld	r22, Z
    3628:	71 81       	ldd	r23, Z+1	; 0x01
    362a:	82 81       	ldd	r24, Z+2	; 0x02
    362c:	93 81       	ldd	r25, Z+3	; 0x03
    362e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	f8 01       	movw	r30, r16
    3638:	91 83       	std	Z+1, r25	; 0x01
    363a:	80 83       	st	Z, r24
    363c:	de 01       	movw	r26, r28
    363e:	ad 52       	subi	r26, 0x2D	; 45
    3640:	bf 4f       	sbci	r27, 0xFF	; 255
    3642:	fe 01       	movw	r30, r28
    3644:	e9 52       	subi	r30, 0x29	; 41
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	80 81       	ld	r24, Z
    364a:	91 81       	ldd	r25, Z+1	; 0x01
    364c:	11 96       	adiw	r26, 0x01	; 1
    364e:	9c 93       	st	X, r25
    3650:	8e 93       	st	-X, r24
    3652:	fe 01       	movw	r30, r28
    3654:	ed 52       	subi	r30, 0x2D	; 45
    3656:	ff 4f       	sbci	r31, 0xFF	; 255
    3658:	80 81       	ld	r24, Z
    365a:	91 81       	ldd	r25, Z+1	; 0x01
    365c:	01 97       	sbiw	r24, 0x01	; 1
    365e:	f1 f7       	brne	.-4      	; 0x365c <Stepper_Cfg+0xe18>
    3660:	fe 01       	movw	r30, r28
    3662:	ed 52       	subi	r30, 0x2D	; 45
    3664:	ff 4f       	sbci	r31, 0xFF	; 255
    3666:	91 83       	std	Z+1, r25	; 0x01
    3668:	80 83       	st	Z, r24
    366a:	0c 94 c8 26 	jmp	0x4d90	; 0x4d90 <Stepper_Cfg+0x254c>

	break;
case LOW_NIPPLE:
	DIO_write(mport,DIO_PIN0 , DIO_HIGH);
    366e:	80 91 48 03 	lds	r24, 0x0348
    3672:	60 e0       	ldi	r22, 0x00	; 0
    3674:	41 e0       	ldi	r20, 0x01	; 1
    3676:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN1 , DIO_LOW);
    367a:	80 91 48 03 	lds	r24, 0x0348
    367e:	61 e0       	ldi	r22, 0x01	; 1
    3680:	40 e0       	ldi	r20, 0x00	; 0
    3682:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN2 , DIO_LOW);
    3686:	80 91 48 03 	lds	r24, 0x0348
    368a:	62 e0       	ldi	r22, 0x02	; 2
    368c:	40 e0       	ldi	r20, 0x00	; 0
    368e:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN3 , DIO_LOW);
    3692:	80 91 48 03 	lds	r24, 0x0348
    3696:	63 e0       	ldi	r22, 0x03	; 3
    3698:	40 e0       	ldi	r20, 0x00	; 0
    369a:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>

	_delay_ms(speed);
    369e:	fe 01       	movw	r30, r28
    36a0:	ed 5b       	subi	r30, 0xBD	; 189
    36a2:	fe 4f       	sbci	r31, 0xFE	; 254
    36a4:	80 81       	ld	r24, Z
    36a6:	88 2f       	mov	r24, r24
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	a0 e0       	ldi	r26, 0x00	; 0
    36ac:	b0 e0       	ldi	r27, 0x00	; 0
    36ae:	bc 01       	movw	r22, r24
    36b0:	cd 01       	movw	r24, r26
    36b2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	fe 01       	movw	r30, r28
    36bc:	e1 53       	subi	r30, 0x31	; 49
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	80 83       	st	Z, r24
    36c2:	91 83       	std	Z+1, r25	; 0x01
    36c4:	a2 83       	std	Z+2, r26	; 0x02
    36c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c8:	8e 01       	movw	r16, r28
    36ca:	05 53       	subi	r16, 0x35	; 53
    36cc:	1f 4f       	sbci	r17, 0xFF	; 255
    36ce:	fe 01       	movw	r30, r28
    36d0:	e1 53       	subi	r30, 0x31	; 49
    36d2:	ff 4f       	sbci	r31, 0xFF	; 255
    36d4:	60 81       	ld	r22, Z
    36d6:	71 81       	ldd	r23, Z+1	; 0x01
    36d8:	82 81       	ldd	r24, Z+2	; 0x02
    36da:	93 81       	ldd	r25, Z+3	; 0x03
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	4a e7       	ldi	r20, 0x7A	; 122
    36e2:	53 e4       	ldi	r21, 0x43	; 67
    36e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e8:	dc 01       	movw	r26, r24
    36ea:	cb 01       	movw	r24, r22
    36ec:	f8 01       	movw	r30, r16
    36ee:	80 83       	st	Z, r24
    36f0:	91 83       	std	Z+1, r25	; 0x01
    36f2:	a2 83       	std	Z+2, r26	; 0x02
    36f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36f6:	fe 01       	movw	r30, r28
    36f8:	e5 53       	subi	r30, 0x35	; 53
    36fa:	ff 4f       	sbci	r31, 0xFF	; 255
    36fc:	60 81       	ld	r22, Z
    36fe:	71 81       	ldd	r23, Z+1	; 0x01
    3700:	82 81       	ldd	r24, Z+2	; 0x02
    3702:	93 81       	ldd	r25, Z+3	; 0x03
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	40 e8       	ldi	r20, 0x80	; 128
    370a:	5f e3       	ldi	r21, 0x3F	; 63
    370c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3710:	88 23       	and	r24, r24
    3712:	44 f4       	brge	.+16     	; 0x3724 <Stepper_Cfg+0xee0>
		__ticks = 1;
    3714:	fe 01       	movw	r30, r28
    3716:	e7 53       	subi	r30, 0x37	; 55
    3718:	ff 4f       	sbci	r31, 0xFF	; 255
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	80 83       	st	Z, r24
    3722:	64 c0       	rjmp	.+200    	; 0x37ec <Stepper_Cfg+0xfa8>
	else if (__tmp > 65535)
    3724:	fe 01       	movw	r30, r28
    3726:	e5 53       	subi	r30, 0x35	; 53
    3728:	ff 4f       	sbci	r31, 0xFF	; 255
    372a:	60 81       	ld	r22, Z
    372c:	71 81       	ldd	r23, Z+1	; 0x01
    372e:	82 81       	ldd	r24, Z+2	; 0x02
    3730:	93 81       	ldd	r25, Z+3	; 0x03
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	3f ef       	ldi	r19, 0xFF	; 255
    3736:	4f e7       	ldi	r20, 0x7F	; 127
    3738:	57 e4       	ldi	r21, 0x47	; 71
    373a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    373e:	18 16       	cp	r1, r24
    3740:	0c f0       	brlt	.+2      	; 0x3744 <Stepper_Cfg+0xf00>
    3742:	43 c0       	rjmp	.+134    	; 0x37ca <Stepper_Cfg+0xf86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3744:	fe 01       	movw	r30, r28
    3746:	e1 53       	subi	r30, 0x31	; 49
    3748:	ff 4f       	sbci	r31, 0xFF	; 255
    374a:	60 81       	ld	r22, Z
    374c:	71 81       	ldd	r23, Z+1	; 0x01
    374e:	82 81       	ldd	r24, Z+2	; 0x02
    3750:	93 81       	ldd	r25, Z+3	; 0x03
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	40 e2       	ldi	r20, 0x20	; 32
    3758:	51 e4       	ldi	r21, 0x41	; 65
    375a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22
    3762:	8e 01       	movw	r16, r28
    3764:	07 53       	subi	r16, 0x37	; 55
    3766:	1f 4f       	sbci	r17, 0xFF	; 255
    3768:	bc 01       	movw	r22, r24
    376a:	cd 01       	movw	r24, r26
    376c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	f8 01       	movw	r30, r16
    3776:	91 83       	std	Z+1, r25	; 0x01
    3778:	80 83       	st	Z, r24
    377a:	1f c0       	rjmp	.+62     	; 0x37ba <Stepper_Cfg+0xf76>
    377c:	fe 01       	movw	r30, r28
    377e:	e9 53       	subi	r30, 0x39	; 57
    3780:	ff 4f       	sbci	r31, 0xFF	; 255
    3782:	89 e1       	ldi	r24, 0x19	; 25
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	91 83       	std	Z+1, r25	; 0x01
    3788:	80 83       	st	Z, r24
    378a:	fe 01       	movw	r30, r28
    378c:	e9 53       	subi	r30, 0x39	; 57
    378e:	ff 4f       	sbci	r31, 0xFF	; 255
    3790:	80 81       	ld	r24, Z
    3792:	91 81       	ldd	r25, Z+1	; 0x01
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	f1 f7       	brne	.-4      	; 0x3794 <Stepper_Cfg+0xf50>
    3798:	fe 01       	movw	r30, r28
    379a:	e9 53       	subi	r30, 0x39	; 57
    379c:	ff 4f       	sbci	r31, 0xFF	; 255
    379e:	91 83       	std	Z+1, r25	; 0x01
    37a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37a2:	de 01       	movw	r26, r28
    37a4:	a7 53       	subi	r26, 0x37	; 55
    37a6:	bf 4f       	sbci	r27, 0xFF	; 255
    37a8:	fe 01       	movw	r30, r28
    37aa:	e7 53       	subi	r30, 0x37	; 55
    37ac:	ff 4f       	sbci	r31, 0xFF	; 255
    37ae:	80 81       	ld	r24, Z
    37b0:	91 81       	ldd	r25, Z+1	; 0x01
    37b2:	01 97       	sbiw	r24, 0x01	; 1
    37b4:	11 96       	adiw	r26, 0x01	; 1
    37b6:	9c 93       	st	X, r25
    37b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ba:	fe 01       	movw	r30, r28
    37bc:	e7 53       	subi	r30, 0x37	; 55
    37be:	ff 4f       	sbci	r31, 0xFF	; 255
    37c0:	80 81       	ld	r24, Z
    37c2:	91 81       	ldd	r25, Z+1	; 0x01
    37c4:	00 97       	sbiw	r24, 0x00	; 0
    37c6:	d1 f6       	brne	.-76     	; 0x377c <Stepper_Cfg+0xf38>
    37c8:	27 c0       	rjmp	.+78     	; 0x3818 <Stepper_Cfg+0xfd4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ca:	8e 01       	movw	r16, r28
    37cc:	07 53       	subi	r16, 0x37	; 55
    37ce:	1f 4f       	sbci	r17, 0xFF	; 255
    37d0:	fe 01       	movw	r30, r28
    37d2:	e5 53       	subi	r30, 0x35	; 53
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	60 81       	ld	r22, Z
    37d8:	71 81       	ldd	r23, Z+1	; 0x01
    37da:	82 81       	ldd	r24, Z+2	; 0x02
    37dc:	93 81       	ldd	r25, Z+3	; 0x03
    37de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	f8 01       	movw	r30, r16
    37e8:	91 83       	std	Z+1, r25	; 0x01
    37ea:	80 83       	st	Z, r24
    37ec:	de 01       	movw	r26, r28
    37ee:	ab 53       	subi	r26, 0x3B	; 59
    37f0:	bf 4f       	sbci	r27, 0xFF	; 255
    37f2:	fe 01       	movw	r30, r28
    37f4:	e7 53       	subi	r30, 0x37	; 55
    37f6:	ff 4f       	sbci	r31, 0xFF	; 255
    37f8:	80 81       	ld	r24, Z
    37fa:	91 81       	ldd	r25, Z+1	; 0x01
    37fc:	8d 93       	st	X+, r24
    37fe:	9c 93       	st	X, r25
    3800:	fe 01       	movw	r30, r28
    3802:	eb 53       	subi	r30, 0x3B	; 59
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	80 81       	ld	r24, Z
    3808:	91 81       	ldd	r25, Z+1	; 0x01
    380a:	01 97       	sbiw	r24, 0x01	; 1
    380c:	f1 f7       	brne	.-4      	; 0x380a <Stepper_Cfg+0xfc6>
    380e:	fe 01       	movw	r30, r28
    3810:	eb 53       	subi	r30, 0x3B	; 59
    3812:	ff 4f       	sbci	r31, 0xFF	; 255
    3814:	91 83       	std	Z+1, r25	; 0x01
    3816:	80 83       	st	Z, r24
	DIO_write(mport,DIO_PIN0 , DIO_LOW);
    3818:	80 91 48 03 	lds	r24, 0x0348
    381c:	60 e0       	ldi	r22, 0x00	; 0
    381e:	40 e0       	ldi	r20, 0x00	; 0
    3820:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN1 , DIO_HIGH);
    3824:	80 91 48 03 	lds	r24, 0x0348
    3828:	61 e0       	ldi	r22, 0x01	; 1
    382a:	41 e0       	ldi	r20, 0x01	; 1
    382c:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN2 , DIO_LOW);
    3830:	80 91 48 03 	lds	r24, 0x0348
    3834:	62 e0       	ldi	r22, 0x02	; 2
    3836:	40 e0       	ldi	r20, 0x00	; 0
    3838:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN3 , DIO_LOW);
    383c:	80 91 48 03 	lds	r24, 0x0348
    3840:	63 e0       	ldi	r22, 0x03	; 3
    3842:	40 e0       	ldi	r20, 0x00	; 0
    3844:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	_delay_ms(speed);
    3848:	fe 01       	movw	r30, r28
    384a:	ed 5b       	subi	r30, 0xBD	; 189
    384c:	fe 4f       	sbci	r31, 0xFE	; 254
    384e:	80 81       	ld	r24, Z
    3850:	88 2f       	mov	r24, r24
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	a0 e0       	ldi	r26, 0x00	; 0
    3856:	b0 e0       	ldi	r27, 0x00	; 0
    3858:	bc 01       	movw	r22, r24
    385a:	cd 01       	movw	r24, r26
    385c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3860:	dc 01       	movw	r26, r24
    3862:	cb 01       	movw	r24, r22
    3864:	fe 01       	movw	r30, r28
    3866:	ef 53       	subi	r30, 0x3F	; 63
    3868:	ff 4f       	sbci	r31, 0xFF	; 255
    386a:	80 83       	st	Z, r24
    386c:	91 83       	std	Z+1, r25	; 0x01
    386e:	a2 83       	std	Z+2, r26	; 0x02
    3870:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3872:	8e 01       	movw	r16, r28
    3874:	03 54       	subi	r16, 0x43	; 67
    3876:	1f 4f       	sbci	r17, 0xFF	; 255
    3878:	fe 01       	movw	r30, r28
    387a:	ef 53       	subi	r30, 0x3F	; 63
    387c:	ff 4f       	sbci	r31, 0xFF	; 255
    387e:	60 81       	ld	r22, Z
    3880:	71 81       	ldd	r23, Z+1	; 0x01
    3882:	82 81       	ldd	r24, Z+2	; 0x02
    3884:	93 81       	ldd	r25, Z+3	; 0x03
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	30 e0       	ldi	r19, 0x00	; 0
    388a:	4a e7       	ldi	r20, 0x7A	; 122
    388c:	53 e4       	ldi	r21, 0x43	; 67
    388e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3892:	dc 01       	movw	r26, r24
    3894:	cb 01       	movw	r24, r22
    3896:	f8 01       	movw	r30, r16
    3898:	80 83       	st	Z, r24
    389a:	91 83       	std	Z+1, r25	; 0x01
    389c:	a2 83       	std	Z+2, r26	; 0x02
    389e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38a0:	fe 01       	movw	r30, r28
    38a2:	e3 54       	subi	r30, 0x43	; 67
    38a4:	ff 4f       	sbci	r31, 0xFF	; 255
    38a6:	60 81       	ld	r22, Z
    38a8:	71 81       	ldd	r23, Z+1	; 0x01
    38aa:	82 81       	ldd	r24, Z+2	; 0x02
    38ac:	93 81       	ldd	r25, Z+3	; 0x03
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	40 e8       	ldi	r20, 0x80	; 128
    38b4:	5f e3       	ldi	r21, 0x3F	; 63
    38b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38ba:	88 23       	and	r24, r24
    38bc:	44 f4       	brge	.+16     	; 0x38ce <Stepper_Cfg+0x108a>
		__ticks = 1;
    38be:	fe 01       	movw	r30, r28
    38c0:	e5 54       	subi	r30, 0x45	; 69
    38c2:	ff 4f       	sbci	r31, 0xFF	; 255
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	91 83       	std	Z+1, r25	; 0x01
    38ca:	80 83       	st	Z, r24
    38cc:	64 c0       	rjmp	.+200    	; 0x3996 <Stepper_Cfg+0x1152>
	else if (__tmp > 65535)
    38ce:	fe 01       	movw	r30, r28
    38d0:	e3 54       	subi	r30, 0x43	; 67
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	60 81       	ld	r22, Z
    38d6:	71 81       	ldd	r23, Z+1	; 0x01
    38d8:	82 81       	ldd	r24, Z+2	; 0x02
    38da:	93 81       	ldd	r25, Z+3	; 0x03
    38dc:	20 e0       	ldi	r18, 0x00	; 0
    38de:	3f ef       	ldi	r19, 0xFF	; 255
    38e0:	4f e7       	ldi	r20, 0x7F	; 127
    38e2:	57 e4       	ldi	r21, 0x47	; 71
    38e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38e8:	18 16       	cp	r1, r24
    38ea:	0c f0       	brlt	.+2      	; 0x38ee <Stepper_Cfg+0x10aa>
    38ec:	43 c0       	rjmp	.+134    	; 0x3974 <Stepper_Cfg+0x1130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ee:	fe 01       	movw	r30, r28
    38f0:	ef 53       	subi	r30, 0x3F	; 63
    38f2:	ff 4f       	sbci	r31, 0xFF	; 255
    38f4:	60 81       	ld	r22, Z
    38f6:	71 81       	ldd	r23, Z+1	; 0x01
    38f8:	82 81       	ldd	r24, Z+2	; 0x02
    38fa:	93 81       	ldd	r25, Z+3	; 0x03
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	40 e2       	ldi	r20, 0x20	; 32
    3902:	51 e4       	ldi	r21, 0x41	; 65
    3904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	8e 01       	movw	r16, r28
    390e:	05 54       	subi	r16, 0x45	; 69
    3910:	1f 4f       	sbci	r17, 0xFF	; 255
    3912:	bc 01       	movw	r22, r24
    3914:	cd 01       	movw	r24, r26
    3916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	f8 01       	movw	r30, r16
    3920:	91 83       	std	Z+1, r25	; 0x01
    3922:	80 83       	st	Z, r24
    3924:	1f c0       	rjmp	.+62     	; 0x3964 <Stepper_Cfg+0x1120>
    3926:	fe 01       	movw	r30, r28
    3928:	e7 54       	subi	r30, 0x47	; 71
    392a:	ff 4f       	sbci	r31, 0xFF	; 255
    392c:	89 e1       	ldi	r24, 0x19	; 25
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	91 83       	std	Z+1, r25	; 0x01
    3932:	80 83       	st	Z, r24
    3934:	fe 01       	movw	r30, r28
    3936:	e7 54       	subi	r30, 0x47	; 71
    3938:	ff 4f       	sbci	r31, 0xFF	; 255
    393a:	80 81       	ld	r24, Z
    393c:	91 81       	ldd	r25, Z+1	; 0x01
    393e:	01 97       	sbiw	r24, 0x01	; 1
    3940:	f1 f7       	brne	.-4      	; 0x393e <Stepper_Cfg+0x10fa>
    3942:	fe 01       	movw	r30, r28
    3944:	e7 54       	subi	r30, 0x47	; 71
    3946:	ff 4f       	sbci	r31, 0xFF	; 255
    3948:	91 83       	std	Z+1, r25	; 0x01
    394a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    394c:	de 01       	movw	r26, r28
    394e:	a5 54       	subi	r26, 0x45	; 69
    3950:	bf 4f       	sbci	r27, 0xFF	; 255
    3952:	fe 01       	movw	r30, r28
    3954:	e5 54       	subi	r30, 0x45	; 69
    3956:	ff 4f       	sbci	r31, 0xFF	; 255
    3958:	80 81       	ld	r24, Z
    395a:	91 81       	ldd	r25, Z+1	; 0x01
    395c:	01 97       	sbiw	r24, 0x01	; 1
    395e:	11 96       	adiw	r26, 0x01	; 1
    3960:	9c 93       	st	X, r25
    3962:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3964:	fe 01       	movw	r30, r28
    3966:	e5 54       	subi	r30, 0x45	; 69
    3968:	ff 4f       	sbci	r31, 0xFF	; 255
    396a:	80 81       	ld	r24, Z
    396c:	91 81       	ldd	r25, Z+1	; 0x01
    396e:	00 97       	sbiw	r24, 0x00	; 0
    3970:	d1 f6       	brne	.-76     	; 0x3926 <Stepper_Cfg+0x10e2>
    3972:	27 c0       	rjmp	.+78     	; 0x39c2 <Stepper_Cfg+0x117e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3974:	8e 01       	movw	r16, r28
    3976:	05 54       	subi	r16, 0x45	; 69
    3978:	1f 4f       	sbci	r17, 0xFF	; 255
    397a:	fe 01       	movw	r30, r28
    397c:	e3 54       	subi	r30, 0x43	; 67
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	60 81       	ld	r22, Z
    3982:	71 81       	ldd	r23, Z+1	; 0x01
    3984:	82 81       	ldd	r24, Z+2	; 0x02
    3986:	93 81       	ldd	r25, Z+3	; 0x03
    3988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398c:	dc 01       	movw	r26, r24
    398e:	cb 01       	movw	r24, r22
    3990:	f8 01       	movw	r30, r16
    3992:	91 83       	std	Z+1, r25	; 0x01
    3994:	80 83       	st	Z, r24
    3996:	de 01       	movw	r26, r28
    3998:	a9 54       	subi	r26, 0x49	; 73
    399a:	bf 4f       	sbci	r27, 0xFF	; 255
    399c:	fe 01       	movw	r30, r28
    399e:	e5 54       	subi	r30, 0x45	; 69
    39a0:	ff 4f       	sbci	r31, 0xFF	; 255
    39a2:	80 81       	ld	r24, Z
    39a4:	91 81       	ldd	r25, Z+1	; 0x01
    39a6:	8d 93       	st	X+, r24
    39a8:	9c 93       	st	X, r25
    39aa:	fe 01       	movw	r30, r28
    39ac:	e9 54       	subi	r30, 0x49	; 73
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	80 81       	ld	r24, Z
    39b2:	91 81       	ldd	r25, Z+1	; 0x01
    39b4:	01 97       	sbiw	r24, 0x01	; 1
    39b6:	f1 f7       	brne	.-4      	; 0x39b4 <Stepper_Cfg+0x1170>
    39b8:	fe 01       	movw	r30, r28
    39ba:	e9 54       	subi	r30, 0x49	; 73
    39bc:	ff 4f       	sbci	r31, 0xFF	; 255
    39be:	91 83       	std	Z+1, r25	; 0x01
    39c0:	80 83       	st	Z, r24
	DIO_write(mport,DIO_PIN0 , DIO_LOW);
    39c2:	80 91 48 03 	lds	r24, 0x0348
    39c6:	60 e0       	ldi	r22, 0x00	; 0
    39c8:	40 e0       	ldi	r20, 0x00	; 0
    39ca:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN1 , DIO_LOW);
    39ce:	80 91 48 03 	lds	r24, 0x0348
    39d2:	61 e0       	ldi	r22, 0x01	; 1
    39d4:	40 e0       	ldi	r20, 0x00	; 0
    39d6:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN2 , DIO_HIGH);
    39da:	80 91 48 03 	lds	r24, 0x0348
    39de:	62 e0       	ldi	r22, 0x02	; 2
    39e0:	41 e0       	ldi	r20, 0x01	; 1
    39e2:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN3 , DIO_LOW);
    39e6:	80 91 48 03 	lds	r24, 0x0348
    39ea:	63 e0       	ldi	r22, 0x03	; 3
    39ec:	40 e0       	ldi	r20, 0x00	; 0
    39ee:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	_delay_ms(speed);
    39f2:	fe 01       	movw	r30, r28
    39f4:	ed 5b       	subi	r30, 0xBD	; 189
    39f6:	fe 4f       	sbci	r31, 0xFE	; 254
    39f8:	80 81       	ld	r24, Z
    39fa:	88 2f       	mov	r24, r24
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	a0 e0       	ldi	r26, 0x00	; 0
    3a00:	b0 e0       	ldi	r27, 0x00	; 0
    3a02:	bc 01       	movw	r22, r24
    3a04:	cd 01       	movw	r24, r26
    3a06:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3a0a:	dc 01       	movw	r26, r24
    3a0c:	cb 01       	movw	r24, r22
    3a0e:	fe 01       	movw	r30, r28
    3a10:	ed 54       	subi	r30, 0x4D	; 77
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	80 83       	st	Z, r24
    3a16:	91 83       	std	Z+1, r25	; 0x01
    3a18:	a2 83       	std	Z+2, r26	; 0x02
    3a1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a1c:	8e 01       	movw	r16, r28
    3a1e:	01 55       	subi	r16, 0x51	; 81
    3a20:	1f 4f       	sbci	r17, 0xFF	; 255
    3a22:	fe 01       	movw	r30, r28
    3a24:	ed 54       	subi	r30, 0x4D	; 77
    3a26:	ff 4f       	sbci	r31, 0xFF	; 255
    3a28:	60 81       	ld	r22, Z
    3a2a:	71 81       	ldd	r23, Z+1	; 0x01
    3a2c:	82 81       	ldd	r24, Z+2	; 0x02
    3a2e:	93 81       	ldd	r25, Z+3	; 0x03
    3a30:	20 e0       	ldi	r18, 0x00	; 0
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	4a e7       	ldi	r20, 0x7A	; 122
    3a36:	53 e4       	ldi	r21, 0x43	; 67
    3a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3c:	dc 01       	movw	r26, r24
    3a3e:	cb 01       	movw	r24, r22
    3a40:	f8 01       	movw	r30, r16
    3a42:	80 83       	st	Z, r24
    3a44:	91 83       	std	Z+1, r25	; 0x01
    3a46:	a2 83       	std	Z+2, r26	; 0x02
    3a48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a4a:	fe 01       	movw	r30, r28
    3a4c:	e1 55       	subi	r30, 0x51	; 81
    3a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a50:	60 81       	ld	r22, Z
    3a52:	71 81       	ldd	r23, Z+1	; 0x01
    3a54:	82 81       	ldd	r24, Z+2	; 0x02
    3a56:	93 81       	ldd	r25, Z+3	; 0x03
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	40 e8       	ldi	r20, 0x80	; 128
    3a5e:	5f e3       	ldi	r21, 0x3F	; 63
    3a60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a64:	88 23       	and	r24, r24
    3a66:	44 f4       	brge	.+16     	; 0x3a78 <Stepper_Cfg+0x1234>
		__ticks = 1;
    3a68:	fe 01       	movw	r30, r28
    3a6a:	e3 55       	subi	r30, 0x53	; 83
    3a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	91 83       	std	Z+1, r25	; 0x01
    3a74:	80 83       	st	Z, r24
    3a76:	64 c0       	rjmp	.+200    	; 0x3b40 <Stepper_Cfg+0x12fc>
	else if (__tmp > 65535)
    3a78:	fe 01       	movw	r30, r28
    3a7a:	e1 55       	subi	r30, 0x51	; 81
    3a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7e:	60 81       	ld	r22, Z
    3a80:	71 81       	ldd	r23, Z+1	; 0x01
    3a82:	82 81       	ldd	r24, Z+2	; 0x02
    3a84:	93 81       	ldd	r25, Z+3	; 0x03
    3a86:	20 e0       	ldi	r18, 0x00	; 0
    3a88:	3f ef       	ldi	r19, 0xFF	; 255
    3a8a:	4f e7       	ldi	r20, 0x7F	; 127
    3a8c:	57 e4       	ldi	r21, 0x47	; 71
    3a8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a92:	18 16       	cp	r1, r24
    3a94:	0c f0       	brlt	.+2      	; 0x3a98 <Stepper_Cfg+0x1254>
    3a96:	43 c0       	rjmp	.+134    	; 0x3b1e <Stepper_Cfg+0x12da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a98:	fe 01       	movw	r30, r28
    3a9a:	ed 54       	subi	r30, 0x4D	; 77
    3a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9e:	60 81       	ld	r22, Z
    3aa0:	71 81       	ldd	r23, Z+1	; 0x01
    3aa2:	82 81       	ldd	r24, Z+2	; 0x02
    3aa4:	93 81       	ldd	r25, Z+3	; 0x03
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	40 e2       	ldi	r20, 0x20	; 32
    3aac:	51 e4       	ldi	r21, 0x41	; 65
    3aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	8e 01       	movw	r16, r28
    3ab8:	03 55       	subi	r16, 0x53	; 83
    3aba:	1f 4f       	sbci	r17, 0xFF	; 255
    3abc:	bc 01       	movw	r22, r24
    3abe:	cd 01       	movw	r24, r26
    3ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	f8 01       	movw	r30, r16
    3aca:	91 83       	std	Z+1, r25	; 0x01
    3acc:	80 83       	st	Z, r24
    3ace:	1f c0       	rjmp	.+62     	; 0x3b0e <Stepper_Cfg+0x12ca>
    3ad0:	fe 01       	movw	r30, r28
    3ad2:	e5 55       	subi	r30, 0x55	; 85
    3ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad6:	89 e1       	ldi	r24, 0x19	; 25
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	91 83       	std	Z+1, r25	; 0x01
    3adc:	80 83       	st	Z, r24
    3ade:	fe 01       	movw	r30, r28
    3ae0:	e5 55       	subi	r30, 0x55	; 85
    3ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae4:	80 81       	ld	r24, Z
    3ae6:	91 81       	ldd	r25, Z+1	; 0x01
    3ae8:	01 97       	sbiw	r24, 0x01	; 1
    3aea:	f1 f7       	brne	.-4      	; 0x3ae8 <Stepper_Cfg+0x12a4>
    3aec:	fe 01       	movw	r30, r28
    3aee:	e5 55       	subi	r30, 0x55	; 85
    3af0:	ff 4f       	sbci	r31, 0xFF	; 255
    3af2:	91 83       	std	Z+1, r25	; 0x01
    3af4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3af6:	de 01       	movw	r26, r28
    3af8:	a3 55       	subi	r26, 0x53	; 83
    3afa:	bf 4f       	sbci	r27, 0xFF	; 255
    3afc:	fe 01       	movw	r30, r28
    3afe:	e3 55       	subi	r30, 0x53	; 83
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	80 81       	ld	r24, Z
    3b04:	91 81       	ldd	r25, Z+1	; 0x01
    3b06:	01 97       	sbiw	r24, 0x01	; 1
    3b08:	11 96       	adiw	r26, 0x01	; 1
    3b0a:	9c 93       	st	X, r25
    3b0c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b0e:	fe 01       	movw	r30, r28
    3b10:	e3 55       	subi	r30, 0x53	; 83
    3b12:	ff 4f       	sbci	r31, 0xFF	; 255
    3b14:	80 81       	ld	r24, Z
    3b16:	91 81       	ldd	r25, Z+1	; 0x01
    3b18:	00 97       	sbiw	r24, 0x00	; 0
    3b1a:	d1 f6       	brne	.-76     	; 0x3ad0 <Stepper_Cfg+0x128c>
    3b1c:	27 c0       	rjmp	.+78     	; 0x3b6c <Stepper_Cfg+0x1328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b1e:	8e 01       	movw	r16, r28
    3b20:	03 55       	subi	r16, 0x53	; 83
    3b22:	1f 4f       	sbci	r17, 0xFF	; 255
    3b24:	fe 01       	movw	r30, r28
    3b26:	e1 55       	subi	r30, 0x51	; 81
    3b28:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2a:	60 81       	ld	r22, Z
    3b2c:	71 81       	ldd	r23, Z+1	; 0x01
    3b2e:	82 81       	ldd	r24, Z+2	; 0x02
    3b30:	93 81       	ldd	r25, Z+3	; 0x03
    3b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b36:	dc 01       	movw	r26, r24
    3b38:	cb 01       	movw	r24, r22
    3b3a:	f8 01       	movw	r30, r16
    3b3c:	91 83       	std	Z+1, r25	; 0x01
    3b3e:	80 83       	st	Z, r24
    3b40:	de 01       	movw	r26, r28
    3b42:	a7 55       	subi	r26, 0x57	; 87
    3b44:	bf 4f       	sbci	r27, 0xFF	; 255
    3b46:	fe 01       	movw	r30, r28
    3b48:	e3 55       	subi	r30, 0x53	; 83
    3b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4c:	80 81       	ld	r24, Z
    3b4e:	91 81       	ldd	r25, Z+1	; 0x01
    3b50:	8d 93       	st	X+, r24
    3b52:	9c 93       	st	X, r25
    3b54:	fe 01       	movw	r30, r28
    3b56:	e7 55       	subi	r30, 0x57	; 87
    3b58:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5a:	80 81       	ld	r24, Z
    3b5c:	91 81       	ldd	r25, Z+1	; 0x01
    3b5e:	01 97       	sbiw	r24, 0x01	; 1
    3b60:	f1 f7       	brne	.-4      	; 0x3b5e <Stepper_Cfg+0x131a>
    3b62:	fe 01       	movw	r30, r28
    3b64:	e7 55       	subi	r30, 0x57	; 87
    3b66:	ff 4f       	sbci	r31, 0xFF	; 255
    3b68:	91 83       	std	Z+1, r25	; 0x01
    3b6a:	80 83       	st	Z, r24
	DIO_write(mport,DIO_PIN0 , DIO_LOW);
    3b6c:	80 91 48 03 	lds	r24, 0x0348
    3b70:	60 e0       	ldi	r22, 0x00	; 0
    3b72:	40 e0       	ldi	r20, 0x00	; 0
    3b74:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN1 , DIO_LOW);
    3b78:	80 91 48 03 	lds	r24, 0x0348
    3b7c:	61 e0       	ldi	r22, 0x01	; 1
    3b7e:	40 e0       	ldi	r20, 0x00	; 0
    3b80:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN2 , DIO_LOW);
    3b84:	80 91 48 03 	lds	r24, 0x0348
    3b88:	62 e0       	ldi	r22, 0x02	; 2
    3b8a:	40 e0       	ldi	r20, 0x00	; 0
    3b8c:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN3 , DIO_HIGH);
    3b90:	80 91 48 03 	lds	r24, 0x0348
    3b94:	63 e0       	ldi	r22, 0x03	; 3
    3b96:	41 e0       	ldi	r20, 0x01	; 1
    3b98:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
    3b9c:	0c 94 c8 26 	jmp	0x4d90	; 0x4d90 <Stepper_Cfg+0x254c>

	break;
case ANTI_CLOCK_WISE_STEPPER:


	switch(nipple)
    3ba0:	fe 01       	movw	r30, r28
    3ba2:	eb 5b       	subi	r30, 0xBB	; 187
    3ba4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ba6:	80 81       	ld	r24, Z
    3ba8:	28 2f       	mov	r18, r24
    3baa:	30 e0       	ldi	r19, 0x00	; 0
    3bac:	ca 5b       	subi	r28, 0xBA	; 186
    3bae:	de 4f       	sbci	r29, 0xFE	; 254
    3bb0:	39 83       	std	Y+1, r19	; 0x01
    3bb2:	28 83       	st	Y, r18
    3bb4:	c6 54       	subi	r28, 0x46	; 70
    3bb6:	d1 40       	sbci	r29, 0x01	; 1
    3bb8:	ca 5b       	subi	r28, 0xBA	; 186
    3bba:	de 4f       	sbci	r29, 0xFE	; 254
    3bbc:	88 81       	ld	r24, Y
    3bbe:	99 81       	ldd	r25, Y+1	; 0x01
    3bc0:	c6 54       	subi	r28, 0x46	; 70
    3bc2:	d1 40       	sbci	r29, 0x01	; 1
    3bc4:	81 30       	cpi	r24, 0x01	; 1
    3bc6:	91 05       	cpc	r25, r1
    3bc8:	09 f4       	brne	.+2      	; 0x3bcc <Stepper_Cfg+0x1388>
    3bca:	6b c3       	rjmp	.+1750   	; 0x42a2 <Stepper_Cfg+0x1a5e>
    3bcc:	ca 5b       	subi	r28, 0xBA	; 186
    3bce:	de 4f       	sbci	r29, 0xFE	; 254
    3bd0:	e8 81       	ld	r30, Y
    3bd2:	f9 81       	ldd	r31, Y+1	; 0x01
    3bd4:	c6 54       	subi	r28, 0x46	; 70
    3bd6:	d1 40       	sbci	r29, 0x01	; 1
    3bd8:	e2 30       	cpi	r30, 0x02	; 2
    3bda:	f1 05       	cpc	r31, r1
    3bdc:	61 f0       	breq	.+24     	; 0x3bf6 <Stepper_Cfg+0x13b2>
    3bde:	ca 5b       	subi	r28, 0xBA	; 186
    3be0:	de 4f       	sbci	r29, 0xFE	; 254
    3be2:	28 81       	ld	r18, Y
    3be4:	39 81       	ldd	r19, Y+1	; 0x01
    3be6:	c6 54       	subi	r28, 0x46	; 70
    3be8:	d1 40       	sbci	r29, 0x01	; 1
    3bea:	21 15       	cp	r18, r1
    3bec:	31 05       	cpc	r19, r1
    3bee:	09 f4       	brne	.+2      	; 0x3bf2 <Stepper_Cfg+0x13ae>
    3bf0:	7f c6       	rjmp	.+3326   	; 0x48f0 <Stepper_Cfg+0x20ac>
    3bf2:	0c 94 c8 26 	jmp	0x4d90	; 0x4d90 <Stepper_Cfg+0x254c>
{

	case RAND_NIPPLE:
		DIO_write(mport,DIO_PIN1 , DIO_LOW);
    3bf6:	80 91 48 03 	lds	r24, 0x0348
    3bfa:	61 e0       	ldi	r22, 0x01	; 1
    3bfc:	40 e0       	ldi	r20, 0x00	; 0
    3bfe:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		DIO_write(mport,DIO_PIN3 , DIO_LOW);
    3c02:	80 91 48 03 	lds	r24, 0x0348
    3c06:	63 e0       	ldi	r22, 0x03	; 3
    3c08:	40 e0       	ldi	r20, 0x00	; 0
    3c0a:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		DIO_write(mport,DIO_PIN4 , DIO_LOW);
    3c0e:	80 91 48 03 	lds	r24, 0x0348
    3c12:	64 e0       	ldi	r22, 0x04	; 4
    3c14:	40 e0       	ldi	r20, 0x00	; 0
    3c16:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		DIO_write(mport,DIO_PIN5 , DIO_HIGH);
    3c1a:	80 91 48 03 	lds	r24, 0x0348
    3c1e:	65 e0       	ldi	r22, 0x05	; 5
    3c20:	41 e0       	ldi	r20, 0x01	; 1
    3c22:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>


			_delay_ms(speed);
    3c26:	fe 01       	movw	r30, r28
    3c28:	ed 5b       	subi	r30, 0xBD	; 189
    3c2a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c2c:	80 81       	ld	r24, Z
    3c2e:	88 2f       	mov	r24, r24
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	a0 e0       	ldi	r26, 0x00	; 0
    3c34:	b0 e0       	ldi	r27, 0x00	; 0
    3c36:	bc 01       	movw	r22, r24
    3c38:	cd 01       	movw	r24, r26
    3c3a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3c3e:	dc 01       	movw	r26, r24
    3c40:	cb 01       	movw	r24, r22
    3c42:	fe 01       	movw	r30, r28
    3c44:	eb 55       	subi	r30, 0x5B	; 91
    3c46:	ff 4f       	sbci	r31, 0xFF	; 255
    3c48:	80 83       	st	Z, r24
    3c4a:	91 83       	std	Z+1, r25	; 0x01
    3c4c:	a2 83       	std	Z+2, r26	; 0x02
    3c4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c50:	8e 01       	movw	r16, r28
    3c52:	0f 55       	subi	r16, 0x5F	; 95
    3c54:	1f 4f       	sbci	r17, 0xFF	; 255
    3c56:	fe 01       	movw	r30, r28
    3c58:	eb 55       	subi	r30, 0x5B	; 91
    3c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5c:	60 81       	ld	r22, Z
    3c5e:	71 81       	ldd	r23, Z+1	; 0x01
    3c60:	82 81       	ldd	r24, Z+2	; 0x02
    3c62:	93 81       	ldd	r25, Z+3	; 0x03
    3c64:	20 e0       	ldi	r18, 0x00	; 0
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	4a e7       	ldi	r20, 0x7A	; 122
    3c6a:	53 e4       	ldi	r21, 0x43	; 67
    3c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c70:	dc 01       	movw	r26, r24
    3c72:	cb 01       	movw	r24, r22
    3c74:	f8 01       	movw	r30, r16
    3c76:	80 83       	st	Z, r24
    3c78:	91 83       	std	Z+1, r25	; 0x01
    3c7a:	a2 83       	std	Z+2, r26	; 0x02
    3c7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c7e:	fe 01       	movw	r30, r28
    3c80:	ef 55       	subi	r30, 0x5F	; 95
    3c82:	ff 4f       	sbci	r31, 0xFF	; 255
    3c84:	60 81       	ld	r22, Z
    3c86:	71 81       	ldd	r23, Z+1	; 0x01
    3c88:	82 81       	ldd	r24, Z+2	; 0x02
    3c8a:	93 81       	ldd	r25, Z+3	; 0x03
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	40 e8       	ldi	r20, 0x80	; 128
    3c92:	5f e3       	ldi	r21, 0x3F	; 63
    3c94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c98:	88 23       	and	r24, r24
    3c9a:	44 f4       	brge	.+16     	; 0x3cac <Stepper_Cfg+0x1468>
		__ticks = 1;
    3c9c:	fe 01       	movw	r30, r28
    3c9e:	e1 56       	subi	r30, 0x61	; 97
    3ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	91 83       	std	Z+1, r25	; 0x01
    3ca8:	80 83       	st	Z, r24
    3caa:	64 c0       	rjmp	.+200    	; 0x3d74 <Stepper_Cfg+0x1530>
	else if (__tmp > 65535)
    3cac:	fe 01       	movw	r30, r28
    3cae:	ef 55       	subi	r30, 0x5F	; 95
    3cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb2:	60 81       	ld	r22, Z
    3cb4:	71 81       	ldd	r23, Z+1	; 0x01
    3cb6:	82 81       	ldd	r24, Z+2	; 0x02
    3cb8:	93 81       	ldd	r25, Z+3	; 0x03
    3cba:	20 e0       	ldi	r18, 0x00	; 0
    3cbc:	3f ef       	ldi	r19, 0xFF	; 255
    3cbe:	4f e7       	ldi	r20, 0x7F	; 127
    3cc0:	57 e4       	ldi	r21, 0x47	; 71
    3cc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cc6:	18 16       	cp	r1, r24
    3cc8:	0c f0       	brlt	.+2      	; 0x3ccc <Stepper_Cfg+0x1488>
    3cca:	43 c0       	rjmp	.+134    	; 0x3d52 <Stepper_Cfg+0x150e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ccc:	fe 01       	movw	r30, r28
    3cce:	eb 55       	subi	r30, 0x5B	; 91
    3cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd2:	60 81       	ld	r22, Z
    3cd4:	71 81       	ldd	r23, Z+1	; 0x01
    3cd6:	82 81       	ldd	r24, Z+2	; 0x02
    3cd8:	93 81       	ldd	r25, Z+3	; 0x03
    3cda:	20 e0       	ldi	r18, 0x00	; 0
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	40 e2       	ldi	r20, 0x20	; 32
    3ce0:	51 e4       	ldi	r21, 0x41	; 65
    3ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce6:	dc 01       	movw	r26, r24
    3ce8:	cb 01       	movw	r24, r22
    3cea:	8e 01       	movw	r16, r28
    3cec:	01 56       	subi	r16, 0x61	; 97
    3cee:	1f 4f       	sbci	r17, 0xFF	; 255
    3cf0:	bc 01       	movw	r22, r24
    3cf2:	cd 01       	movw	r24, r26
    3cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	cb 01       	movw	r24, r22
    3cfc:	f8 01       	movw	r30, r16
    3cfe:	91 83       	std	Z+1, r25	; 0x01
    3d00:	80 83       	st	Z, r24
    3d02:	1f c0       	rjmp	.+62     	; 0x3d42 <Stepper_Cfg+0x14fe>
    3d04:	fe 01       	movw	r30, r28
    3d06:	e3 56       	subi	r30, 0x63	; 99
    3d08:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0a:	89 e1       	ldi	r24, 0x19	; 25
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	91 83       	std	Z+1, r25	; 0x01
    3d10:	80 83       	st	Z, r24
    3d12:	fe 01       	movw	r30, r28
    3d14:	e3 56       	subi	r30, 0x63	; 99
    3d16:	ff 4f       	sbci	r31, 0xFF	; 255
    3d18:	80 81       	ld	r24, Z
    3d1a:	91 81       	ldd	r25, Z+1	; 0x01
    3d1c:	01 97       	sbiw	r24, 0x01	; 1
    3d1e:	f1 f7       	brne	.-4      	; 0x3d1c <Stepper_Cfg+0x14d8>
    3d20:	fe 01       	movw	r30, r28
    3d22:	e3 56       	subi	r30, 0x63	; 99
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	91 83       	std	Z+1, r25	; 0x01
    3d28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d2a:	de 01       	movw	r26, r28
    3d2c:	a1 56       	subi	r26, 0x61	; 97
    3d2e:	bf 4f       	sbci	r27, 0xFF	; 255
    3d30:	fe 01       	movw	r30, r28
    3d32:	e1 56       	subi	r30, 0x61	; 97
    3d34:	ff 4f       	sbci	r31, 0xFF	; 255
    3d36:	80 81       	ld	r24, Z
    3d38:	91 81       	ldd	r25, Z+1	; 0x01
    3d3a:	01 97       	sbiw	r24, 0x01	; 1
    3d3c:	11 96       	adiw	r26, 0x01	; 1
    3d3e:	9c 93       	st	X, r25
    3d40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d42:	fe 01       	movw	r30, r28
    3d44:	e1 56       	subi	r30, 0x61	; 97
    3d46:	ff 4f       	sbci	r31, 0xFF	; 255
    3d48:	80 81       	ld	r24, Z
    3d4a:	91 81       	ldd	r25, Z+1	; 0x01
    3d4c:	00 97       	sbiw	r24, 0x00	; 0
    3d4e:	d1 f6       	brne	.-76     	; 0x3d04 <Stepper_Cfg+0x14c0>
    3d50:	27 c0       	rjmp	.+78     	; 0x3da0 <Stepper_Cfg+0x155c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d52:	8e 01       	movw	r16, r28
    3d54:	01 56       	subi	r16, 0x61	; 97
    3d56:	1f 4f       	sbci	r17, 0xFF	; 255
    3d58:	fe 01       	movw	r30, r28
    3d5a:	ef 55       	subi	r30, 0x5F	; 95
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	60 81       	ld	r22, Z
    3d60:	71 81       	ldd	r23, Z+1	; 0x01
    3d62:	82 81       	ldd	r24, Z+2	; 0x02
    3d64:	93 81       	ldd	r25, Z+3	; 0x03
    3d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d6a:	dc 01       	movw	r26, r24
    3d6c:	cb 01       	movw	r24, r22
    3d6e:	f8 01       	movw	r30, r16
    3d70:	91 83       	std	Z+1, r25	; 0x01
    3d72:	80 83       	st	Z, r24
    3d74:	de 01       	movw	r26, r28
    3d76:	a5 56       	subi	r26, 0x65	; 101
    3d78:	bf 4f       	sbci	r27, 0xFF	; 255
    3d7a:	fe 01       	movw	r30, r28
    3d7c:	e1 56       	subi	r30, 0x61	; 97
    3d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d80:	80 81       	ld	r24, Z
    3d82:	91 81       	ldd	r25, Z+1	; 0x01
    3d84:	8d 93       	st	X+, r24
    3d86:	9c 93       	st	X, r25
    3d88:	fe 01       	movw	r30, r28
    3d8a:	e5 56       	subi	r30, 0x65	; 101
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	80 81       	ld	r24, Z
    3d90:	91 81       	ldd	r25, Z+1	; 0x01
    3d92:	01 97       	sbiw	r24, 0x01	; 1
    3d94:	f1 f7       	brne	.-4      	; 0x3d92 <Stepper_Cfg+0x154e>
    3d96:	fe 01       	movw	r30, r28
    3d98:	e5 56       	subi	r30, 0x65	; 101
    3d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9c:	91 83       	std	Z+1, r25	; 0x01
    3d9e:	80 83       	st	Z, r24
			DIO_write(mport,DIO_PIN1 , DIO_LOW);
    3da0:	80 91 48 03 	lds	r24, 0x0348
    3da4:	61 e0       	ldi	r22, 0x01	; 1
    3da6:	40 e0       	ldi	r20, 0x00	; 0
    3da8:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(mport,DIO_PIN3 , DIO_LOW);
    3dac:	80 91 48 03 	lds	r24, 0x0348
    3db0:	63 e0       	ldi	r22, 0x03	; 3
    3db2:	40 e0       	ldi	r20, 0x00	; 0
    3db4:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(mport,DIO_PIN4 , DIO_HIGH);
    3db8:	80 91 48 03 	lds	r24, 0x0348
    3dbc:	64 e0       	ldi	r22, 0x04	; 4
    3dbe:	41 e0       	ldi	r20, 0x01	; 1
    3dc0:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(mport,DIO_PIN5 , DIO_LOW);
    3dc4:	80 91 48 03 	lds	r24, 0x0348
    3dc8:	65 e0       	ldi	r22, 0x05	; 5
    3dca:	40 e0       	ldi	r20, 0x00	; 0
    3dcc:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>

			_delay_ms(speed);
    3dd0:	fe 01       	movw	r30, r28
    3dd2:	ed 5b       	subi	r30, 0xBD	; 189
    3dd4:	fe 4f       	sbci	r31, 0xFE	; 254
    3dd6:	80 81       	ld	r24, Z
    3dd8:	88 2f       	mov	r24, r24
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	a0 e0       	ldi	r26, 0x00	; 0
    3dde:	b0 e0       	ldi	r27, 0x00	; 0
    3de0:	bc 01       	movw	r22, r24
    3de2:	cd 01       	movw	r24, r26
    3de4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3de8:	dc 01       	movw	r26, r24
    3dea:	cb 01       	movw	r24, r22
    3dec:	fe 01       	movw	r30, r28
    3dee:	e9 56       	subi	r30, 0x69	; 105
    3df0:	ff 4f       	sbci	r31, 0xFF	; 255
    3df2:	80 83       	st	Z, r24
    3df4:	91 83       	std	Z+1, r25	; 0x01
    3df6:	a2 83       	std	Z+2, r26	; 0x02
    3df8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dfa:	8e 01       	movw	r16, r28
    3dfc:	0d 56       	subi	r16, 0x6D	; 109
    3dfe:	1f 4f       	sbci	r17, 0xFF	; 255
    3e00:	fe 01       	movw	r30, r28
    3e02:	e9 56       	subi	r30, 0x69	; 105
    3e04:	ff 4f       	sbci	r31, 0xFF	; 255
    3e06:	60 81       	ld	r22, Z
    3e08:	71 81       	ldd	r23, Z+1	; 0x01
    3e0a:	82 81       	ldd	r24, Z+2	; 0x02
    3e0c:	93 81       	ldd	r25, Z+3	; 0x03
    3e0e:	20 e0       	ldi	r18, 0x00	; 0
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	4a e7       	ldi	r20, 0x7A	; 122
    3e14:	53 e4       	ldi	r21, 0x43	; 67
    3e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e1a:	dc 01       	movw	r26, r24
    3e1c:	cb 01       	movw	r24, r22
    3e1e:	f8 01       	movw	r30, r16
    3e20:	80 83       	st	Z, r24
    3e22:	91 83       	std	Z+1, r25	; 0x01
    3e24:	a2 83       	std	Z+2, r26	; 0x02
    3e26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e28:	fe 01       	movw	r30, r28
    3e2a:	ed 56       	subi	r30, 0x6D	; 109
    3e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2e:	60 81       	ld	r22, Z
    3e30:	71 81       	ldd	r23, Z+1	; 0x01
    3e32:	82 81       	ldd	r24, Z+2	; 0x02
    3e34:	93 81       	ldd	r25, Z+3	; 0x03
    3e36:	20 e0       	ldi	r18, 0x00	; 0
    3e38:	30 e0       	ldi	r19, 0x00	; 0
    3e3a:	40 e8       	ldi	r20, 0x80	; 128
    3e3c:	5f e3       	ldi	r21, 0x3F	; 63
    3e3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e42:	88 23       	and	r24, r24
    3e44:	44 f4       	brge	.+16     	; 0x3e56 <Stepper_Cfg+0x1612>
		__ticks = 1;
    3e46:	fe 01       	movw	r30, r28
    3e48:	ef 56       	subi	r30, 0x6F	; 111
    3e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4c:	81 e0       	ldi	r24, 0x01	; 1
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	91 83       	std	Z+1, r25	; 0x01
    3e52:	80 83       	st	Z, r24
    3e54:	64 c0       	rjmp	.+200    	; 0x3f1e <Stepper_Cfg+0x16da>
	else if (__tmp > 65535)
    3e56:	fe 01       	movw	r30, r28
    3e58:	ed 56       	subi	r30, 0x6D	; 109
    3e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5c:	60 81       	ld	r22, Z
    3e5e:	71 81       	ldd	r23, Z+1	; 0x01
    3e60:	82 81       	ldd	r24, Z+2	; 0x02
    3e62:	93 81       	ldd	r25, Z+3	; 0x03
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	3f ef       	ldi	r19, 0xFF	; 255
    3e68:	4f e7       	ldi	r20, 0x7F	; 127
    3e6a:	57 e4       	ldi	r21, 0x47	; 71
    3e6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e70:	18 16       	cp	r1, r24
    3e72:	0c f0       	brlt	.+2      	; 0x3e76 <Stepper_Cfg+0x1632>
    3e74:	43 c0       	rjmp	.+134    	; 0x3efc <Stepper_Cfg+0x16b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e76:	fe 01       	movw	r30, r28
    3e78:	e9 56       	subi	r30, 0x69	; 105
    3e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7c:	60 81       	ld	r22, Z
    3e7e:	71 81       	ldd	r23, Z+1	; 0x01
    3e80:	82 81       	ldd	r24, Z+2	; 0x02
    3e82:	93 81       	ldd	r25, Z+3	; 0x03
    3e84:	20 e0       	ldi	r18, 0x00	; 0
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	40 e2       	ldi	r20, 0x20	; 32
    3e8a:	51 e4       	ldi	r21, 0x41	; 65
    3e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e90:	dc 01       	movw	r26, r24
    3e92:	cb 01       	movw	r24, r22
    3e94:	8e 01       	movw	r16, r28
    3e96:	0f 56       	subi	r16, 0x6F	; 111
    3e98:	1f 4f       	sbci	r17, 0xFF	; 255
    3e9a:	bc 01       	movw	r22, r24
    3e9c:	cd 01       	movw	r24, r26
    3e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea2:	dc 01       	movw	r26, r24
    3ea4:	cb 01       	movw	r24, r22
    3ea6:	f8 01       	movw	r30, r16
    3ea8:	91 83       	std	Z+1, r25	; 0x01
    3eaa:	80 83       	st	Z, r24
    3eac:	1f c0       	rjmp	.+62     	; 0x3eec <Stepper_Cfg+0x16a8>
    3eae:	fe 01       	movw	r30, r28
    3eb0:	e1 57       	subi	r30, 0x71	; 113
    3eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb4:	89 e1       	ldi	r24, 0x19	; 25
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	91 83       	std	Z+1, r25	; 0x01
    3eba:	80 83       	st	Z, r24
    3ebc:	fe 01       	movw	r30, r28
    3ebe:	e1 57       	subi	r30, 0x71	; 113
    3ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec2:	80 81       	ld	r24, Z
    3ec4:	91 81       	ldd	r25, Z+1	; 0x01
    3ec6:	01 97       	sbiw	r24, 0x01	; 1
    3ec8:	f1 f7       	brne	.-4      	; 0x3ec6 <Stepper_Cfg+0x1682>
    3eca:	fe 01       	movw	r30, r28
    3ecc:	e1 57       	subi	r30, 0x71	; 113
    3ece:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed0:	91 83       	std	Z+1, r25	; 0x01
    3ed2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ed4:	de 01       	movw	r26, r28
    3ed6:	af 56       	subi	r26, 0x6F	; 111
    3ed8:	bf 4f       	sbci	r27, 0xFF	; 255
    3eda:	fe 01       	movw	r30, r28
    3edc:	ef 56       	subi	r30, 0x6F	; 111
    3ede:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee0:	80 81       	ld	r24, Z
    3ee2:	91 81       	ldd	r25, Z+1	; 0x01
    3ee4:	01 97       	sbiw	r24, 0x01	; 1
    3ee6:	11 96       	adiw	r26, 0x01	; 1
    3ee8:	9c 93       	st	X, r25
    3eea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eec:	fe 01       	movw	r30, r28
    3eee:	ef 56       	subi	r30, 0x6F	; 111
    3ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef2:	80 81       	ld	r24, Z
    3ef4:	91 81       	ldd	r25, Z+1	; 0x01
    3ef6:	00 97       	sbiw	r24, 0x00	; 0
    3ef8:	d1 f6       	brne	.-76     	; 0x3eae <Stepper_Cfg+0x166a>
    3efa:	27 c0       	rjmp	.+78     	; 0x3f4a <Stepper_Cfg+0x1706>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3efc:	8e 01       	movw	r16, r28
    3efe:	0f 56       	subi	r16, 0x6F	; 111
    3f00:	1f 4f       	sbci	r17, 0xFF	; 255
    3f02:	fe 01       	movw	r30, r28
    3f04:	ed 56       	subi	r30, 0x6D	; 109
    3f06:	ff 4f       	sbci	r31, 0xFF	; 255
    3f08:	60 81       	ld	r22, Z
    3f0a:	71 81       	ldd	r23, Z+1	; 0x01
    3f0c:	82 81       	ldd	r24, Z+2	; 0x02
    3f0e:	93 81       	ldd	r25, Z+3	; 0x03
    3f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f14:	dc 01       	movw	r26, r24
    3f16:	cb 01       	movw	r24, r22
    3f18:	f8 01       	movw	r30, r16
    3f1a:	91 83       	std	Z+1, r25	; 0x01
    3f1c:	80 83       	st	Z, r24
    3f1e:	de 01       	movw	r26, r28
    3f20:	a3 57       	subi	r26, 0x73	; 115
    3f22:	bf 4f       	sbci	r27, 0xFF	; 255
    3f24:	fe 01       	movw	r30, r28
    3f26:	ef 56       	subi	r30, 0x6F	; 111
    3f28:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2a:	80 81       	ld	r24, Z
    3f2c:	91 81       	ldd	r25, Z+1	; 0x01
    3f2e:	8d 93       	st	X+, r24
    3f30:	9c 93       	st	X, r25
    3f32:	fe 01       	movw	r30, r28
    3f34:	e3 57       	subi	r30, 0x73	; 115
    3f36:	ff 4f       	sbci	r31, 0xFF	; 255
    3f38:	80 81       	ld	r24, Z
    3f3a:	91 81       	ldd	r25, Z+1	; 0x01
    3f3c:	01 97       	sbiw	r24, 0x01	; 1
    3f3e:	f1 f7       	brne	.-4      	; 0x3f3c <Stepper_Cfg+0x16f8>
    3f40:	fe 01       	movw	r30, r28
    3f42:	e3 57       	subi	r30, 0x73	; 115
    3f44:	ff 4f       	sbci	r31, 0xFF	; 255
    3f46:	91 83       	std	Z+1, r25	; 0x01
    3f48:	80 83       	st	Z, r24
			DIO_write(mport,DIO_PIN1 , DIO_LOW);
    3f4a:	80 91 48 03 	lds	r24, 0x0348
    3f4e:	61 e0       	ldi	r22, 0x01	; 1
    3f50:	40 e0       	ldi	r20, 0x00	; 0
    3f52:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(mport,DIO_PIN3 , DIO_HIGH);
    3f56:	80 91 48 03 	lds	r24, 0x0348
    3f5a:	63 e0       	ldi	r22, 0x03	; 3
    3f5c:	41 e0       	ldi	r20, 0x01	; 1
    3f5e:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(mport,DIO_PIN4 , DIO_LOW);
    3f62:	80 91 48 03 	lds	r24, 0x0348
    3f66:	64 e0       	ldi	r22, 0x04	; 4
    3f68:	40 e0       	ldi	r20, 0x00	; 0
    3f6a:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(mport,DIO_PIN5 , DIO_LOW);
    3f6e:	80 91 48 03 	lds	r24, 0x0348
    3f72:	65 e0       	ldi	r22, 0x05	; 5
    3f74:	40 e0       	ldi	r20, 0x00	; 0
    3f76:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			_delay_ms(speed);
    3f7a:	fe 01       	movw	r30, r28
    3f7c:	ed 5b       	subi	r30, 0xBD	; 189
    3f7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f80:	80 81       	ld	r24, Z
    3f82:	88 2f       	mov	r24, r24
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	a0 e0       	ldi	r26, 0x00	; 0
    3f88:	b0 e0       	ldi	r27, 0x00	; 0
    3f8a:	bc 01       	movw	r22, r24
    3f8c:	cd 01       	movw	r24, r26
    3f8e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3f92:	dc 01       	movw	r26, r24
    3f94:	cb 01       	movw	r24, r22
    3f96:	fe 01       	movw	r30, r28
    3f98:	e7 57       	subi	r30, 0x77	; 119
    3f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9c:	80 83       	st	Z, r24
    3f9e:	91 83       	std	Z+1, r25	; 0x01
    3fa0:	a2 83       	std	Z+2, r26	; 0x02
    3fa2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fa4:	8e 01       	movw	r16, r28
    3fa6:	0b 57       	subi	r16, 0x7B	; 123
    3fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    3faa:	fe 01       	movw	r30, r28
    3fac:	e7 57       	subi	r30, 0x77	; 119
    3fae:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb0:	60 81       	ld	r22, Z
    3fb2:	71 81       	ldd	r23, Z+1	; 0x01
    3fb4:	82 81       	ldd	r24, Z+2	; 0x02
    3fb6:	93 81       	ldd	r25, Z+3	; 0x03
    3fb8:	20 e0       	ldi	r18, 0x00	; 0
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	4a e7       	ldi	r20, 0x7A	; 122
    3fbe:	53 e4       	ldi	r21, 0x43	; 67
    3fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	f8 01       	movw	r30, r16
    3fca:	80 83       	st	Z, r24
    3fcc:	91 83       	std	Z+1, r25	; 0x01
    3fce:	a2 83       	std	Z+2, r26	; 0x02
    3fd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fd2:	fe 01       	movw	r30, r28
    3fd4:	eb 57       	subi	r30, 0x7B	; 123
    3fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd8:	60 81       	ld	r22, Z
    3fda:	71 81       	ldd	r23, Z+1	; 0x01
    3fdc:	82 81       	ldd	r24, Z+2	; 0x02
    3fde:	93 81       	ldd	r25, Z+3	; 0x03
    3fe0:	20 e0       	ldi	r18, 0x00	; 0
    3fe2:	30 e0       	ldi	r19, 0x00	; 0
    3fe4:	40 e8       	ldi	r20, 0x80	; 128
    3fe6:	5f e3       	ldi	r21, 0x3F	; 63
    3fe8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fec:	88 23       	and	r24, r24
    3fee:	44 f4       	brge	.+16     	; 0x4000 <Stepper_Cfg+0x17bc>
		__ticks = 1;
    3ff0:	fe 01       	movw	r30, r28
    3ff2:	ed 57       	subi	r30, 0x7D	; 125
    3ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff6:	81 e0       	ldi	r24, 0x01	; 1
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	91 83       	std	Z+1, r25	; 0x01
    3ffc:	80 83       	st	Z, r24
    3ffe:	64 c0       	rjmp	.+200    	; 0x40c8 <Stepper_Cfg+0x1884>
	else if (__tmp > 65535)
    4000:	fe 01       	movw	r30, r28
    4002:	eb 57       	subi	r30, 0x7B	; 123
    4004:	ff 4f       	sbci	r31, 0xFF	; 255
    4006:	60 81       	ld	r22, Z
    4008:	71 81       	ldd	r23, Z+1	; 0x01
    400a:	82 81       	ldd	r24, Z+2	; 0x02
    400c:	93 81       	ldd	r25, Z+3	; 0x03
    400e:	20 e0       	ldi	r18, 0x00	; 0
    4010:	3f ef       	ldi	r19, 0xFF	; 255
    4012:	4f e7       	ldi	r20, 0x7F	; 127
    4014:	57 e4       	ldi	r21, 0x47	; 71
    4016:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    401a:	18 16       	cp	r1, r24
    401c:	0c f0       	brlt	.+2      	; 0x4020 <Stepper_Cfg+0x17dc>
    401e:	43 c0       	rjmp	.+134    	; 0x40a6 <Stepper_Cfg+0x1862>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4020:	fe 01       	movw	r30, r28
    4022:	e7 57       	subi	r30, 0x77	; 119
    4024:	ff 4f       	sbci	r31, 0xFF	; 255
    4026:	60 81       	ld	r22, Z
    4028:	71 81       	ldd	r23, Z+1	; 0x01
    402a:	82 81       	ldd	r24, Z+2	; 0x02
    402c:	93 81       	ldd	r25, Z+3	; 0x03
    402e:	20 e0       	ldi	r18, 0x00	; 0
    4030:	30 e0       	ldi	r19, 0x00	; 0
    4032:	40 e2       	ldi	r20, 0x20	; 32
    4034:	51 e4       	ldi	r21, 0x41	; 65
    4036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    403a:	dc 01       	movw	r26, r24
    403c:	cb 01       	movw	r24, r22
    403e:	8e 01       	movw	r16, r28
    4040:	0d 57       	subi	r16, 0x7D	; 125
    4042:	1f 4f       	sbci	r17, 0xFF	; 255
    4044:	bc 01       	movw	r22, r24
    4046:	cd 01       	movw	r24, r26
    4048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    404c:	dc 01       	movw	r26, r24
    404e:	cb 01       	movw	r24, r22
    4050:	f8 01       	movw	r30, r16
    4052:	91 83       	std	Z+1, r25	; 0x01
    4054:	80 83       	st	Z, r24
    4056:	1f c0       	rjmp	.+62     	; 0x4096 <Stepper_Cfg+0x1852>
    4058:	fe 01       	movw	r30, r28
    405a:	ef 57       	subi	r30, 0x7F	; 127
    405c:	ff 4f       	sbci	r31, 0xFF	; 255
    405e:	89 e1       	ldi	r24, 0x19	; 25
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	91 83       	std	Z+1, r25	; 0x01
    4064:	80 83       	st	Z, r24
    4066:	fe 01       	movw	r30, r28
    4068:	ef 57       	subi	r30, 0x7F	; 127
    406a:	ff 4f       	sbci	r31, 0xFF	; 255
    406c:	80 81       	ld	r24, Z
    406e:	91 81       	ldd	r25, Z+1	; 0x01
    4070:	01 97       	sbiw	r24, 0x01	; 1
    4072:	f1 f7       	brne	.-4      	; 0x4070 <Stepper_Cfg+0x182c>
    4074:	fe 01       	movw	r30, r28
    4076:	ef 57       	subi	r30, 0x7F	; 127
    4078:	ff 4f       	sbci	r31, 0xFF	; 255
    407a:	91 83       	std	Z+1, r25	; 0x01
    407c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    407e:	de 01       	movw	r26, r28
    4080:	ad 57       	subi	r26, 0x7D	; 125
    4082:	bf 4f       	sbci	r27, 0xFF	; 255
    4084:	fe 01       	movw	r30, r28
    4086:	ed 57       	subi	r30, 0x7D	; 125
    4088:	ff 4f       	sbci	r31, 0xFF	; 255
    408a:	80 81       	ld	r24, Z
    408c:	91 81       	ldd	r25, Z+1	; 0x01
    408e:	01 97       	sbiw	r24, 0x01	; 1
    4090:	11 96       	adiw	r26, 0x01	; 1
    4092:	9c 93       	st	X, r25
    4094:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4096:	fe 01       	movw	r30, r28
    4098:	ed 57       	subi	r30, 0x7D	; 125
    409a:	ff 4f       	sbci	r31, 0xFF	; 255
    409c:	80 81       	ld	r24, Z
    409e:	91 81       	ldd	r25, Z+1	; 0x01
    40a0:	00 97       	sbiw	r24, 0x00	; 0
    40a2:	d1 f6       	brne	.-76     	; 0x4058 <Stepper_Cfg+0x1814>
    40a4:	27 c0       	rjmp	.+78     	; 0x40f4 <Stepper_Cfg+0x18b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40a6:	8e 01       	movw	r16, r28
    40a8:	0d 57       	subi	r16, 0x7D	; 125
    40aa:	1f 4f       	sbci	r17, 0xFF	; 255
    40ac:	fe 01       	movw	r30, r28
    40ae:	eb 57       	subi	r30, 0x7B	; 123
    40b0:	ff 4f       	sbci	r31, 0xFF	; 255
    40b2:	60 81       	ld	r22, Z
    40b4:	71 81       	ldd	r23, Z+1	; 0x01
    40b6:	82 81       	ldd	r24, Z+2	; 0x02
    40b8:	93 81       	ldd	r25, Z+3	; 0x03
    40ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40be:	dc 01       	movw	r26, r24
    40c0:	cb 01       	movw	r24, r22
    40c2:	f8 01       	movw	r30, r16
    40c4:	91 83       	std	Z+1, r25	; 0x01
    40c6:	80 83       	st	Z, r24
    40c8:	de 01       	movw	r26, r28
    40ca:	a1 58       	subi	r26, 0x81	; 129
    40cc:	bf 4f       	sbci	r27, 0xFF	; 255
    40ce:	fe 01       	movw	r30, r28
    40d0:	ed 57       	subi	r30, 0x7D	; 125
    40d2:	ff 4f       	sbci	r31, 0xFF	; 255
    40d4:	80 81       	ld	r24, Z
    40d6:	91 81       	ldd	r25, Z+1	; 0x01
    40d8:	8d 93       	st	X+, r24
    40da:	9c 93       	st	X, r25
    40dc:	fe 01       	movw	r30, r28
    40de:	e1 58       	subi	r30, 0x81	; 129
    40e0:	ff 4f       	sbci	r31, 0xFF	; 255
    40e2:	80 81       	ld	r24, Z
    40e4:	91 81       	ldd	r25, Z+1	; 0x01
    40e6:	01 97       	sbiw	r24, 0x01	; 1
    40e8:	f1 f7       	brne	.-4      	; 0x40e6 <Stepper_Cfg+0x18a2>
    40ea:	fe 01       	movw	r30, r28
    40ec:	e1 58       	subi	r30, 0x81	; 129
    40ee:	ff 4f       	sbci	r31, 0xFF	; 255
    40f0:	91 83       	std	Z+1, r25	; 0x01
    40f2:	80 83       	st	Z, r24

			DIO_write(mport,DIO_PIN1 , DIO_HIGH);
    40f4:	80 91 48 03 	lds	r24, 0x0348
    40f8:	61 e0       	ldi	r22, 0x01	; 1
    40fa:	41 e0       	ldi	r20, 0x01	; 1
    40fc:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(mport,DIO_PIN3 , DIO_LOW);
    4100:	80 91 48 03 	lds	r24, 0x0348
    4104:	63 e0       	ldi	r22, 0x03	; 3
    4106:	40 e0       	ldi	r20, 0x00	; 0
    4108:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(mport,DIO_PIN4 , DIO_LOW);
    410c:	80 91 48 03 	lds	r24, 0x0348
    4110:	64 e0       	ldi	r22, 0x04	; 4
    4112:	40 e0       	ldi	r20, 0x00	; 0
    4114:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(mport,DIO_PIN5 , DIO_LOW);
    4118:	80 91 48 03 	lds	r24, 0x0348
    411c:	65 e0       	ldi	r22, 0x05	; 5
    411e:	40 e0       	ldi	r20, 0x00	; 0
    4120:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			_delay_ms(speed);
    4124:	fe 01       	movw	r30, r28
    4126:	ed 5b       	subi	r30, 0xBD	; 189
    4128:	fe 4f       	sbci	r31, 0xFE	; 254
    412a:	80 81       	ld	r24, Z
    412c:	88 2f       	mov	r24, r24
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	a0 e0       	ldi	r26, 0x00	; 0
    4132:	b0 e0       	ldi	r27, 0x00	; 0
    4134:	bc 01       	movw	r22, r24
    4136:	cd 01       	movw	r24, r26
    4138:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    413c:	dc 01       	movw	r26, r24
    413e:	cb 01       	movw	r24, r22
    4140:	fe 01       	movw	r30, r28
    4142:	e5 58       	subi	r30, 0x85	; 133
    4144:	ff 4f       	sbci	r31, 0xFF	; 255
    4146:	80 83       	st	Z, r24
    4148:	91 83       	std	Z+1, r25	; 0x01
    414a:	a2 83       	std	Z+2, r26	; 0x02
    414c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    414e:	8e 01       	movw	r16, r28
    4150:	09 58       	subi	r16, 0x89	; 137
    4152:	1f 4f       	sbci	r17, 0xFF	; 255
    4154:	fe 01       	movw	r30, r28
    4156:	e5 58       	subi	r30, 0x85	; 133
    4158:	ff 4f       	sbci	r31, 0xFF	; 255
    415a:	60 81       	ld	r22, Z
    415c:	71 81       	ldd	r23, Z+1	; 0x01
    415e:	82 81       	ldd	r24, Z+2	; 0x02
    4160:	93 81       	ldd	r25, Z+3	; 0x03
    4162:	20 e0       	ldi	r18, 0x00	; 0
    4164:	30 e0       	ldi	r19, 0x00	; 0
    4166:	4a e7       	ldi	r20, 0x7A	; 122
    4168:	53 e4       	ldi	r21, 0x43	; 67
    416a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    416e:	dc 01       	movw	r26, r24
    4170:	cb 01       	movw	r24, r22
    4172:	f8 01       	movw	r30, r16
    4174:	80 83       	st	Z, r24
    4176:	91 83       	std	Z+1, r25	; 0x01
    4178:	a2 83       	std	Z+2, r26	; 0x02
    417a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    417c:	fe 01       	movw	r30, r28
    417e:	e9 58       	subi	r30, 0x89	; 137
    4180:	ff 4f       	sbci	r31, 0xFF	; 255
    4182:	60 81       	ld	r22, Z
    4184:	71 81       	ldd	r23, Z+1	; 0x01
    4186:	82 81       	ldd	r24, Z+2	; 0x02
    4188:	93 81       	ldd	r25, Z+3	; 0x03
    418a:	20 e0       	ldi	r18, 0x00	; 0
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	40 e8       	ldi	r20, 0x80	; 128
    4190:	5f e3       	ldi	r21, 0x3F	; 63
    4192:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4196:	88 23       	and	r24, r24
    4198:	44 f4       	brge	.+16     	; 0x41aa <Stepper_Cfg+0x1966>
		__ticks = 1;
    419a:	fe 01       	movw	r30, r28
    419c:	eb 58       	subi	r30, 0x8B	; 139
    419e:	ff 4f       	sbci	r31, 0xFF	; 255
    41a0:	81 e0       	ldi	r24, 0x01	; 1
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	91 83       	std	Z+1, r25	; 0x01
    41a6:	80 83       	st	Z, r24
    41a8:	64 c0       	rjmp	.+200    	; 0x4272 <Stepper_Cfg+0x1a2e>
	else if (__tmp > 65535)
    41aa:	fe 01       	movw	r30, r28
    41ac:	e9 58       	subi	r30, 0x89	; 137
    41ae:	ff 4f       	sbci	r31, 0xFF	; 255
    41b0:	60 81       	ld	r22, Z
    41b2:	71 81       	ldd	r23, Z+1	; 0x01
    41b4:	82 81       	ldd	r24, Z+2	; 0x02
    41b6:	93 81       	ldd	r25, Z+3	; 0x03
    41b8:	20 e0       	ldi	r18, 0x00	; 0
    41ba:	3f ef       	ldi	r19, 0xFF	; 255
    41bc:	4f e7       	ldi	r20, 0x7F	; 127
    41be:	57 e4       	ldi	r21, 0x47	; 71
    41c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41c4:	18 16       	cp	r1, r24
    41c6:	0c f0       	brlt	.+2      	; 0x41ca <Stepper_Cfg+0x1986>
    41c8:	43 c0       	rjmp	.+134    	; 0x4250 <Stepper_Cfg+0x1a0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ca:	fe 01       	movw	r30, r28
    41cc:	e5 58       	subi	r30, 0x85	; 133
    41ce:	ff 4f       	sbci	r31, 0xFF	; 255
    41d0:	60 81       	ld	r22, Z
    41d2:	71 81       	ldd	r23, Z+1	; 0x01
    41d4:	82 81       	ldd	r24, Z+2	; 0x02
    41d6:	93 81       	ldd	r25, Z+3	; 0x03
    41d8:	20 e0       	ldi	r18, 0x00	; 0
    41da:	30 e0       	ldi	r19, 0x00	; 0
    41dc:	40 e2       	ldi	r20, 0x20	; 32
    41de:	51 e4       	ldi	r21, 0x41	; 65
    41e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e4:	dc 01       	movw	r26, r24
    41e6:	cb 01       	movw	r24, r22
    41e8:	8e 01       	movw	r16, r28
    41ea:	0b 58       	subi	r16, 0x8B	; 139
    41ec:	1f 4f       	sbci	r17, 0xFF	; 255
    41ee:	bc 01       	movw	r22, r24
    41f0:	cd 01       	movw	r24, r26
    41f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41f6:	dc 01       	movw	r26, r24
    41f8:	cb 01       	movw	r24, r22
    41fa:	f8 01       	movw	r30, r16
    41fc:	91 83       	std	Z+1, r25	; 0x01
    41fe:	80 83       	st	Z, r24
    4200:	1f c0       	rjmp	.+62     	; 0x4240 <Stepper_Cfg+0x19fc>
    4202:	fe 01       	movw	r30, r28
    4204:	ed 58       	subi	r30, 0x8D	; 141
    4206:	ff 4f       	sbci	r31, 0xFF	; 255
    4208:	89 e1       	ldi	r24, 0x19	; 25
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	91 83       	std	Z+1, r25	; 0x01
    420e:	80 83       	st	Z, r24
    4210:	fe 01       	movw	r30, r28
    4212:	ed 58       	subi	r30, 0x8D	; 141
    4214:	ff 4f       	sbci	r31, 0xFF	; 255
    4216:	80 81       	ld	r24, Z
    4218:	91 81       	ldd	r25, Z+1	; 0x01
    421a:	01 97       	sbiw	r24, 0x01	; 1
    421c:	f1 f7       	brne	.-4      	; 0x421a <Stepper_Cfg+0x19d6>
    421e:	fe 01       	movw	r30, r28
    4220:	ed 58       	subi	r30, 0x8D	; 141
    4222:	ff 4f       	sbci	r31, 0xFF	; 255
    4224:	91 83       	std	Z+1, r25	; 0x01
    4226:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4228:	de 01       	movw	r26, r28
    422a:	ab 58       	subi	r26, 0x8B	; 139
    422c:	bf 4f       	sbci	r27, 0xFF	; 255
    422e:	fe 01       	movw	r30, r28
    4230:	eb 58       	subi	r30, 0x8B	; 139
    4232:	ff 4f       	sbci	r31, 0xFF	; 255
    4234:	80 81       	ld	r24, Z
    4236:	91 81       	ldd	r25, Z+1	; 0x01
    4238:	01 97       	sbiw	r24, 0x01	; 1
    423a:	11 96       	adiw	r26, 0x01	; 1
    423c:	9c 93       	st	X, r25
    423e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4240:	fe 01       	movw	r30, r28
    4242:	eb 58       	subi	r30, 0x8B	; 139
    4244:	ff 4f       	sbci	r31, 0xFF	; 255
    4246:	80 81       	ld	r24, Z
    4248:	91 81       	ldd	r25, Z+1	; 0x01
    424a:	00 97       	sbiw	r24, 0x00	; 0
    424c:	d1 f6       	brne	.-76     	; 0x4202 <Stepper_Cfg+0x19be>
    424e:	a0 c5       	rjmp	.+2880   	; 0x4d90 <Stepper_Cfg+0x254c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4250:	8e 01       	movw	r16, r28
    4252:	0b 58       	subi	r16, 0x8B	; 139
    4254:	1f 4f       	sbci	r17, 0xFF	; 255
    4256:	fe 01       	movw	r30, r28
    4258:	e9 58       	subi	r30, 0x89	; 137
    425a:	ff 4f       	sbci	r31, 0xFF	; 255
    425c:	60 81       	ld	r22, Z
    425e:	71 81       	ldd	r23, Z+1	; 0x01
    4260:	82 81       	ldd	r24, Z+2	; 0x02
    4262:	93 81       	ldd	r25, Z+3	; 0x03
    4264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4268:	dc 01       	movw	r26, r24
    426a:	cb 01       	movw	r24, r22
    426c:	f8 01       	movw	r30, r16
    426e:	91 83       	std	Z+1, r25	; 0x01
    4270:	80 83       	st	Z, r24
    4272:	de 01       	movw	r26, r28
    4274:	af 58       	subi	r26, 0x8F	; 143
    4276:	bf 4f       	sbci	r27, 0xFF	; 255
    4278:	fe 01       	movw	r30, r28
    427a:	eb 58       	subi	r30, 0x8B	; 139
    427c:	ff 4f       	sbci	r31, 0xFF	; 255
    427e:	80 81       	ld	r24, Z
    4280:	91 81       	ldd	r25, Z+1	; 0x01
    4282:	11 96       	adiw	r26, 0x01	; 1
    4284:	9c 93       	st	X, r25
    4286:	8e 93       	st	-X, r24
    4288:	fe 01       	movw	r30, r28
    428a:	ef 58       	subi	r30, 0x8F	; 143
    428c:	ff 4f       	sbci	r31, 0xFF	; 255
    428e:	80 81       	ld	r24, Z
    4290:	91 81       	ldd	r25, Z+1	; 0x01
    4292:	01 97       	sbiw	r24, 0x01	; 1
    4294:	f1 f7       	brne	.-4      	; 0x4292 <Stepper_Cfg+0x1a4e>
    4296:	fe 01       	movw	r30, r28
    4298:	ef 58       	subi	r30, 0x8F	; 143
    429a:	ff 4f       	sbci	r31, 0xFF	; 255
    429c:	91 83       	std	Z+1, r25	; 0x01
    429e:	80 83       	st	Z, r24
    42a0:	77 c5       	rjmp	.+2798   	; 0x4d90 <Stepper_Cfg+0x254c>

			break;
		break;

case HIGH_NIPPLE:
	DIO_write(mport,DIO_PIN4 , DIO_LOW);
    42a2:	80 91 48 03 	lds	r24, 0x0348
    42a6:	64 e0       	ldi	r22, 0x04	; 4
    42a8:	40 e0       	ldi	r20, 0x00	; 0
    42aa:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN5 , DIO_LOW);
    42ae:	80 91 48 03 	lds	r24, 0x0348
    42b2:	65 e0       	ldi	r22, 0x05	; 5
    42b4:	40 e0       	ldi	r20, 0x00	; 0
    42b6:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN6 , DIO_LOW);
    42ba:	80 91 48 03 	lds	r24, 0x0348
    42be:	66 e0       	ldi	r22, 0x06	; 6
    42c0:	40 e0       	ldi	r20, 0x00	; 0
    42c2:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN7 , DIO_HIGH);
    42c6:	80 91 48 03 	lds	r24, 0x0348
    42ca:	67 e0       	ldi	r22, 0x07	; 7
    42cc:	41 e0       	ldi	r20, 0x01	; 1
    42ce:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>


	_delay_ms(speed);
    42d2:	fe 01       	movw	r30, r28
    42d4:	ed 5b       	subi	r30, 0xBD	; 189
    42d6:	fe 4f       	sbci	r31, 0xFE	; 254
    42d8:	80 81       	ld	r24, Z
    42da:	88 2f       	mov	r24, r24
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	a0 e0       	ldi	r26, 0x00	; 0
    42e0:	b0 e0       	ldi	r27, 0x00	; 0
    42e2:	bc 01       	movw	r22, r24
    42e4:	cd 01       	movw	r24, r26
    42e6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    42ea:	dc 01       	movw	r26, r24
    42ec:	cb 01       	movw	r24, r22
    42ee:	fe 01       	movw	r30, r28
    42f0:	e3 59       	subi	r30, 0x93	; 147
    42f2:	ff 4f       	sbci	r31, 0xFF	; 255
    42f4:	80 83       	st	Z, r24
    42f6:	91 83       	std	Z+1, r25	; 0x01
    42f8:	a2 83       	std	Z+2, r26	; 0x02
    42fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42fc:	8e 01       	movw	r16, r28
    42fe:	07 59       	subi	r16, 0x97	; 151
    4300:	1f 4f       	sbci	r17, 0xFF	; 255
    4302:	fe 01       	movw	r30, r28
    4304:	e3 59       	subi	r30, 0x93	; 147
    4306:	ff 4f       	sbci	r31, 0xFF	; 255
    4308:	60 81       	ld	r22, Z
    430a:	71 81       	ldd	r23, Z+1	; 0x01
    430c:	82 81       	ldd	r24, Z+2	; 0x02
    430e:	93 81       	ldd	r25, Z+3	; 0x03
    4310:	20 e0       	ldi	r18, 0x00	; 0
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	4a e7       	ldi	r20, 0x7A	; 122
    4316:	53 e4       	ldi	r21, 0x43	; 67
    4318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    431c:	dc 01       	movw	r26, r24
    431e:	cb 01       	movw	r24, r22
    4320:	f8 01       	movw	r30, r16
    4322:	80 83       	st	Z, r24
    4324:	91 83       	std	Z+1, r25	; 0x01
    4326:	a2 83       	std	Z+2, r26	; 0x02
    4328:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    432a:	fe 01       	movw	r30, r28
    432c:	e7 59       	subi	r30, 0x97	; 151
    432e:	ff 4f       	sbci	r31, 0xFF	; 255
    4330:	60 81       	ld	r22, Z
    4332:	71 81       	ldd	r23, Z+1	; 0x01
    4334:	82 81       	ldd	r24, Z+2	; 0x02
    4336:	93 81       	ldd	r25, Z+3	; 0x03
    4338:	20 e0       	ldi	r18, 0x00	; 0
    433a:	30 e0       	ldi	r19, 0x00	; 0
    433c:	40 e8       	ldi	r20, 0x80	; 128
    433e:	5f e3       	ldi	r21, 0x3F	; 63
    4340:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4344:	88 23       	and	r24, r24
    4346:	44 f4       	brge	.+16     	; 0x4358 <Stepper_Cfg+0x1b14>
		__ticks = 1;
    4348:	fe 01       	movw	r30, r28
    434a:	e9 59       	subi	r30, 0x99	; 153
    434c:	ff 4f       	sbci	r31, 0xFF	; 255
    434e:	81 e0       	ldi	r24, 0x01	; 1
    4350:	90 e0       	ldi	r25, 0x00	; 0
    4352:	91 83       	std	Z+1, r25	; 0x01
    4354:	80 83       	st	Z, r24
    4356:	64 c0       	rjmp	.+200    	; 0x4420 <Stepper_Cfg+0x1bdc>
	else if (__tmp > 65535)
    4358:	fe 01       	movw	r30, r28
    435a:	e7 59       	subi	r30, 0x97	; 151
    435c:	ff 4f       	sbci	r31, 0xFF	; 255
    435e:	60 81       	ld	r22, Z
    4360:	71 81       	ldd	r23, Z+1	; 0x01
    4362:	82 81       	ldd	r24, Z+2	; 0x02
    4364:	93 81       	ldd	r25, Z+3	; 0x03
    4366:	20 e0       	ldi	r18, 0x00	; 0
    4368:	3f ef       	ldi	r19, 0xFF	; 255
    436a:	4f e7       	ldi	r20, 0x7F	; 127
    436c:	57 e4       	ldi	r21, 0x47	; 71
    436e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4372:	18 16       	cp	r1, r24
    4374:	0c f0       	brlt	.+2      	; 0x4378 <Stepper_Cfg+0x1b34>
    4376:	43 c0       	rjmp	.+134    	; 0x43fe <Stepper_Cfg+0x1bba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4378:	fe 01       	movw	r30, r28
    437a:	e3 59       	subi	r30, 0x93	; 147
    437c:	ff 4f       	sbci	r31, 0xFF	; 255
    437e:	60 81       	ld	r22, Z
    4380:	71 81       	ldd	r23, Z+1	; 0x01
    4382:	82 81       	ldd	r24, Z+2	; 0x02
    4384:	93 81       	ldd	r25, Z+3	; 0x03
    4386:	20 e0       	ldi	r18, 0x00	; 0
    4388:	30 e0       	ldi	r19, 0x00	; 0
    438a:	40 e2       	ldi	r20, 0x20	; 32
    438c:	51 e4       	ldi	r21, 0x41	; 65
    438e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4392:	dc 01       	movw	r26, r24
    4394:	cb 01       	movw	r24, r22
    4396:	8e 01       	movw	r16, r28
    4398:	09 59       	subi	r16, 0x99	; 153
    439a:	1f 4f       	sbci	r17, 0xFF	; 255
    439c:	bc 01       	movw	r22, r24
    439e:	cd 01       	movw	r24, r26
    43a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43a4:	dc 01       	movw	r26, r24
    43a6:	cb 01       	movw	r24, r22
    43a8:	f8 01       	movw	r30, r16
    43aa:	91 83       	std	Z+1, r25	; 0x01
    43ac:	80 83       	st	Z, r24
    43ae:	1f c0       	rjmp	.+62     	; 0x43ee <Stepper_Cfg+0x1baa>
    43b0:	fe 01       	movw	r30, r28
    43b2:	eb 59       	subi	r30, 0x9B	; 155
    43b4:	ff 4f       	sbci	r31, 0xFF	; 255
    43b6:	89 e1       	ldi	r24, 0x19	; 25
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	91 83       	std	Z+1, r25	; 0x01
    43bc:	80 83       	st	Z, r24
    43be:	fe 01       	movw	r30, r28
    43c0:	eb 59       	subi	r30, 0x9B	; 155
    43c2:	ff 4f       	sbci	r31, 0xFF	; 255
    43c4:	80 81       	ld	r24, Z
    43c6:	91 81       	ldd	r25, Z+1	; 0x01
    43c8:	01 97       	sbiw	r24, 0x01	; 1
    43ca:	f1 f7       	brne	.-4      	; 0x43c8 <Stepper_Cfg+0x1b84>
    43cc:	fe 01       	movw	r30, r28
    43ce:	eb 59       	subi	r30, 0x9B	; 155
    43d0:	ff 4f       	sbci	r31, 0xFF	; 255
    43d2:	91 83       	std	Z+1, r25	; 0x01
    43d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43d6:	de 01       	movw	r26, r28
    43d8:	a9 59       	subi	r26, 0x99	; 153
    43da:	bf 4f       	sbci	r27, 0xFF	; 255
    43dc:	fe 01       	movw	r30, r28
    43de:	e9 59       	subi	r30, 0x99	; 153
    43e0:	ff 4f       	sbci	r31, 0xFF	; 255
    43e2:	80 81       	ld	r24, Z
    43e4:	91 81       	ldd	r25, Z+1	; 0x01
    43e6:	01 97       	sbiw	r24, 0x01	; 1
    43e8:	11 96       	adiw	r26, 0x01	; 1
    43ea:	9c 93       	st	X, r25
    43ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ee:	fe 01       	movw	r30, r28
    43f0:	e9 59       	subi	r30, 0x99	; 153
    43f2:	ff 4f       	sbci	r31, 0xFF	; 255
    43f4:	80 81       	ld	r24, Z
    43f6:	91 81       	ldd	r25, Z+1	; 0x01
    43f8:	00 97       	sbiw	r24, 0x00	; 0
    43fa:	d1 f6       	brne	.-76     	; 0x43b0 <Stepper_Cfg+0x1b6c>
    43fc:	27 c0       	rjmp	.+78     	; 0x444c <Stepper_Cfg+0x1c08>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43fe:	8e 01       	movw	r16, r28
    4400:	09 59       	subi	r16, 0x99	; 153
    4402:	1f 4f       	sbci	r17, 0xFF	; 255
    4404:	fe 01       	movw	r30, r28
    4406:	e7 59       	subi	r30, 0x97	; 151
    4408:	ff 4f       	sbci	r31, 0xFF	; 255
    440a:	60 81       	ld	r22, Z
    440c:	71 81       	ldd	r23, Z+1	; 0x01
    440e:	82 81       	ldd	r24, Z+2	; 0x02
    4410:	93 81       	ldd	r25, Z+3	; 0x03
    4412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4416:	dc 01       	movw	r26, r24
    4418:	cb 01       	movw	r24, r22
    441a:	f8 01       	movw	r30, r16
    441c:	91 83       	std	Z+1, r25	; 0x01
    441e:	80 83       	st	Z, r24
    4420:	de 01       	movw	r26, r28
    4422:	ad 59       	subi	r26, 0x9D	; 157
    4424:	bf 4f       	sbci	r27, 0xFF	; 255
    4426:	fe 01       	movw	r30, r28
    4428:	e9 59       	subi	r30, 0x99	; 153
    442a:	ff 4f       	sbci	r31, 0xFF	; 255
    442c:	80 81       	ld	r24, Z
    442e:	91 81       	ldd	r25, Z+1	; 0x01
    4430:	8d 93       	st	X+, r24
    4432:	9c 93       	st	X, r25
    4434:	fe 01       	movw	r30, r28
    4436:	ed 59       	subi	r30, 0x9D	; 157
    4438:	ff 4f       	sbci	r31, 0xFF	; 255
    443a:	80 81       	ld	r24, Z
    443c:	91 81       	ldd	r25, Z+1	; 0x01
    443e:	01 97       	sbiw	r24, 0x01	; 1
    4440:	f1 f7       	brne	.-4      	; 0x443e <Stepper_Cfg+0x1bfa>
    4442:	fe 01       	movw	r30, r28
    4444:	ed 59       	subi	r30, 0x9D	; 157
    4446:	ff 4f       	sbci	r31, 0xFF	; 255
    4448:	91 83       	std	Z+1, r25	; 0x01
    444a:	80 83       	st	Z, r24
	DIO_write(mport,DIO_PIN4 , DIO_LOW);
    444c:	80 91 48 03 	lds	r24, 0x0348
    4450:	64 e0       	ldi	r22, 0x04	; 4
    4452:	40 e0       	ldi	r20, 0x00	; 0
    4454:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN5 , DIO_LOW);
    4458:	80 91 48 03 	lds	r24, 0x0348
    445c:	65 e0       	ldi	r22, 0x05	; 5
    445e:	40 e0       	ldi	r20, 0x00	; 0
    4460:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN6 , DIO_HIGH);
    4464:	80 91 48 03 	lds	r24, 0x0348
    4468:	66 e0       	ldi	r22, 0x06	; 6
    446a:	41 e0       	ldi	r20, 0x01	; 1
    446c:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN7 , DIO_LOW);
    4470:	80 91 48 03 	lds	r24, 0x0348
    4474:	67 e0       	ldi	r22, 0x07	; 7
    4476:	40 e0       	ldi	r20, 0x00	; 0
    4478:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>

	_delay_ms(speed);
    447c:	fe 01       	movw	r30, r28
    447e:	ed 5b       	subi	r30, 0xBD	; 189
    4480:	fe 4f       	sbci	r31, 0xFE	; 254
    4482:	80 81       	ld	r24, Z
    4484:	88 2f       	mov	r24, r24
    4486:	90 e0       	ldi	r25, 0x00	; 0
    4488:	a0 e0       	ldi	r26, 0x00	; 0
    448a:	b0 e0       	ldi	r27, 0x00	; 0
    448c:	bc 01       	movw	r22, r24
    448e:	cd 01       	movw	r24, r26
    4490:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4494:	dc 01       	movw	r26, r24
    4496:	cb 01       	movw	r24, r22
    4498:	fe 01       	movw	r30, r28
    449a:	e1 5a       	subi	r30, 0xA1	; 161
    449c:	ff 4f       	sbci	r31, 0xFF	; 255
    449e:	80 83       	st	Z, r24
    44a0:	91 83       	std	Z+1, r25	; 0x01
    44a2:	a2 83       	std	Z+2, r26	; 0x02
    44a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44a6:	8e 01       	movw	r16, r28
    44a8:	05 5a       	subi	r16, 0xA5	; 165
    44aa:	1f 4f       	sbci	r17, 0xFF	; 255
    44ac:	fe 01       	movw	r30, r28
    44ae:	e1 5a       	subi	r30, 0xA1	; 161
    44b0:	ff 4f       	sbci	r31, 0xFF	; 255
    44b2:	60 81       	ld	r22, Z
    44b4:	71 81       	ldd	r23, Z+1	; 0x01
    44b6:	82 81       	ldd	r24, Z+2	; 0x02
    44b8:	93 81       	ldd	r25, Z+3	; 0x03
    44ba:	20 e0       	ldi	r18, 0x00	; 0
    44bc:	30 e0       	ldi	r19, 0x00	; 0
    44be:	4a e7       	ldi	r20, 0x7A	; 122
    44c0:	53 e4       	ldi	r21, 0x43	; 67
    44c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44c6:	dc 01       	movw	r26, r24
    44c8:	cb 01       	movw	r24, r22
    44ca:	f8 01       	movw	r30, r16
    44cc:	80 83       	st	Z, r24
    44ce:	91 83       	std	Z+1, r25	; 0x01
    44d0:	a2 83       	std	Z+2, r26	; 0x02
    44d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44d4:	fe 01       	movw	r30, r28
    44d6:	e5 5a       	subi	r30, 0xA5	; 165
    44d8:	ff 4f       	sbci	r31, 0xFF	; 255
    44da:	60 81       	ld	r22, Z
    44dc:	71 81       	ldd	r23, Z+1	; 0x01
    44de:	82 81       	ldd	r24, Z+2	; 0x02
    44e0:	93 81       	ldd	r25, Z+3	; 0x03
    44e2:	20 e0       	ldi	r18, 0x00	; 0
    44e4:	30 e0       	ldi	r19, 0x00	; 0
    44e6:	40 e8       	ldi	r20, 0x80	; 128
    44e8:	5f e3       	ldi	r21, 0x3F	; 63
    44ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44ee:	88 23       	and	r24, r24
    44f0:	44 f4       	brge	.+16     	; 0x4502 <Stepper_Cfg+0x1cbe>
		__ticks = 1;
    44f2:	fe 01       	movw	r30, r28
    44f4:	e7 5a       	subi	r30, 0xA7	; 167
    44f6:	ff 4f       	sbci	r31, 0xFF	; 255
    44f8:	81 e0       	ldi	r24, 0x01	; 1
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	91 83       	std	Z+1, r25	; 0x01
    44fe:	80 83       	st	Z, r24
    4500:	64 c0       	rjmp	.+200    	; 0x45ca <Stepper_Cfg+0x1d86>
	else if (__tmp > 65535)
    4502:	fe 01       	movw	r30, r28
    4504:	e5 5a       	subi	r30, 0xA5	; 165
    4506:	ff 4f       	sbci	r31, 0xFF	; 255
    4508:	60 81       	ld	r22, Z
    450a:	71 81       	ldd	r23, Z+1	; 0x01
    450c:	82 81       	ldd	r24, Z+2	; 0x02
    450e:	93 81       	ldd	r25, Z+3	; 0x03
    4510:	20 e0       	ldi	r18, 0x00	; 0
    4512:	3f ef       	ldi	r19, 0xFF	; 255
    4514:	4f e7       	ldi	r20, 0x7F	; 127
    4516:	57 e4       	ldi	r21, 0x47	; 71
    4518:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    451c:	18 16       	cp	r1, r24
    451e:	0c f0       	brlt	.+2      	; 0x4522 <Stepper_Cfg+0x1cde>
    4520:	43 c0       	rjmp	.+134    	; 0x45a8 <Stepper_Cfg+0x1d64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4522:	fe 01       	movw	r30, r28
    4524:	e1 5a       	subi	r30, 0xA1	; 161
    4526:	ff 4f       	sbci	r31, 0xFF	; 255
    4528:	60 81       	ld	r22, Z
    452a:	71 81       	ldd	r23, Z+1	; 0x01
    452c:	82 81       	ldd	r24, Z+2	; 0x02
    452e:	93 81       	ldd	r25, Z+3	; 0x03
    4530:	20 e0       	ldi	r18, 0x00	; 0
    4532:	30 e0       	ldi	r19, 0x00	; 0
    4534:	40 e2       	ldi	r20, 0x20	; 32
    4536:	51 e4       	ldi	r21, 0x41	; 65
    4538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    453c:	dc 01       	movw	r26, r24
    453e:	cb 01       	movw	r24, r22
    4540:	8e 01       	movw	r16, r28
    4542:	07 5a       	subi	r16, 0xA7	; 167
    4544:	1f 4f       	sbci	r17, 0xFF	; 255
    4546:	bc 01       	movw	r22, r24
    4548:	cd 01       	movw	r24, r26
    454a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    454e:	dc 01       	movw	r26, r24
    4550:	cb 01       	movw	r24, r22
    4552:	f8 01       	movw	r30, r16
    4554:	91 83       	std	Z+1, r25	; 0x01
    4556:	80 83       	st	Z, r24
    4558:	1f c0       	rjmp	.+62     	; 0x4598 <Stepper_Cfg+0x1d54>
    455a:	fe 01       	movw	r30, r28
    455c:	e9 5a       	subi	r30, 0xA9	; 169
    455e:	ff 4f       	sbci	r31, 0xFF	; 255
    4560:	89 e1       	ldi	r24, 0x19	; 25
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	91 83       	std	Z+1, r25	; 0x01
    4566:	80 83       	st	Z, r24
    4568:	fe 01       	movw	r30, r28
    456a:	e9 5a       	subi	r30, 0xA9	; 169
    456c:	ff 4f       	sbci	r31, 0xFF	; 255
    456e:	80 81       	ld	r24, Z
    4570:	91 81       	ldd	r25, Z+1	; 0x01
    4572:	01 97       	sbiw	r24, 0x01	; 1
    4574:	f1 f7       	brne	.-4      	; 0x4572 <Stepper_Cfg+0x1d2e>
    4576:	fe 01       	movw	r30, r28
    4578:	e9 5a       	subi	r30, 0xA9	; 169
    457a:	ff 4f       	sbci	r31, 0xFF	; 255
    457c:	91 83       	std	Z+1, r25	; 0x01
    457e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4580:	de 01       	movw	r26, r28
    4582:	a7 5a       	subi	r26, 0xA7	; 167
    4584:	bf 4f       	sbci	r27, 0xFF	; 255
    4586:	fe 01       	movw	r30, r28
    4588:	e7 5a       	subi	r30, 0xA7	; 167
    458a:	ff 4f       	sbci	r31, 0xFF	; 255
    458c:	80 81       	ld	r24, Z
    458e:	91 81       	ldd	r25, Z+1	; 0x01
    4590:	01 97       	sbiw	r24, 0x01	; 1
    4592:	11 96       	adiw	r26, 0x01	; 1
    4594:	9c 93       	st	X, r25
    4596:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4598:	fe 01       	movw	r30, r28
    459a:	e7 5a       	subi	r30, 0xA7	; 167
    459c:	ff 4f       	sbci	r31, 0xFF	; 255
    459e:	80 81       	ld	r24, Z
    45a0:	91 81       	ldd	r25, Z+1	; 0x01
    45a2:	00 97       	sbiw	r24, 0x00	; 0
    45a4:	d1 f6       	brne	.-76     	; 0x455a <Stepper_Cfg+0x1d16>
    45a6:	27 c0       	rjmp	.+78     	; 0x45f6 <Stepper_Cfg+0x1db2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45a8:	8e 01       	movw	r16, r28
    45aa:	07 5a       	subi	r16, 0xA7	; 167
    45ac:	1f 4f       	sbci	r17, 0xFF	; 255
    45ae:	fe 01       	movw	r30, r28
    45b0:	e5 5a       	subi	r30, 0xA5	; 165
    45b2:	ff 4f       	sbci	r31, 0xFF	; 255
    45b4:	60 81       	ld	r22, Z
    45b6:	71 81       	ldd	r23, Z+1	; 0x01
    45b8:	82 81       	ldd	r24, Z+2	; 0x02
    45ba:	93 81       	ldd	r25, Z+3	; 0x03
    45bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45c0:	dc 01       	movw	r26, r24
    45c2:	cb 01       	movw	r24, r22
    45c4:	f8 01       	movw	r30, r16
    45c6:	91 83       	std	Z+1, r25	; 0x01
    45c8:	80 83       	st	Z, r24
    45ca:	de 01       	movw	r26, r28
    45cc:	ab 5a       	subi	r26, 0xAB	; 171
    45ce:	bf 4f       	sbci	r27, 0xFF	; 255
    45d0:	fe 01       	movw	r30, r28
    45d2:	e7 5a       	subi	r30, 0xA7	; 167
    45d4:	ff 4f       	sbci	r31, 0xFF	; 255
    45d6:	80 81       	ld	r24, Z
    45d8:	91 81       	ldd	r25, Z+1	; 0x01
    45da:	8d 93       	st	X+, r24
    45dc:	9c 93       	st	X, r25
    45de:	fe 01       	movw	r30, r28
    45e0:	eb 5a       	subi	r30, 0xAB	; 171
    45e2:	ff 4f       	sbci	r31, 0xFF	; 255
    45e4:	80 81       	ld	r24, Z
    45e6:	91 81       	ldd	r25, Z+1	; 0x01
    45e8:	01 97       	sbiw	r24, 0x01	; 1
    45ea:	f1 f7       	brne	.-4      	; 0x45e8 <Stepper_Cfg+0x1da4>
    45ec:	fe 01       	movw	r30, r28
    45ee:	eb 5a       	subi	r30, 0xAB	; 171
    45f0:	ff 4f       	sbci	r31, 0xFF	; 255
    45f2:	91 83       	std	Z+1, r25	; 0x01
    45f4:	80 83       	st	Z, r24
	DIO_write(mport,DIO_PIN4 , DIO_LOW);
    45f6:	80 91 48 03 	lds	r24, 0x0348
    45fa:	64 e0       	ldi	r22, 0x04	; 4
    45fc:	40 e0       	ldi	r20, 0x00	; 0
    45fe:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN5 , DIO_HIGH);
    4602:	80 91 48 03 	lds	r24, 0x0348
    4606:	65 e0       	ldi	r22, 0x05	; 5
    4608:	41 e0       	ldi	r20, 0x01	; 1
    460a:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN6 , DIO_LOW);
    460e:	80 91 48 03 	lds	r24, 0x0348
    4612:	66 e0       	ldi	r22, 0x06	; 6
    4614:	40 e0       	ldi	r20, 0x00	; 0
    4616:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN7 , DIO_LOW);
    461a:	80 91 48 03 	lds	r24, 0x0348
    461e:	67 e0       	ldi	r22, 0x07	; 7
    4620:	40 e0       	ldi	r20, 0x00	; 0
    4622:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	_delay_ms(speed);
    4626:	fe 01       	movw	r30, r28
    4628:	ed 5b       	subi	r30, 0xBD	; 189
    462a:	fe 4f       	sbci	r31, 0xFE	; 254
    462c:	80 81       	ld	r24, Z
    462e:	88 2f       	mov	r24, r24
    4630:	90 e0       	ldi	r25, 0x00	; 0
    4632:	a0 e0       	ldi	r26, 0x00	; 0
    4634:	b0 e0       	ldi	r27, 0x00	; 0
    4636:	bc 01       	movw	r22, r24
    4638:	cd 01       	movw	r24, r26
    463a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    463e:	dc 01       	movw	r26, r24
    4640:	cb 01       	movw	r24, r22
    4642:	fe 01       	movw	r30, r28
    4644:	ef 5a       	subi	r30, 0xAF	; 175
    4646:	ff 4f       	sbci	r31, 0xFF	; 255
    4648:	80 83       	st	Z, r24
    464a:	91 83       	std	Z+1, r25	; 0x01
    464c:	a2 83       	std	Z+2, r26	; 0x02
    464e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4650:	8e 01       	movw	r16, r28
    4652:	03 5b       	subi	r16, 0xB3	; 179
    4654:	1f 4f       	sbci	r17, 0xFF	; 255
    4656:	fe 01       	movw	r30, r28
    4658:	ef 5a       	subi	r30, 0xAF	; 175
    465a:	ff 4f       	sbci	r31, 0xFF	; 255
    465c:	60 81       	ld	r22, Z
    465e:	71 81       	ldd	r23, Z+1	; 0x01
    4660:	82 81       	ldd	r24, Z+2	; 0x02
    4662:	93 81       	ldd	r25, Z+3	; 0x03
    4664:	20 e0       	ldi	r18, 0x00	; 0
    4666:	30 e0       	ldi	r19, 0x00	; 0
    4668:	4a e7       	ldi	r20, 0x7A	; 122
    466a:	53 e4       	ldi	r21, 0x43	; 67
    466c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4670:	dc 01       	movw	r26, r24
    4672:	cb 01       	movw	r24, r22
    4674:	f8 01       	movw	r30, r16
    4676:	80 83       	st	Z, r24
    4678:	91 83       	std	Z+1, r25	; 0x01
    467a:	a2 83       	std	Z+2, r26	; 0x02
    467c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    467e:	fe 01       	movw	r30, r28
    4680:	e3 5b       	subi	r30, 0xB3	; 179
    4682:	ff 4f       	sbci	r31, 0xFF	; 255
    4684:	60 81       	ld	r22, Z
    4686:	71 81       	ldd	r23, Z+1	; 0x01
    4688:	82 81       	ldd	r24, Z+2	; 0x02
    468a:	93 81       	ldd	r25, Z+3	; 0x03
    468c:	20 e0       	ldi	r18, 0x00	; 0
    468e:	30 e0       	ldi	r19, 0x00	; 0
    4690:	40 e8       	ldi	r20, 0x80	; 128
    4692:	5f e3       	ldi	r21, 0x3F	; 63
    4694:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4698:	88 23       	and	r24, r24
    469a:	44 f4       	brge	.+16     	; 0x46ac <Stepper_Cfg+0x1e68>
		__ticks = 1;
    469c:	fe 01       	movw	r30, r28
    469e:	e5 5b       	subi	r30, 0xB5	; 181
    46a0:	ff 4f       	sbci	r31, 0xFF	; 255
    46a2:	81 e0       	ldi	r24, 0x01	; 1
    46a4:	90 e0       	ldi	r25, 0x00	; 0
    46a6:	91 83       	std	Z+1, r25	; 0x01
    46a8:	80 83       	st	Z, r24
    46aa:	64 c0       	rjmp	.+200    	; 0x4774 <Stepper_Cfg+0x1f30>
	else if (__tmp > 65535)
    46ac:	fe 01       	movw	r30, r28
    46ae:	e3 5b       	subi	r30, 0xB3	; 179
    46b0:	ff 4f       	sbci	r31, 0xFF	; 255
    46b2:	60 81       	ld	r22, Z
    46b4:	71 81       	ldd	r23, Z+1	; 0x01
    46b6:	82 81       	ldd	r24, Z+2	; 0x02
    46b8:	93 81       	ldd	r25, Z+3	; 0x03
    46ba:	20 e0       	ldi	r18, 0x00	; 0
    46bc:	3f ef       	ldi	r19, 0xFF	; 255
    46be:	4f e7       	ldi	r20, 0x7F	; 127
    46c0:	57 e4       	ldi	r21, 0x47	; 71
    46c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46c6:	18 16       	cp	r1, r24
    46c8:	0c f0       	brlt	.+2      	; 0x46cc <Stepper_Cfg+0x1e88>
    46ca:	43 c0       	rjmp	.+134    	; 0x4752 <Stepper_Cfg+0x1f0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46cc:	fe 01       	movw	r30, r28
    46ce:	ef 5a       	subi	r30, 0xAF	; 175
    46d0:	ff 4f       	sbci	r31, 0xFF	; 255
    46d2:	60 81       	ld	r22, Z
    46d4:	71 81       	ldd	r23, Z+1	; 0x01
    46d6:	82 81       	ldd	r24, Z+2	; 0x02
    46d8:	93 81       	ldd	r25, Z+3	; 0x03
    46da:	20 e0       	ldi	r18, 0x00	; 0
    46dc:	30 e0       	ldi	r19, 0x00	; 0
    46de:	40 e2       	ldi	r20, 0x20	; 32
    46e0:	51 e4       	ldi	r21, 0x41	; 65
    46e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46e6:	dc 01       	movw	r26, r24
    46e8:	cb 01       	movw	r24, r22
    46ea:	8e 01       	movw	r16, r28
    46ec:	05 5b       	subi	r16, 0xB5	; 181
    46ee:	1f 4f       	sbci	r17, 0xFF	; 255
    46f0:	bc 01       	movw	r22, r24
    46f2:	cd 01       	movw	r24, r26
    46f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46f8:	dc 01       	movw	r26, r24
    46fa:	cb 01       	movw	r24, r22
    46fc:	f8 01       	movw	r30, r16
    46fe:	91 83       	std	Z+1, r25	; 0x01
    4700:	80 83       	st	Z, r24
    4702:	1f c0       	rjmp	.+62     	; 0x4742 <Stepper_Cfg+0x1efe>
    4704:	fe 01       	movw	r30, r28
    4706:	e7 5b       	subi	r30, 0xB7	; 183
    4708:	ff 4f       	sbci	r31, 0xFF	; 255
    470a:	89 e1       	ldi	r24, 0x19	; 25
    470c:	90 e0       	ldi	r25, 0x00	; 0
    470e:	91 83       	std	Z+1, r25	; 0x01
    4710:	80 83       	st	Z, r24
    4712:	fe 01       	movw	r30, r28
    4714:	e7 5b       	subi	r30, 0xB7	; 183
    4716:	ff 4f       	sbci	r31, 0xFF	; 255
    4718:	80 81       	ld	r24, Z
    471a:	91 81       	ldd	r25, Z+1	; 0x01
    471c:	01 97       	sbiw	r24, 0x01	; 1
    471e:	f1 f7       	brne	.-4      	; 0x471c <Stepper_Cfg+0x1ed8>
    4720:	fe 01       	movw	r30, r28
    4722:	e7 5b       	subi	r30, 0xB7	; 183
    4724:	ff 4f       	sbci	r31, 0xFF	; 255
    4726:	91 83       	std	Z+1, r25	; 0x01
    4728:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    472a:	de 01       	movw	r26, r28
    472c:	a5 5b       	subi	r26, 0xB5	; 181
    472e:	bf 4f       	sbci	r27, 0xFF	; 255
    4730:	fe 01       	movw	r30, r28
    4732:	e5 5b       	subi	r30, 0xB5	; 181
    4734:	ff 4f       	sbci	r31, 0xFF	; 255
    4736:	80 81       	ld	r24, Z
    4738:	91 81       	ldd	r25, Z+1	; 0x01
    473a:	01 97       	sbiw	r24, 0x01	; 1
    473c:	11 96       	adiw	r26, 0x01	; 1
    473e:	9c 93       	st	X, r25
    4740:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4742:	fe 01       	movw	r30, r28
    4744:	e5 5b       	subi	r30, 0xB5	; 181
    4746:	ff 4f       	sbci	r31, 0xFF	; 255
    4748:	80 81       	ld	r24, Z
    474a:	91 81       	ldd	r25, Z+1	; 0x01
    474c:	00 97       	sbiw	r24, 0x00	; 0
    474e:	d1 f6       	brne	.-76     	; 0x4704 <Stepper_Cfg+0x1ec0>
    4750:	27 c0       	rjmp	.+78     	; 0x47a0 <Stepper_Cfg+0x1f5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4752:	8e 01       	movw	r16, r28
    4754:	05 5b       	subi	r16, 0xB5	; 181
    4756:	1f 4f       	sbci	r17, 0xFF	; 255
    4758:	fe 01       	movw	r30, r28
    475a:	e3 5b       	subi	r30, 0xB3	; 179
    475c:	ff 4f       	sbci	r31, 0xFF	; 255
    475e:	60 81       	ld	r22, Z
    4760:	71 81       	ldd	r23, Z+1	; 0x01
    4762:	82 81       	ldd	r24, Z+2	; 0x02
    4764:	93 81       	ldd	r25, Z+3	; 0x03
    4766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    476a:	dc 01       	movw	r26, r24
    476c:	cb 01       	movw	r24, r22
    476e:	f8 01       	movw	r30, r16
    4770:	91 83       	std	Z+1, r25	; 0x01
    4772:	80 83       	st	Z, r24
    4774:	de 01       	movw	r26, r28
    4776:	a9 5b       	subi	r26, 0xB9	; 185
    4778:	bf 4f       	sbci	r27, 0xFF	; 255
    477a:	fe 01       	movw	r30, r28
    477c:	e5 5b       	subi	r30, 0xB5	; 181
    477e:	ff 4f       	sbci	r31, 0xFF	; 255
    4780:	80 81       	ld	r24, Z
    4782:	91 81       	ldd	r25, Z+1	; 0x01
    4784:	8d 93       	st	X+, r24
    4786:	9c 93       	st	X, r25
    4788:	fe 01       	movw	r30, r28
    478a:	e9 5b       	subi	r30, 0xB9	; 185
    478c:	ff 4f       	sbci	r31, 0xFF	; 255
    478e:	80 81       	ld	r24, Z
    4790:	91 81       	ldd	r25, Z+1	; 0x01
    4792:	01 97       	sbiw	r24, 0x01	; 1
    4794:	f1 f7       	brne	.-4      	; 0x4792 <Stepper_Cfg+0x1f4e>
    4796:	fe 01       	movw	r30, r28
    4798:	e9 5b       	subi	r30, 0xB9	; 185
    479a:	ff 4f       	sbci	r31, 0xFF	; 255
    479c:	91 83       	std	Z+1, r25	; 0x01
    479e:	80 83       	st	Z, r24

	DIO_write(mport,DIO_PIN4 , DIO_HIGH);
    47a0:	80 91 48 03 	lds	r24, 0x0348
    47a4:	64 e0       	ldi	r22, 0x04	; 4
    47a6:	41 e0       	ldi	r20, 0x01	; 1
    47a8:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN5 , DIO_LOW);
    47ac:	80 91 48 03 	lds	r24, 0x0348
    47b0:	65 e0       	ldi	r22, 0x05	; 5
    47b2:	40 e0       	ldi	r20, 0x00	; 0
    47b4:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN6 , DIO_LOW);
    47b8:	80 91 48 03 	lds	r24, 0x0348
    47bc:	66 e0       	ldi	r22, 0x06	; 6
    47be:	40 e0       	ldi	r20, 0x00	; 0
    47c0:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN7 , DIO_LOW);
    47c4:	80 91 48 03 	lds	r24, 0x0348
    47c8:	67 e0       	ldi	r22, 0x07	; 7
    47ca:	40 e0       	ldi	r20, 0x00	; 0
    47cc:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	_delay_ms(speed);
    47d0:	fe 01       	movw	r30, r28
    47d2:	ed 5b       	subi	r30, 0xBD	; 189
    47d4:	fe 4f       	sbci	r31, 0xFE	; 254
    47d6:	80 81       	ld	r24, Z
    47d8:	88 2f       	mov	r24, r24
    47da:	90 e0       	ldi	r25, 0x00	; 0
    47dc:	a0 e0       	ldi	r26, 0x00	; 0
    47de:	b0 e0       	ldi	r27, 0x00	; 0
    47e0:	bc 01       	movw	r22, r24
    47e2:	cd 01       	movw	r24, r26
    47e4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    47e8:	dc 01       	movw	r26, r24
    47ea:	cb 01       	movw	r24, r22
    47ec:	fe 01       	movw	r30, r28
    47ee:	ed 5b       	subi	r30, 0xBD	; 189
    47f0:	ff 4f       	sbci	r31, 0xFF	; 255
    47f2:	80 83       	st	Z, r24
    47f4:	91 83       	std	Z+1, r25	; 0x01
    47f6:	a2 83       	std	Z+2, r26	; 0x02
    47f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47fa:	8e 01       	movw	r16, r28
    47fc:	01 5c       	subi	r16, 0xC1	; 193
    47fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4800:	fe 01       	movw	r30, r28
    4802:	ed 5b       	subi	r30, 0xBD	; 189
    4804:	ff 4f       	sbci	r31, 0xFF	; 255
    4806:	60 81       	ld	r22, Z
    4808:	71 81       	ldd	r23, Z+1	; 0x01
    480a:	82 81       	ldd	r24, Z+2	; 0x02
    480c:	93 81       	ldd	r25, Z+3	; 0x03
    480e:	20 e0       	ldi	r18, 0x00	; 0
    4810:	30 e0       	ldi	r19, 0x00	; 0
    4812:	4a e7       	ldi	r20, 0x7A	; 122
    4814:	53 e4       	ldi	r21, 0x43	; 67
    4816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    481a:	dc 01       	movw	r26, r24
    481c:	cb 01       	movw	r24, r22
    481e:	f8 01       	movw	r30, r16
    4820:	80 83       	st	Z, r24
    4822:	91 83       	std	Z+1, r25	; 0x01
    4824:	a2 83       	std	Z+2, r26	; 0x02
    4826:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4828:	fe 01       	movw	r30, r28
    482a:	ff 96       	adiw	r30, 0x3f	; 63
    482c:	60 81       	ld	r22, Z
    482e:	71 81       	ldd	r23, Z+1	; 0x01
    4830:	82 81       	ldd	r24, Z+2	; 0x02
    4832:	93 81       	ldd	r25, Z+3	; 0x03
    4834:	20 e0       	ldi	r18, 0x00	; 0
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	40 e8       	ldi	r20, 0x80	; 128
    483a:	5f e3       	ldi	r21, 0x3F	; 63
    483c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4840:	88 23       	and	r24, r24
    4842:	2c f4       	brge	.+10     	; 0x484e <Stepper_Cfg+0x200a>
		__ticks = 1;
    4844:	81 e0       	ldi	r24, 0x01	; 1
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	9e af       	std	Y+62, r25	; 0x3e
    484a:	8d af       	std	Y+61, r24	; 0x3d
    484c:	46 c0       	rjmp	.+140    	; 0x48da <Stepper_Cfg+0x2096>
	else if (__tmp > 65535)
    484e:	fe 01       	movw	r30, r28
    4850:	ff 96       	adiw	r30, 0x3f	; 63
    4852:	60 81       	ld	r22, Z
    4854:	71 81       	ldd	r23, Z+1	; 0x01
    4856:	82 81       	ldd	r24, Z+2	; 0x02
    4858:	93 81       	ldd	r25, Z+3	; 0x03
    485a:	20 e0       	ldi	r18, 0x00	; 0
    485c:	3f ef       	ldi	r19, 0xFF	; 255
    485e:	4f e7       	ldi	r20, 0x7F	; 127
    4860:	57 e4       	ldi	r21, 0x47	; 71
    4862:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4866:	18 16       	cp	r1, r24
    4868:	64 f5       	brge	.+88     	; 0x48c2 <Stepper_Cfg+0x207e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    486a:	fe 01       	movw	r30, r28
    486c:	ed 5b       	subi	r30, 0xBD	; 189
    486e:	ff 4f       	sbci	r31, 0xFF	; 255
    4870:	60 81       	ld	r22, Z
    4872:	71 81       	ldd	r23, Z+1	; 0x01
    4874:	82 81       	ldd	r24, Z+2	; 0x02
    4876:	93 81       	ldd	r25, Z+3	; 0x03
    4878:	20 e0       	ldi	r18, 0x00	; 0
    487a:	30 e0       	ldi	r19, 0x00	; 0
    487c:	40 e2       	ldi	r20, 0x20	; 32
    487e:	51 e4       	ldi	r21, 0x41	; 65
    4880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4884:	dc 01       	movw	r26, r24
    4886:	cb 01       	movw	r24, r22
    4888:	bc 01       	movw	r22, r24
    488a:	cd 01       	movw	r24, r26
    488c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4890:	dc 01       	movw	r26, r24
    4892:	cb 01       	movw	r24, r22
    4894:	9e af       	std	Y+62, r25	; 0x3e
    4896:	8d af       	std	Y+61, r24	; 0x3d
    4898:	0f c0       	rjmp	.+30     	; 0x48b8 <Stepper_Cfg+0x2074>
    489a:	89 e1       	ldi	r24, 0x19	; 25
    489c:	90 e0       	ldi	r25, 0x00	; 0
    489e:	9c af       	std	Y+60, r25	; 0x3c
    48a0:	8b af       	std	Y+59, r24	; 0x3b
    48a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    48a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    48a6:	01 97       	sbiw	r24, 0x01	; 1
    48a8:	f1 f7       	brne	.-4      	; 0x48a6 <Stepper_Cfg+0x2062>
    48aa:	9c af       	std	Y+60, r25	; 0x3c
    48ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    48b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    48b2:	01 97       	sbiw	r24, 0x01	; 1
    48b4:	9e af       	std	Y+62, r25	; 0x3e
    48b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    48ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    48bc:	00 97       	sbiw	r24, 0x00	; 0
    48be:	69 f7       	brne	.-38     	; 0x489a <Stepper_Cfg+0x2056>
    48c0:	67 c2       	rjmp	.+1230   	; 0x4d90 <Stepper_Cfg+0x254c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48c2:	fe 01       	movw	r30, r28
    48c4:	ff 96       	adiw	r30, 0x3f	; 63
    48c6:	60 81       	ld	r22, Z
    48c8:	71 81       	ldd	r23, Z+1	; 0x01
    48ca:	82 81       	ldd	r24, Z+2	; 0x02
    48cc:	93 81       	ldd	r25, Z+3	; 0x03
    48ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48d2:	dc 01       	movw	r26, r24
    48d4:	cb 01       	movw	r24, r22
    48d6:	9e af       	std	Y+62, r25	; 0x3e
    48d8:	8d af       	std	Y+61, r24	; 0x3d
    48da:	8d ad       	ldd	r24, Y+61	; 0x3d
    48dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    48de:	9a af       	std	Y+58, r25	; 0x3a
    48e0:	89 af       	std	Y+57, r24	; 0x39
    48e2:	89 ad       	ldd	r24, Y+57	; 0x39
    48e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    48e6:	01 97       	sbiw	r24, 0x01	; 1
    48e8:	f1 f7       	brne	.-4      	; 0x48e6 <Stepper_Cfg+0x20a2>
    48ea:	9a af       	std	Y+58, r25	; 0x3a
    48ec:	89 af       	std	Y+57, r24	; 0x39
    48ee:	50 c2       	rjmp	.+1184   	; 0x4d90 <Stepper_Cfg+0x254c>

	break;
case LOW_NIPPLE:
	DIO_write(mport,DIO_PIN0 , DIO_LOW);
    48f0:	80 91 48 03 	lds	r24, 0x0348
    48f4:	60 e0       	ldi	r22, 0x00	; 0
    48f6:	40 e0       	ldi	r20, 0x00	; 0
    48f8:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN1 , DIO_LOW);
    48fc:	80 91 48 03 	lds	r24, 0x0348
    4900:	61 e0       	ldi	r22, 0x01	; 1
    4902:	40 e0       	ldi	r20, 0x00	; 0
    4904:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN2 , DIO_LOW);
    4908:	80 91 48 03 	lds	r24, 0x0348
    490c:	62 e0       	ldi	r22, 0x02	; 2
    490e:	40 e0       	ldi	r20, 0x00	; 0
    4910:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(mport,DIO_PIN3 , DIO_HIGH);
    4914:	80 91 48 03 	lds	r24, 0x0348
    4918:	63 e0       	ldi	r22, 0x03	; 3
    491a:	41 e0       	ldi	r20, 0x01	; 1
    491c:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>


		_delay_ms(speed);
    4920:	fe 01       	movw	r30, r28
    4922:	ed 5b       	subi	r30, 0xBD	; 189
    4924:	fe 4f       	sbci	r31, 0xFE	; 254
    4926:	80 81       	ld	r24, Z
    4928:	88 2f       	mov	r24, r24
    492a:	90 e0       	ldi	r25, 0x00	; 0
    492c:	a0 e0       	ldi	r26, 0x00	; 0
    492e:	b0 e0       	ldi	r27, 0x00	; 0
    4930:	bc 01       	movw	r22, r24
    4932:	cd 01       	movw	r24, r26
    4934:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4938:	dc 01       	movw	r26, r24
    493a:	cb 01       	movw	r24, r22
    493c:	8d ab       	std	Y+53, r24	; 0x35
    493e:	9e ab       	std	Y+54, r25	; 0x36
    4940:	af ab       	std	Y+55, r26	; 0x37
    4942:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4944:	6d a9       	ldd	r22, Y+53	; 0x35
    4946:	7e a9       	ldd	r23, Y+54	; 0x36
    4948:	8f a9       	ldd	r24, Y+55	; 0x37
    494a:	98 ad       	ldd	r25, Y+56	; 0x38
    494c:	20 e0       	ldi	r18, 0x00	; 0
    494e:	30 e0       	ldi	r19, 0x00	; 0
    4950:	4a e7       	ldi	r20, 0x7A	; 122
    4952:	53 e4       	ldi	r21, 0x43	; 67
    4954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4958:	dc 01       	movw	r26, r24
    495a:	cb 01       	movw	r24, r22
    495c:	89 ab       	std	Y+49, r24	; 0x31
    495e:	9a ab       	std	Y+50, r25	; 0x32
    4960:	ab ab       	std	Y+51, r26	; 0x33
    4962:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4964:	69 a9       	ldd	r22, Y+49	; 0x31
    4966:	7a a9       	ldd	r23, Y+50	; 0x32
    4968:	8b a9       	ldd	r24, Y+51	; 0x33
    496a:	9c a9       	ldd	r25, Y+52	; 0x34
    496c:	20 e0       	ldi	r18, 0x00	; 0
    496e:	30 e0       	ldi	r19, 0x00	; 0
    4970:	40 e8       	ldi	r20, 0x80	; 128
    4972:	5f e3       	ldi	r21, 0x3F	; 63
    4974:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4978:	88 23       	and	r24, r24
    497a:	2c f4       	brge	.+10     	; 0x4986 <Stepper_Cfg+0x2142>
		__ticks = 1;
    497c:	81 e0       	ldi	r24, 0x01	; 1
    497e:	90 e0       	ldi	r25, 0x00	; 0
    4980:	98 ab       	std	Y+48, r25	; 0x30
    4982:	8f a7       	std	Y+47, r24	; 0x2f
    4984:	3f c0       	rjmp	.+126    	; 0x4a04 <Stepper_Cfg+0x21c0>
	else if (__tmp > 65535)
    4986:	69 a9       	ldd	r22, Y+49	; 0x31
    4988:	7a a9       	ldd	r23, Y+50	; 0x32
    498a:	8b a9       	ldd	r24, Y+51	; 0x33
    498c:	9c a9       	ldd	r25, Y+52	; 0x34
    498e:	20 e0       	ldi	r18, 0x00	; 0
    4990:	3f ef       	ldi	r19, 0xFF	; 255
    4992:	4f e7       	ldi	r20, 0x7F	; 127
    4994:	57 e4       	ldi	r21, 0x47	; 71
    4996:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    499a:	18 16       	cp	r1, r24
    499c:	4c f5       	brge	.+82     	; 0x49f0 <Stepper_Cfg+0x21ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    499e:	6d a9       	ldd	r22, Y+53	; 0x35
    49a0:	7e a9       	ldd	r23, Y+54	; 0x36
    49a2:	8f a9       	ldd	r24, Y+55	; 0x37
    49a4:	98 ad       	ldd	r25, Y+56	; 0x38
    49a6:	20 e0       	ldi	r18, 0x00	; 0
    49a8:	30 e0       	ldi	r19, 0x00	; 0
    49aa:	40 e2       	ldi	r20, 0x20	; 32
    49ac:	51 e4       	ldi	r21, 0x41	; 65
    49ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49b2:	dc 01       	movw	r26, r24
    49b4:	cb 01       	movw	r24, r22
    49b6:	bc 01       	movw	r22, r24
    49b8:	cd 01       	movw	r24, r26
    49ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49be:	dc 01       	movw	r26, r24
    49c0:	cb 01       	movw	r24, r22
    49c2:	98 ab       	std	Y+48, r25	; 0x30
    49c4:	8f a7       	std	Y+47, r24	; 0x2f
    49c6:	0f c0       	rjmp	.+30     	; 0x49e6 <Stepper_Cfg+0x21a2>
    49c8:	89 e1       	ldi	r24, 0x19	; 25
    49ca:	90 e0       	ldi	r25, 0x00	; 0
    49cc:	9e a7       	std	Y+46, r25	; 0x2e
    49ce:	8d a7       	std	Y+45, r24	; 0x2d
    49d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    49d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    49d4:	01 97       	sbiw	r24, 0x01	; 1
    49d6:	f1 f7       	brne	.-4      	; 0x49d4 <Stepper_Cfg+0x2190>
    49d8:	9e a7       	std	Y+46, r25	; 0x2e
    49da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    49de:	98 a9       	ldd	r25, Y+48	; 0x30
    49e0:	01 97       	sbiw	r24, 0x01	; 1
    49e2:	98 ab       	std	Y+48, r25	; 0x30
    49e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    49e8:	98 a9       	ldd	r25, Y+48	; 0x30
    49ea:	00 97       	sbiw	r24, 0x00	; 0
    49ec:	69 f7       	brne	.-38     	; 0x49c8 <Stepper_Cfg+0x2184>
    49ee:	14 c0       	rjmp	.+40     	; 0x4a18 <Stepper_Cfg+0x21d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49f0:	69 a9       	ldd	r22, Y+49	; 0x31
    49f2:	7a a9       	ldd	r23, Y+50	; 0x32
    49f4:	8b a9       	ldd	r24, Y+51	; 0x33
    49f6:	9c a9       	ldd	r25, Y+52	; 0x34
    49f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49fc:	dc 01       	movw	r26, r24
    49fe:	cb 01       	movw	r24, r22
    4a00:	98 ab       	std	Y+48, r25	; 0x30
    4a02:	8f a7       	std	Y+47, r24	; 0x2f
    4a04:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a06:	98 a9       	ldd	r25, Y+48	; 0x30
    4a08:	9c a7       	std	Y+44, r25	; 0x2c
    4a0a:	8b a7       	std	Y+43, r24	; 0x2b
    4a0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a0e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a10:	01 97       	sbiw	r24, 0x01	; 1
    4a12:	f1 f7       	brne	.-4      	; 0x4a10 <Stepper_Cfg+0x21cc>
    4a14:	9c a7       	std	Y+44, r25	; 0x2c
    4a16:	8b a7       	std	Y+43, r24	; 0x2b
		DIO_write(mport,DIO_PIN0 , DIO_LOW);
    4a18:	80 91 48 03 	lds	r24, 0x0348
    4a1c:	60 e0       	ldi	r22, 0x00	; 0
    4a1e:	40 e0       	ldi	r20, 0x00	; 0
    4a20:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		DIO_write(mport,DIO_PIN1 , DIO_LOW);
    4a24:	80 91 48 03 	lds	r24, 0x0348
    4a28:	61 e0       	ldi	r22, 0x01	; 1
    4a2a:	40 e0       	ldi	r20, 0x00	; 0
    4a2c:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		DIO_write(mport,DIO_PIN2 , DIO_HIGH);
    4a30:	80 91 48 03 	lds	r24, 0x0348
    4a34:	62 e0       	ldi	r22, 0x02	; 2
    4a36:	41 e0       	ldi	r20, 0x01	; 1
    4a38:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		DIO_write(mport,DIO_PIN3 , DIO_LOW);
    4a3c:	80 91 48 03 	lds	r24, 0x0348
    4a40:	63 e0       	ldi	r22, 0x03	; 3
    4a42:	40 e0       	ldi	r20, 0x00	; 0
    4a44:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>

		_delay_ms(speed);
    4a48:	fe 01       	movw	r30, r28
    4a4a:	ed 5b       	subi	r30, 0xBD	; 189
    4a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    4a4e:	80 81       	ld	r24, Z
    4a50:	88 2f       	mov	r24, r24
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	a0 e0       	ldi	r26, 0x00	; 0
    4a56:	b0 e0       	ldi	r27, 0x00	; 0
    4a58:	bc 01       	movw	r22, r24
    4a5a:	cd 01       	movw	r24, r26
    4a5c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4a60:	dc 01       	movw	r26, r24
    4a62:	cb 01       	movw	r24, r22
    4a64:	8f a3       	std	Y+39, r24	; 0x27
    4a66:	98 a7       	std	Y+40, r25	; 0x28
    4a68:	a9 a7       	std	Y+41, r26	; 0x29
    4a6a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a6c:	6f a1       	ldd	r22, Y+39	; 0x27
    4a6e:	78 a5       	ldd	r23, Y+40	; 0x28
    4a70:	89 a5       	ldd	r24, Y+41	; 0x29
    4a72:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a74:	20 e0       	ldi	r18, 0x00	; 0
    4a76:	30 e0       	ldi	r19, 0x00	; 0
    4a78:	4a e7       	ldi	r20, 0x7A	; 122
    4a7a:	53 e4       	ldi	r21, 0x43	; 67
    4a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a80:	dc 01       	movw	r26, r24
    4a82:	cb 01       	movw	r24, r22
    4a84:	8b a3       	std	Y+35, r24	; 0x23
    4a86:	9c a3       	std	Y+36, r25	; 0x24
    4a88:	ad a3       	std	Y+37, r26	; 0x25
    4a8a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a8c:	6b a1       	ldd	r22, Y+35	; 0x23
    4a8e:	7c a1       	ldd	r23, Y+36	; 0x24
    4a90:	8d a1       	ldd	r24, Y+37	; 0x25
    4a92:	9e a1       	ldd	r25, Y+38	; 0x26
    4a94:	20 e0       	ldi	r18, 0x00	; 0
    4a96:	30 e0       	ldi	r19, 0x00	; 0
    4a98:	40 e8       	ldi	r20, 0x80	; 128
    4a9a:	5f e3       	ldi	r21, 0x3F	; 63
    4a9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4aa0:	88 23       	and	r24, r24
    4aa2:	2c f4       	brge	.+10     	; 0x4aae <Stepper_Cfg+0x226a>
		__ticks = 1;
    4aa4:	81 e0       	ldi	r24, 0x01	; 1
    4aa6:	90 e0       	ldi	r25, 0x00	; 0
    4aa8:	9a a3       	std	Y+34, r25	; 0x22
    4aaa:	89 a3       	std	Y+33, r24	; 0x21
    4aac:	3f c0       	rjmp	.+126    	; 0x4b2c <Stepper_Cfg+0x22e8>
	else if (__tmp > 65535)
    4aae:	6b a1       	ldd	r22, Y+35	; 0x23
    4ab0:	7c a1       	ldd	r23, Y+36	; 0x24
    4ab2:	8d a1       	ldd	r24, Y+37	; 0x25
    4ab4:	9e a1       	ldd	r25, Y+38	; 0x26
    4ab6:	20 e0       	ldi	r18, 0x00	; 0
    4ab8:	3f ef       	ldi	r19, 0xFF	; 255
    4aba:	4f e7       	ldi	r20, 0x7F	; 127
    4abc:	57 e4       	ldi	r21, 0x47	; 71
    4abe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ac2:	18 16       	cp	r1, r24
    4ac4:	4c f5       	brge	.+82     	; 0x4b18 <Stepper_Cfg+0x22d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ac6:	6f a1       	ldd	r22, Y+39	; 0x27
    4ac8:	78 a5       	ldd	r23, Y+40	; 0x28
    4aca:	89 a5       	ldd	r24, Y+41	; 0x29
    4acc:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ace:	20 e0       	ldi	r18, 0x00	; 0
    4ad0:	30 e0       	ldi	r19, 0x00	; 0
    4ad2:	40 e2       	ldi	r20, 0x20	; 32
    4ad4:	51 e4       	ldi	r21, 0x41	; 65
    4ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ada:	dc 01       	movw	r26, r24
    4adc:	cb 01       	movw	r24, r22
    4ade:	bc 01       	movw	r22, r24
    4ae0:	cd 01       	movw	r24, r26
    4ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ae6:	dc 01       	movw	r26, r24
    4ae8:	cb 01       	movw	r24, r22
    4aea:	9a a3       	std	Y+34, r25	; 0x22
    4aec:	89 a3       	std	Y+33, r24	; 0x21
    4aee:	0f c0       	rjmp	.+30     	; 0x4b0e <Stepper_Cfg+0x22ca>
    4af0:	89 e1       	ldi	r24, 0x19	; 25
    4af2:	90 e0       	ldi	r25, 0x00	; 0
    4af4:	98 a3       	std	Y+32, r25	; 0x20
    4af6:	8f 8f       	std	Y+31, r24	; 0x1f
    4af8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4afa:	98 a1       	ldd	r25, Y+32	; 0x20
    4afc:	01 97       	sbiw	r24, 0x01	; 1
    4afe:	f1 f7       	brne	.-4      	; 0x4afc <Stepper_Cfg+0x22b8>
    4b00:	98 a3       	std	Y+32, r25	; 0x20
    4b02:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b04:	89 a1       	ldd	r24, Y+33	; 0x21
    4b06:	9a a1       	ldd	r25, Y+34	; 0x22
    4b08:	01 97       	sbiw	r24, 0x01	; 1
    4b0a:	9a a3       	std	Y+34, r25	; 0x22
    4b0c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b0e:	89 a1       	ldd	r24, Y+33	; 0x21
    4b10:	9a a1       	ldd	r25, Y+34	; 0x22
    4b12:	00 97       	sbiw	r24, 0x00	; 0
    4b14:	69 f7       	brne	.-38     	; 0x4af0 <Stepper_Cfg+0x22ac>
    4b16:	14 c0       	rjmp	.+40     	; 0x4b40 <Stepper_Cfg+0x22fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b18:	6b a1       	ldd	r22, Y+35	; 0x23
    4b1a:	7c a1       	ldd	r23, Y+36	; 0x24
    4b1c:	8d a1       	ldd	r24, Y+37	; 0x25
    4b1e:	9e a1       	ldd	r25, Y+38	; 0x26
    4b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b24:	dc 01       	movw	r26, r24
    4b26:	cb 01       	movw	r24, r22
    4b28:	9a a3       	std	Y+34, r25	; 0x22
    4b2a:	89 a3       	std	Y+33, r24	; 0x21
    4b2c:	89 a1       	ldd	r24, Y+33	; 0x21
    4b2e:	9a a1       	ldd	r25, Y+34	; 0x22
    4b30:	9e 8f       	std	Y+30, r25	; 0x1e
    4b32:	8d 8f       	std	Y+29, r24	; 0x1d
    4b34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b38:	01 97       	sbiw	r24, 0x01	; 1
    4b3a:	f1 f7       	brne	.-4      	; 0x4b38 <Stepper_Cfg+0x22f4>
    4b3c:	9e 8f       	std	Y+30, r25	; 0x1e
    4b3e:	8d 8f       	std	Y+29, r24	; 0x1d
		DIO_write(mport,DIO_PIN0 , DIO_LOW);
    4b40:	80 91 48 03 	lds	r24, 0x0348
    4b44:	60 e0       	ldi	r22, 0x00	; 0
    4b46:	40 e0       	ldi	r20, 0x00	; 0
    4b48:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		DIO_write(mport,DIO_PIN1 , DIO_HIGH);
    4b4c:	80 91 48 03 	lds	r24, 0x0348
    4b50:	61 e0       	ldi	r22, 0x01	; 1
    4b52:	41 e0       	ldi	r20, 0x01	; 1
    4b54:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		DIO_write(mport,DIO_PIN2 , DIO_LOW);
    4b58:	80 91 48 03 	lds	r24, 0x0348
    4b5c:	62 e0       	ldi	r22, 0x02	; 2
    4b5e:	40 e0       	ldi	r20, 0x00	; 0
    4b60:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		DIO_write(mport,DIO_PIN3 , DIO_LOW);
    4b64:	80 91 48 03 	lds	r24, 0x0348
    4b68:	63 e0       	ldi	r22, 0x03	; 3
    4b6a:	40 e0       	ldi	r20, 0x00	; 0
    4b6c:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		_delay_ms(speed);
    4b70:	fe 01       	movw	r30, r28
    4b72:	ed 5b       	subi	r30, 0xBD	; 189
    4b74:	fe 4f       	sbci	r31, 0xFE	; 254
    4b76:	80 81       	ld	r24, Z
    4b78:	88 2f       	mov	r24, r24
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	a0 e0       	ldi	r26, 0x00	; 0
    4b7e:	b0 e0       	ldi	r27, 0x00	; 0
    4b80:	bc 01       	movw	r22, r24
    4b82:	cd 01       	movw	r24, r26
    4b84:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4b88:	dc 01       	movw	r26, r24
    4b8a:	cb 01       	movw	r24, r22
    4b8c:	89 8f       	std	Y+25, r24	; 0x19
    4b8e:	9a 8f       	std	Y+26, r25	; 0x1a
    4b90:	ab 8f       	std	Y+27, r26	; 0x1b
    4b92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b94:	69 8d       	ldd	r22, Y+25	; 0x19
    4b96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b9c:	20 e0       	ldi	r18, 0x00	; 0
    4b9e:	30 e0       	ldi	r19, 0x00	; 0
    4ba0:	4a e7       	ldi	r20, 0x7A	; 122
    4ba2:	53 e4       	ldi	r21, 0x43	; 67
    4ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba8:	dc 01       	movw	r26, r24
    4baa:	cb 01       	movw	r24, r22
    4bac:	8d 8b       	std	Y+21, r24	; 0x15
    4bae:	9e 8b       	std	Y+22, r25	; 0x16
    4bb0:	af 8b       	std	Y+23, r26	; 0x17
    4bb2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4bb4:	6d 89       	ldd	r22, Y+21	; 0x15
    4bb6:	7e 89       	ldd	r23, Y+22	; 0x16
    4bb8:	8f 89       	ldd	r24, Y+23	; 0x17
    4bba:	98 8d       	ldd	r25, Y+24	; 0x18
    4bbc:	20 e0       	ldi	r18, 0x00	; 0
    4bbe:	30 e0       	ldi	r19, 0x00	; 0
    4bc0:	40 e8       	ldi	r20, 0x80	; 128
    4bc2:	5f e3       	ldi	r21, 0x3F	; 63
    4bc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4bc8:	88 23       	and	r24, r24
    4bca:	2c f4       	brge	.+10     	; 0x4bd6 <Stepper_Cfg+0x2392>
		__ticks = 1;
    4bcc:	81 e0       	ldi	r24, 0x01	; 1
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	9c 8b       	std	Y+20, r25	; 0x14
    4bd2:	8b 8b       	std	Y+19, r24	; 0x13
    4bd4:	3f c0       	rjmp	.+126    	; 0x4c54 <Stepper_Cfg+0x2410>
	else if (__tmp > 65535)
    4bd6:	6d 89       	ldd	r22, Y+21	; 0x15
    4bd8:	7e 89       	ldd	r23, Y+22	; 0x16
    4bda:	8f 89       	ldd	r24, Y+23	; 0x17
    4bdc:	98 8d       	ldd	r25, Y+24	; 0x18
    4bde:	20 e0       	ldi	r18, 0x00	; 0
    4be0:	3f ef       	ldi	r19, 0xFF	; 255
    4be2:	4f e7       	ldi	r20, 0x7F	; 127
    4be4:	57 e4       	ldi	r21, 0x47	; 71
    4be6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4bea:	18 16       	cp	r1, r24
    4bec:	4c f5       	brge	.+82     	; 0x4c40 <Stepper_Cfg+0x23fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bee:	69 8d       	ldd	r22, Y+25	; 0x19
    4bf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4bf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4bf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4bf6:	20 e0       	ldi	r18, 0x00	; 0
    4bf8:	30 e0       	ldi	r19, 0x00	; 0
    4bfa:	40 e2       	ldi	r20, 0x20	; 32
    4bfc:	51 e4       	ldi	r21, 0x41	; 65
    4bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c02:	dc 01       	movw	r26, r24
    4c04:	cb 01       	movw	r24, r22
    4c06:	bc 01       	movw	r22, r24
    4c08:	cd 01       	movw	r24, r26
    4c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c0e:	dc 01       	movw	r26, r24
    4c10:	cb 01       	movw	r24, r22
    4c12:	9c 8b       	std	Y+20, r25	; 0x14
    4c14:	8b 8b       	std	Y+19, r24	; 0x13
    4c16:	0f c0       	rjmp	.+30     	; 0x4c36 <Stepper_Cfg+0x23f2>
    4c18:	89 e1       	ldi	r24, 0x19	; 25
    4c1a:	90 e0       	ldi	r25, 0x00	; 0
    4c1c:	9a 8b       	std	Y+18, r25	; 0x12
    4c1e:	89 8b       	std	Y+17, r24	; 0x11
    4c20:	89 89       	ldd	r24, Y+17	; 0x11
    4c22:	9a 89       	ldd	r25, Y+18	; 0x12
    4c24:	01 97       	sbiw	r24, 0x01	; 1
    4c26:	f1 f7       	brne	.-4      	; 0x4c24 <Stepper_Cfg+0x23e0>
    4c28:	9a 8b       	std	Y+18, r25	; 0x12
    4c2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c2c:	8b 89       	ldd	r24, Y+19	; 0x13
    4c2e:	9c 89       	ldd	r25, Y+20	; 0x14
    4c30:	01 97       	sbiw	r24, 0x01	; 1
    4c32:	9c 8b       	std	Y+20, r25	; 0x14
    4c34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c36:	8b 89       	ldd	r24, Y+19	; 0x13
    4c38:	9c 89       	ldd	r25, Y+20	; 0x14
    4c3a:	00 97       	sbiw	r24, 0x00	; 0
    4c3c:	69 f7       	brne	.-38     	; 0x4c18 <Stepper_Cfg+0x23d4>
    4c3e:	14 c0       	rjmp	.+40     	; 0x4c68 <Stepper_Cfg+0x2424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c40:	6d 89       	ldd	r22, Y+21	; 0x15
    4c42:	7e 89       	ldd	r23, Y+22	; 0x16
    4c44:	8f 89       	ldd	r24, Y+23	; 0x17
    4c46:	98 8d       	ldd	r25, Y+24	; 0x18
    4c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c4c:	dc 01       	movw	r26, r24
    4c4e:	cb 01       	movw	r24, r22
    4c50:	9c 8b       	std	Y+20, r25	; 0x14
    4c52:	8b 8b       	std	Y+19, r24	; 0x13
    4c54:	8b 89       	ldd	r24, Y+19	; 0x13
    4c56:	9c 89       	ldd	r25, Y+20	; 0x14
    4c58:	98 8b       	std	Y+16, r25	; 0x10
    4c5a:	8f 87       	std	Y+15, r24	; 0x0f
    4c5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c5e:	98 89       	ldd	r25, Y+16	; 0x10
    4c60:	01 97       	sbiw	r24, 0x01	; 1
    4c62:	f1 f7       	brne	.-4      	; 0x4c60 <Stepper_Cfg+0x241c>
    4c64:	98 8b       	std	Y+16, r25	; 0x10
    4c66:	8f 87       	std	Y+15, r24	; 0x0f

		DIO_write(mport,DIO_PIN0 , DIO_HIGH);
    4c68:	80 91 48 03 	lds	r24, 0x0348
    4c6c:	60 e0       	ldi	r22, 0x00	; 0
    4c6e:	41 e0       	ldi	r20, 0x01	; 1
    4c70:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		DIO_write(mport,DIO_PIN1 , DIO_LOW);
    4c74:	80 91 48 03 	lds	r24, 0x0348
    4c78:	61 e0       	ldi	r22, 0x01	; 1
    4c7a:	40 e0       	ldi	r20, 0x00	; 0
    4c7c:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		DIO_write(mport,DIO_PIN2 , DIO_LOW);
    4c80:	80 91 48 03 	lds	r24, 0x0348
    4c84:	62 e0       	ldi	r22, 0x02	; 2
    4c86:	40 e0       	ldi	r20, 0x00	; 0
    4c88:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		DIO_write(mport,DIO_PIN3 , DIO_LOW);
    4c8c:	80 91 48 03 	lds	r24, 0x0348
    4c90:	63 e0       	ldi	r22, 0x03	; 3
    4c92:	40 e0       	ldi	r20, 0x00	; 0
    4c94:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		_delay_ms(speed);
    4c98:	fe 01       	movw	r30, r28
    4c9a:	ed 5b       	subi	r30, 0xBD	; 189
    4c9c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c9e:	80 81       	ld	r24, Z
    4ca0:	88 2f       	mov	r24, r24
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	a0 e0       	ldi	r26, 0x00	; 0
    4ca6:	b0 e0       	ldi	r27, 0x00	; 0
    4ca8:	bc 01       	movw	r22, r24
    4caa:	cd 01       	movw	r24, r26
    4cac:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4cb0:	dc 01       	movw	r26, r24
    4cb2:	cb 01       	movw	r24, r22
    4cb4:	8b 87       	std	Y+11, r24	; 0x0b
    4cb6:	9c 87       	std	Y+12, r25	; 0x0c
    4cb8:	ad 87       	std	Y+13, r26	; 0x0d
    4cba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cc4:	20 e0       	ldi	r18, 0x00	; 0
    4cc6:	30 e0       	ldi	r19, 0x00	; 0
    4cc8:	4a e7       	ldi	r20, 0x7A	; 122
    4cca:	53 e4       	ldi	r21, 0x43	; 67
    4ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cd0:	dc 01       	movw	r26, r24
    4cd2:	cb 01       	movw	r24, r22
    4cd4:	8f 83       	std	Y+7, r24	; 0x07
    4cd6:	98 87       	std	Y+8, r25	; 0x08
    4cd8:	a9 87       	std	Y+9, r26	; 0x09
    4cda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    4cde:	78 85       	ldd	r23, Y+8	; 0x08
    4ce0:	89 85       	ldd	r24, Y+9	; 0x09
    4ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ce4:	20 e0       	ldi	r18, 0x00	; 0
    4ce6:	30 e0       	ldi	r19, 0x00	; 0
    4ce8:	40 e8       	ldi	r20, 0x80	; 128
    4cea:	5f e3       	ldi	r21, 0x3F	; 63
    4cec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4cf0:	88 23       	and	r24, r24
    4cf2:	2c f4       	brge	.+10     	; 0x4cfe <Stepper_Cfg+0x24ba>
		__ticks = 1;
    4cf4:	81 e0       	ldi	r24, 0x01	; 1
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	9e 83       	std	Y+6, r25	; 0x06
    4cfa:	8d 83       	std	Y+5, r24	; 0x05
    4cfc:	3f c0       	rjmp	.+126    	; 0x4d7c <Stepper_Cfg+0x2538>
	else if (__tmp > 65535)
    4cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    4d00:	78 85       	ldd	r23, Y+8	; 0x08
    4d02:	89 85       	ldd	r24, Y+9	; 0x09
    4d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d06:	20 e0       	ldi	r18, 0x00	; 0
    4d08:	3f ef       	ldi	r19, 0xFF	; 255
    4d0a:	4f e7       	ldi	r20, 0x7F	; 127
    4d0c:	57 e4       	ldi	r21, 0x47	; 71
    4d0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d12:	18 16       	cp	r1, r24
    4d14:	4c f5       	brge	.+82     	; 0x4d68 <Stepper_Cfg+0x2524>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d1e:	20 e0       	ldi	r18, 0x00	; 0
    4d20:	30 e0       	ldi	r19, 0x00	; 0
    4d22:	40 e2       	ldi	r20, 0x20	; 32
    4d24:	51 e4       	ldi	r21, 0x41	; 65
    4d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d2a:	dc 01       	movw	r26, r24
    4d2c:	cb 01       	movw	r24, r22
    4d2e:	bc 01       	movw	r22, r24
    4d30:	cd 01       	movw	r24, r26
    4d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d36:	dc 01       	movw	r26, r24
    4d38:	cb 01       	movw	r24, r22
    4d3a:	9e 83       	std	Y+6, r25	; 0x06
    4d3c:	8d 83       	std	Y+5, r24	; 0x05
    4d3e:	0f c0       	rjmp	.+30     	; 0x4d5e <Stepper_Cfg+0x251a>
    4d40:	89 e1       	ldi	r24, 0x19	; 25
    4d42:	90 e0       	ldi	r25, 0x00	; 0
    4d44:	9c 83       	std	Y+4, r25	; 0x04
    4d46:	8b 83       	std	Y+3, r24	; 0x03
    4d48:	8b 81       	ldd	r24, Y+3	; 0x03
    4d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    4d4c:	01 97       	sbiw	r24, 0x01	; 1
    4d4e:	f1 f7       	brne	.-4      	; 0x4d4c <Stepper_Cfg+0x2508>
    4d50:	9c 83       	std	Y+4, r25	; 0x04
    4d52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d54:	8d 81       	ldd	r24, Y+5	; 0x05
    4d56:	9e 81       	ldd	r25, Y+6	; 0x06
    4d58:	01 97       	sbiw	r24, 0x01	; 1
    4d5a:	9e 83       	std	Y+6, r25	; 0x06
    4d5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d60:	9e 81       	ldd	r25, Y+6	; 0x06
    4d62:	00 97       	sbiw	r24, 0x00	; 0
    4d64:	69 f7       	brne	.-38     	; 0x4d40 <Stepper_Cfg+0x24fc>
    4d66:	14 c0       	rjmp	.+40     	; 0x4d90 <Stepper_Cfg+0x254c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d68:	6f 81       	ldd	r22, Y+7	; 0x07
    4d6a:	78 85       	ldd	r23, Y+8	; 0x08
    4d6c:	89 85       	ldd	r24, Y+9	; 0x09
    4d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d74:	dc 01       	movw	r26, r24
    4d76:	cb 01       	movw	r24, r22
    4d78:	9e 83       	std	Y+6, r25	; 0x06
    4d7a:	8d 83       	std	Y+5, r24	; 0x05
    4d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    4d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    4d80:	9a 83       	std	Y+2, r25	; 0x02
    4d82:	89 83       	std	Y+1, r24	; 0x01
    4d84:	89 81       	ldd	r24, Y+1	; 0x01
    4d86:	9a 81       	ldd	r25, Y+2	; 0x02
    4d88:	01 97       	sbiw	r24, 0x01	; 1
    4d8a:	f1 f7       	brne	.-4      	; 0x4d88 <Stepper_Cfg+0x2544>
    4d8c:	9a 83       	std	Y+2, r25	; 0x02
    4d8e:	89 83       	std	Y+1, r24	; 0x01
}


	break;
}
}
    4d90:	c5 5b       	subi	r28, 0xB5	; 181
    4d92:	de 4f       	sbci	r29, 0xFE	; 254
    4d94:	0f b6       	in	r0, 0x3f	; 63
    4d96:	f8 94       	cli
    4d98:	de bf       	out	0x3e, r29	; 62
    4d9a:	0f be       	out	0x3f, r0	; 63
    4d9c:	cd bf       	out	0x3d, r28	; 61
    4d9e:	cf 91       	pop	r28
    4da0:	df 91       	pop	r29
    4da2:	1f 91       	pop	r17
    4da4:	0f 91       	pop	r16
    4da6:	08 95       	ret

00004da8 <Bluetooth_Init>:
 */

#include "Bluetooth_Interface.h"

void Bluetooth_Init()
{
    4da8:	df 93       	push	r29
    4daa:	cf 93       	push	r28
    4dac:	cd b7       	in	r28, 0x3d	; 61
    4dae:	de b7       	in	r29, 0x3e	; 62
 UART_Int();
    4db0:	0e 94 b6 31 	call	0x636c	; 0x636c <UART_Int>
}
    4db4:	cf 91       	pop	r28
    4db6:	df 91       	pop	r29
    4db8:	08 95       	ret

00004dba <Bluetooth_Transmit>:

void Bluetooth_Transmit(s8 data)
{
    4dba:	df 93       	push	r29
    4dbc:	cf 93       	push	r28
    4dbe:	0f 92       	push	r0
    4dc0:	cd b7       	in	r28, 0x3d	; 61
    4dc2:	de b7       	in	r29, 0x3e	; 62
    4dc4:	89 83       	std	Y+1, r24	; 0x01
UART_Transmit_chr(data);
    4dc6:	89 81       	ldd	r24, Y+1	; 0x01
    4dc8:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <UART_Transmit_chr>
}
    4dcc:	0f 90       	pop	r0
    4dce:	cf 91       	pop	r28
    4dd0:	df 91       	pop	r29
    4dd2:	08 95       	ret

00004dd4 <Bluetooth_ReadString>:


void Bluetooth_ReadString(u8 string[15])
{
    4dd4:	df 93       	push	r29
    4dd6:	cf 93       	push	r28
    4dd8:	00 d0       	rcall	.+0      	; 0x4dda <Bluetooth_ReadString+0x6>
    4dda:	cd b7       	in	r28, 0x3d	; 61
    4ddc:	de b7       	in	r29, 0x3e	; 62
    4dde:	9a 83       	std	Y+2, r25	; 0x02
    4de0:	89 83       	std	Y+1, r24	; 0x01
	GINT_DISABLE_INTERRUPT();
    4de2:	0e 94 f0 38 	call	0x71e0	; 0x71e0 <GINT_DISABLE_INTERRUPT>
	UART1_Rx_Str(string);
    4de6:	89 81       	ldd	r24, Y+1	; 0x01
    4de8:	9a 81       	ldd	r25, Y+2	; 0x02
    4dea:	0e 94 37 32 	call	0x646e	; 0x646e <UART1_Rx_Str>
}
    4dee:	0f 90       	pop	r0
    4df0:	0f 90       	pop	r0
    4df2:	cf 91       	pop	r28
    4df4:	df 91       	pop	r29
    4df6:	08 95       	ret

00004df8 <Bluetooth_Receive>:


s8 Bluetooth_Receive()
{
    4df8:	df 93       	push	r29
    4dfa:	cf 93       	push	r28
    4dfc:	cd b7       	in	r28, 0x3d	; 61
    4dfe:	de b7       	in	r29, 0x3e	; 62
return UART_Receive();
    4e00:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <UART_Receive>
}
    4e04:	cf 91       	pop	r28
    4e06:	df 91       	pop	r29
    4e08:	08 95       	ret

00004e0a <Bluetooth_TransmitString>:

void Bluetooth_TransmitString(s8 * string)
{
    4e0a:	df 93       	push	r29
    4e0c:	cf 93       	push	r28
    4e0e:	00 d0       	rcall	.+0      	; 0x4e10 <Bluetooth_TransmitString+0x6>
    4e10:	cd b7       	in	r28, 0x3d	; 61
    4e12:	de b7       	in	r29, 0x3e	; 62
    4e14:	9a 83       	std	Y+2, r25	; 0x02
    4e16:	89 83       	std	Y+1, r24	; 0x01
	UART_TransmitString(string);
    4e18:	89 81       	ldd	r24, Y+1	; 0x01
    4e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    4e1c:	0e 94 0e 32 	call	0x641c	; 0x641c <UART_TransmitString>
}
    4e20:	0f 90       	pop	r0
    4e22:	0f 90       	pop	r0
    4e24:	cf 91       	pop	r28
    4e26:	df 91       	pop	r29
    4e28:	08 95       	ret

00004e2a <DC_Motor_Int>:
 */ 
#include "DC_Motor_Interface.h"


void DC_Motor_Int(void)
{
    4e2a:	df 93       	push	r29
    4e2c:	cf 93       	push	r28
    4e2e:	cd b7       	in	r28, 0x3d	; 61
    4e30:	de b7       	in	r29, 0x3e	; 62
	// make pin 3,4 in portC as output
	DIO_write(DIO_DDRC_REG,3,DIO_OUTPUT);
    4e32:	e4 e3       	ldi	r30, 0x34	; 52
    4e34:	f0 e0       	ldi	r31, 0x00	; 0
    4e36:	80 81       	ld	r24, Z
    4e38:	63 e0       	ldi	r22, 0x03	; 3
    4e3a:	41 e0       	ldi	r20, 0x01	; 1
    4e3c:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
    DIO_write(DIO_DDRC_REG,4,DIO_OUTPUT);
    4e40:	e4 e3       	ldi	r30, 0x34	; 52
    4e42:	f0 e0       	ldi	r31, 0x00	; 0
    4e44:	80 81       	ld	r24, Z
    4e46:	64 e0       	ldi	r22, 0x04	; 4
    4e48:	41 e0       	ldi	r20, 0x01	; 1
    4e4a:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	 Timer2_FPWM_Int();
    4e4e:	0e 94 60 33 	call	0x66c0	; 0x66c0 <Timer2_FPWM_Int>
}
    4e52:	cf 91       	pop	r28
    4e54:	df 91       	pop	r29
    4e56:	08 95       	ret

00004e58 <DC_Motor_Start>:

void DC_Motor_Start(void)
{
    4e58:	df 93       	push	r29
    4e5a:	cf 93       	push	r28
    4e5c:	cd b7       	in	r28, 0x3d	; 61
    4e5e:	de b7       	in	r29, 0x3e	; 62
	Timer2_FPWM_Start();
    4e60:	0e 94 8c 33 	call	0x6718	; 0x6718 <Timer2_FPWM_Start>
}
    4e64:	cf 91       	pop	r28
    4e66:	df 91       	pop	r29
    4e68:	08 95       	ret

00004e6a <DC_Motor_Set_Direction>:

void DC_Motor_Set_Direction(direction direction_motor)
{
    4e6a:	df 93       	push	r29
    4e6c:	cf 93       	push	r28
    4e6e:	00 d0       	rcall	.+0      	; 0x4e70 <DC_Motor_Set_Direction+0x6>
    4e70:	0f 92       	push	r0
    4e72:	cd b7       	in	r28, 0x3d	; 61
    4e74:	de b7       	in	r29, 0x3e	; 62
    4e76:	89 83       	std	Y+1, r24	; 0x01
	switch(direction_motor){
    4e78:	89 81       	ldd	r24, Y+1	; 0x01
    4e7a:	28 2f       	mov	r18, r24
    4e7c:	30 e0       	ldi	r19, 0x00	; 0
    4e7e:	3b 83       	std	Y+3, r19	; 0x03
    4e80:	2a 83       	std	Y+2, r18	; 0x02
    4e82:	8a 81       	ldd	r24, Y+2	; 0x02
    4e84:	9b 81       	ldd	r25, Y+3	; 0x03
    4e86:	00 97       	sbiw	r24, 0x00	; 0
    4e88:	31 f0       	breq	.+12     	; 0x4e96 <DC_Motor_Set_Direction+0x2c>
    4e8a:	2a 81       	ldd	r18, Y+2	; 0x02
    4e8c:	3b 81       	ldd	r19, Y+3	; 0x03
    4e8e:	21 30       	cpi	r18, 0x01	; 1
    4e90:	31 05       	cpc	r19, r1
    4e92:	61 f0       	breq	.+24     	; 0x4eac <DC_Motor_Set_Direction+0x42>
    4e94:	15 c0       	rjmp	.+42     	; 0x4ec0 <DC_Motor_Set_Direction+0x56>
		case CLOCKWISE:
		 DIO_write(DIO_PORTC,3,DIO_HIGH);
    4e96:	82 e0       	ldi	r24, 0x02	; 2
    4e98:	63 e0       	ldi	r22, 0x03	; 3
    4e9a:	41 e0       	ldi	r20, 0x01	; 1
    4e9c:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		 DIO_write(DIO_PORTC,4,DIO_LOW);
    4ea0:	82 e0       	ldi	r24, 0x02	; 2
    4ea2:	64 e0       	ldi	r22, 0x04	; 4
    4ea4:	40 e0       	ldi	r20, 0x00	; 0
    4ea6:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
    4eaa:	0a c0       	rjmp	.+20     	; 0x4ec0 <DC_Motor_Set_Direction+0x56>
		break;
		case ANTICLOCKWISE:
			DIO_write(DIO_PORTC,4,DIO_HIGH);
    4eac:	82 e0       	ldi	r24, 0x02	; 2
    4eae:	64 e0       	ldi	r22, 0x04	; 4
    4eb0:	41 e0       	ldi	r20, 0x01	; 1
    4eb2:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(DIO_PORTC,3,DIO_LOW);
    4eb6:	82 e0       	ldi	r24, 0x02	; 2
    4eb8:	63 e0       	ldi	r22, 0x03	; 3
    4eba:	40 e0       	ldi	r20, 0x00	; 0
    4ebc:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		break;
		default:
		// do nothing
		break;
	}
}
    4ec0:	0f 90       	pop	r0
    4ec2:	0f 90       	pop	r0
    4ec4:	0f 90       	pop	r0
    4ec6:	cf 91       	pop	r28
    4ec8:	df 91       	pop	r29
    4eca:	08 95       	ret

00004ecc <DC_Motor_Stop>:

void DC_Motor_Stop(void)
{
    4ecc:	df 93       	push	r29
    4ece:	cf 93       	push	r28
    4ed0:	cd b7       	in	r28, 0x3d	; 61
    4ed2:	de b7       	in	r29, 0x3e	; 62
	DIO_write(DIO_PORTC,3,DIO_LOW);
    4ed4:	82 e0       	ldi	r24, 0x02	; 2
    4ed6:	63 e0       	ldi	r22, 0x03	; 3
    4ed8:	40 e0       	ldi	r20, 0x00	; 0
    4eda:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(DIO_PORTC,4,DIO_LOW);
    4ede:	82 e0       	ldi	r24, 0x02	; 2
    4ee0:	64 e0       	ldi	r22, 0x04	; 4
    4ee2:	40 e0       	ldi	r20, 0x00	; 0
    4ee4:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	Timer2_FPWM_Stop();
    4ee8:	0e 94 ba 33 	call	0x6774	; 0x6774 <Timer2_FPWM_Stop>
}
    4eec:	cf 91       	pop	r28
    4eee:	df 91       	pop	r29
    4ef0:	08 95       	ret

00004ef2 <DC_Motor_Speed>:

void DC_Motor_Speed(u8 Speed)
{
    4ef2:	df 93       	push	r29
    4ef4:	cf 93       	push	r28
    4ef6:	0f 92       	push	r0
    4ef8:	cd b7       	in	r28, 0x3d	; 61
    4efa:	de b7       	in	r29, 0x3e	; 62
    4efc:	89 83       	std	Y+1, r24	; 0x01
	Timer2_Set_Duty(Speed);
    4efe:	89 81       	ldd	r24, Y+1	; 0x01
    4f00:	0e 94 a1 33 	call	0x6742	; 0x6742 <Timer2_Set_Duty>
}
    4f04:	0f 90       	pop	r0
    4f06:	cf 91       	pop	r28
    4f08:	df 91       	pop	r29
    4f0a:	08 95       	ret

00004f0c <Servo_Motor_Int>:
 *  Author: Unlimited
 */ 
#include "Servo_Motor_Inteface.h"

void Servo_Motor_Int()
{
    4f0c:	df 93       	push	r29
    4f0e:	cf 93       	push	r28
    4f10:	cd b7       	in	r28, 0x3d	; 61
    4f12:	de b7       	in	r29, 0x3e	; 62
	// to make pin5 in DDRD as output
	DIO_cnfg_channel(DIO_PORTD,5,DIO_OUTPUT);
    4f14:	83 e0       	ldi	r24, 0x03	; 3
    4f16:	65 e0       	ldi	r22, 0x05	; 5
    4f18:	41 e0       	ldi	r20, 0x01	; 1
    4f1a:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
    // SIT_BIT(DIO_DDRD_REG,5);
	Timer1_FPWM_Int();
    4f1e:	0e 94 7c 34 	call	0x68f8	; 0x68f8 <Timer1_FPWM_Int>
	Timer1_FPWM_Start();
    4f22:	0e 94 ce 34 	call	0x699c	; 0x699c <Timer1_FPWM_Start>
}
    4f26:	cf 91       	pop	r28
    4f28:	df 91       	pop	r29
    4f2a:	08 95       	ret

00004f2c <Servo_Motor_Rotat>:


void Servo_Motor_Rotat(u8 duty_cycle)
{
    4f2c:	df 93       	push	r29
    4f2e:	cf 93       	push	r28
    4f30:	0f 92       	push	r0
    4f32:	cd b7       	in	r28, 0x3d	; 61
    4f34:	de b7       	in	r29, 0x3e	; 62
    4f36:	89 83       	std	Y+1, r24	; 0x01
	Timer1_FPWM_SetTime(duty_cycle);
    4f38:	89 81       	ldd	r24, Y+1	; 0x01
    4f3a:	0e 94 ac 34 	call	0x6958	; 0x6958 <Timer1_FPWM_SetTime>
}
    4f3e:	0f 90       	pop	r0
    4f40:	cf 91       	pop	r28
    4f42:	df 91       	pop	r29
    4f44:	08 95       	ret

00004f46 <E2PROM_Int>:


#include "EEPROM_interface.h"

void E2PROM_Int()
{
    4f46:	df 93       	push	r29
    4f48:	cf 93       	push	r28
    4f4a:	cd b7       	in	r28, 0x3d	; 61
    4f4c:	de b7       	in	r29, 0x3e	; 62
	TWI_init(0b00000010);
    4f4e:	82 e0       	ldi	r24, 0x02	; 2
    4f50:	0e 94 bc 37 	call	0x6f78	; 0x6f78 <TWI_init>
}
    4f54:	cf 91       	pop	r28
    4f56:	df 91       	pop	r29
    4f58:	08 95       	ret

00004f5a <E2PROM_WriteByte>:

void E2PROM_WriteByte(u8 DeviceAdd,u8 LocAdd,u8 data){
    4f5a:	df 93       	push	r29
    4f5c:	cf 93       	push	r28
    4f5e:	cd b7       	in	r28, 0x3d	; 61
    4f60:	de b7       	in	r29, 0x3e	; 62
    4f62:	62 97       	sbiw	r28, 0x12	; 18
    4f64:	0f b6       	in	r0, 0x3f	; 63
    4f66:	f8 94       	cli
    4f68:	de bf       	out	0x3e, r29	; 62
    4f6a:	0f be       	out	0x3f, r0	; 63
    4f6c:	cd bf       	out	0x3d, r28	; 61
    4f6e:	88 8b       	std	Y+16, r24	; 0x10
    4f70:	69 8b       	std	Y+17, r22	; 0x11
    4f72:	4a 8b       	std	Y+18, r20	; 0x12
	u8 wDeviceAdd = (DeviceAdd & 0xFE);//clear the first bit
    4f74:	88 89       	ldd	r24, Y+16	; 0x10
    4f76:	8e 7f       	andi	r24, 0xFE	; 254
    4f78:	8f 87       	std	Y+15, r24	; 0x0f
	if (TWI_start()== 0x08){
    4f7a:	0e 94 dd 37 	call	0x6fba	; 0x6fba <TWI_start>
    4f7e:	88 30       	cpi	r24, 0x08	; 8
    4f80:	09 f0       	breq	.+2      	; 0x4f84 <E2PROM_WriteByte+0x2a>
    4f82:	89 c0       	rjmp	.+274    	; 0x5096 <E2PROM_WriteByte+0x13c>
		if (TWI_send(wDeviceAdd) == 0x18){
    4f84:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f86:	0e 94 07 38 	call	0x700e	; 0x700e <TWI_send>
    4f8a:	88 31       	cpi	r24, 0x18	; 24
    4f8c:	09 f0       	breq	.+2      	; 0x4f90 <E2PROM_WriteByte+0x36>
    4f8e:	83 c0       	rjmp	.+262    	; 0x5096 <E2PROM_WriteByte+0x13c>
			if (TWI_send(LocAdd) == 0x28){
    4f90:	89 89       	ldd	r24, Y+17	; 0x11
    4f92:	0e 94 07 38 	call	0x700e	; 0x700e <TWI_send>
    4f96:	88 32       	cpi	r24, 0x28	; 40
    4f98:	09 f0       	breq	.+2      	; 0x4f9c <E2PROM_WriteByte+0x42>
    4f9a:	7d c0       	rjmp	.+250    	; 0x5096 <E2PROM_WriteByte+0x13c>
				if (TWI_send(data) == 0x28){
    4f9c:	8a 89       	ldd	r24, Y+18	; 0x12
    4f9e:	0e 94 07 38 	call	0x700e	; 0x700e <TWI_send>
    4fa2:	88 32       	cpi	r24, 0x28	; 40
    4fa4:	09 f0       	breq	.+2      	; 0x4fa8 <E2PROM_WriteByte+0x4e>
    4fa6:	77 c0       	rjmp	.+238    	; 0x5096 <E2PROM_WriteByte+0x13c>
					TWI_stop();
    4fa8:	0e 94 f6 37 	call	0x6fec	; 0x6fec <TWI_stop>
    4fac:	80 e0       	ldi	r24, 0x00	; 0
    4fae:	90 e0       	ldi	r25, 0x00	; 0
    4fb0:	a0 e2       	ldi	r26, 0x20	; 32
    4fb2:	b1 e4       	ldi	r27, 0x41	; 65
    4fb4:	8b 87       	std	Y+11, r24	; 0x0b
    4fb6:	9c 87       	std	Y+12, r25	; 0x0c
    4fb8:	ad 87       	std	Y+13, r26	; 0x0d
    4fba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fc4:	20 e0       	ldi	r18, 0x00	; 0
    4fc6:	30 e0       	ldi	r19, 0x00	; 0
    4fc8:	4a e7       	ldi	r20, 0x7A	; 122
    4fca:	53 e4       	ldi	r21, 0x43	; 67
    4fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fd0:	dc 01       	movw	r26, r24
    4fd2:	cb 01       	movw	r24, r22
    4fd4:	8f 83       	std	Y+7, r24	; 0x07
    4fd6:	98 87       	std	Y+8, r25	; 0x08
    4fd8:	a9 87       	std	Y+9, r26	; 0x09
    4fda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4fdc:	6f 81       	ldd	r22, Y+7	; 0x07
    4fde:	78 85       	ldd	r23, Y+8	; 0x08
    4fe0:	89 85       	ldd	r24, Y+9	; 0x09
    4fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fe4:	20 e0       	ldi	r18, 0x00	; 0
    4fe6:	30 e0       	ldi	r19, 0x00	; 0
    4fe8:	40 e8       	ldi	r20, 0x80	; 128
    4fea:	5f e3       	ldi	r21, 0x3F	; 63
    4fec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ff0:	88 23       	and	r24, r24
    4ff2:	2c f4       	brge	.+10     	; 0x4ffe <E2PROM_WriteByte+0xa4>
		__ticks = 1;
    4ff4:	81 e0       	ldi	r24, 0x01	; 1
    4ff6:	90 e0       	ldi	r25, 0x00	; 0
    4ff8:	9e 83       	std	Y+6, r25	; 0x06
    4ffa:	8d 83       	std	Y+5, r24	; 0x05
    4ffc:	3f c0       	rjmp	.+126    	; 0x507c <E2PROM_WriteByte+0x122>
	else if (__tmp > 65535)
    4ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    5000:	78 85       	ldd	r23, Y+8	; 0x08
    5002:	89 85       	ldd	r24, Y+9	; 0x09
    5004:	9a 85       	ldd	r25, Y+10	; 0x0a
    5006:	20 e0       	ldi	r18, 0x00	; 0
    5008:	3f ef       	ldi	r19, 0xFF	; 255
    500a:	4f e7       	ldi	r20, 0x7F	; 127
    500c:	57 e4       	ldi	r21, 0x47	; 71
    500e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5012:	18 16       	cp	r1, r24
    5014:	4c f5       	brge	.+82     	; 0x5068 <E2PROM_WriteByte+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5016:	6b 85       	ldd	r22, Y+11	; 0x0b
    5018:	7c 85       	ldd	r23, Y+12	; 0x0c
    501a:	8d 85       	ldd	r24, Y+13	; 0x0d
    501c:	9e 85       	ldd	r25, Y+14	; 0x0e
    501e:	20 e0       	ldi	r18, 0x00	; 0
    5020:	30 e0       	ldi	r19, 0x00	; 0
    5022:	40 e2       	ldi	r20, 0x20	; 32
    5024:	51 e4       	ldi	r21, 0x41	; 65
    5026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    502a:	dc 01       	movw	r26, r24
    502c:	cb 01       	movw	r24, r22
    502e:	bc 01       	movw	r22, r24
    5030:	cd 01       	movw	r24, r26
    5032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5036:	dc 01       	movw	r26, r24
    5038:	cb 01       	movw	r24, r22
    503a:	9e 83       	std	Y+6, r25	; 0x06
    503c:	8d 83       	std	Y+5, r24	; 0x05
    503e:	0f c0       	rjmp	.+30     	; 0x505e <E2PROM_WriteByte+0x104>
    5040:	89 e1       	ldi	r24, 0x19	; 25
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	9c 83       	std	Y+4, r25	; 0x04
    5046:	8b 83       	std	Y+3, r24	; 0x03
    5048:	8b 81       	ldd	r24, Y+3	; 0x03
    504a:	9c 81       	ldd	r25, Y+4	; 0x04
    504c:	01 97       	sbiw	r24, 0x01	; 1
    504e:	f1 f7       	brne	.-4      	; 0x504c <E2PROM_WriteByte+0xf2>
    5050:	9c 83       	std	Y+4, r25	; 0x04
    5052:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5054:	8d 81       	ldd	r24, Y+5	; 0x05
    5056:	9e 81       	ldd	r25, Y+6	; 0x06
    5058:	01 97       	sbiw	r24, 0x01	; 1
    505a:	9e 83       	std	Y+6, r25	; 0x06
    505c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    505e:	8d 81       	ldd	r24, Y+5	; 0x05
    5060:	9e 81       	ldd	r25, Y+6	; 0x06
    5062:	00 97       	sbiw	r24, 0x00	; 0
    5064:	69 f7       	brne	.-38     	; 0x5040 <E2PROM_WriteByte+0xe6>
    5066:	14 c0       	rjmp	.+40     	; 0x5090 <E2PROM_WriteByte+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5068:	6f 81       	ldd	r22, Y+7	; 0x07
    506a:	78 85       	ldd	r23, Y+8	; 0x08
    506c:	89 85       	ldd	r24, Y+9	; 0x09
    506e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5074:	dc 01       	movw	r26, r24
    5076:	cb 01       	movw	r24, r22
    5078:	9e 83       	std	Y+6, r25	; 0x06
    507a:	8d 83       	std	Y+5, r24	; 0x05
    507c:	8d 81       	ldd	r24, Y+5	; 0x05
    507e:	9e 81       	ldd	r25, Y+6	; 0x06
    5080:	9a 83       	std	Y+2, r25	; 0x02
    5082:	89 83       	std	Y+1, r24	; 0x01
    5084:	89 81       	ldd	r24, Y+1	; 0x01
    5086:	9a 81       	ldd	r25, Y+2	; 0x02
    5088:	01 97       	sbiw	r24, 0x01	; 1
    508a:	f1 f7       	brne	.-4      	; 0x5088 <E2PROM_WriteByte+0x12e>
    508c:	9a 83       	std	Y+2, r25	; 0x02
    508e:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(10);
					Led_ON(LED0);
    5090:	80 e0       	ldi	r24, 0x00	; 0
    5092:	0e 94 26 31 	call	0x624c	; 0x624c <Led_ON>
				}
			}
		}
	}
}
    5096:	62 96       	adiw	r28, 0x12	; 18
    5098:	0f b6       	in	r0, 0x3f	; 63
    509a:	f8 94       	cli
    509c:	de bf       	out	0x3e, r29	; 62
    509e:	0f be       	out	0x3f, r0	; 63
    50a0:	cd bf       	out	0x3d, r28	; 61
    50a2:	cf 91       	pop	r28
    50a4:	df 91       	pop	r29
    50a6:	08 95       	ret

000050a8 <E2PROM_ReadByte>:
u8 E2PROM_ReadByte(u8 DeviceAdd,u8 LocAdd){
    50a8:	df 93       	push	r29
    50aa:	cf 93       	push	r28
    50ac:	00 d0       	rcall	.+0      	; 0x50ae <E2PROM_ReadByte+0x6>
    50ae:	00 d0       	rcall	.+0      	; 0x50b0 <E2PROM_ReadByte+0x8>
    50b0:	0f 92       	push	r0
    50b2:	cd b7       	in	r28, 0x3d	; 61
    50b4:	de b7       	in	r29, 0x3e	; 62
    50b6:	8c 83       	std	Y+4, r24	; 0x04
    50b8:	6d 83       	std	Y+5, r22	; 0x05
	u8 wDeviceAdd = (DeviceAdd & 0xFE);//clear the first bit
    50ba:	8c 81       	ldd	r24, Y+4	; 0x04
    50bc:	8e 7f       	andi	r24, 0xFE	; 254
    50be:	8a 83       	std	Y+2, r24	; 0x02
	u8 rDeviceAdd = (DeviceAdd | (1<<0));//set the first bit
    50c0:	8c 81       	ldd	r24, Y+4	; 0x04
    50c2:	81 60       	ori	r24, 0x01	; 1
    50c4:	89 83       	std	Y+1, r24	; 0x01
	u8 ReadValue = 0;
    50c6:	1b 82       	std	Y+3, r1	; 0x03
	if (TWI_start() == 0x08){
    50c8:	0e 94 dd 37 	call	0x6fba	; 0x6fba <TWI_start>
    50cc:	88 30       	cpi	r24, 0x08	; 8
    50ce:	e1 f4       	brne	.+56     	; 0x5108 <E2PROM_ReadByte+0x60>
		if (TWI_send(wDeviceAdd) == 0x18){
    50d0:	8a 81       	ldd	r24, Y+2	; 0x02
    50d2:	0e 94 07 38 	call	0x700e	; 0x700e <TWI_send>
    50d6:	88 31       	cpi	r24, 0x18	; 24
    50d8:	b9 f4       	brne	.+46     	; 0x5108 <E2PROM_ReadByte+0x60>
			if (TWI_send(LocAdd) == 0x28){
    50da:	8d 81       	ldd	r24, Y+5	; 0x05
    50dc:	0e 94 07 38 	call	0x700e	; 0x700e <TWI_send>
    50e0:	88 32       	cpi	r24, 0x28	; 40
    50e2:	91 f4       	brne	.+36     	; 0x5108 <E2PROM_ReadByte+0x60>
				if (TWI_start() == 0x10){
    50e4:	0e 94 dd 37 	call	0x6fba	; 0x6fba <TWI_start>
    50e8:	80 31       	cpi	r24, 0x10	; 16
    50ea:	71 f4       	brne	.+28     	; 0x5108 <E2PROM_ReadByte+0x60>
					if (TWI_send(rDeviceAdd) == 0x40){
    50ec:	89 81       	ldd	r24, Y+1	; 0x01
    50ee:	0e 94 07 38 	call	0x700e	; 0x700e <TWI_send>
    50f2:	80 34       	cpi	r24, 0x40	; 64
    50f4:	49 f4       	brne	.+18     	; 0x5108 <E2PROM_ReadByte+0x60>
						TWI_read_NACK(&ReadValue);
    50f6:	ce 01       	movw	r24, r28
    50f8:	03 96       	adiw	r24, 0x03	; 3
    50fa:	0e 94 46 38 	call	0x708c	; 0x708c <TWI_read_NACK>
						TWI_stop();
    50fe:	0e 94 f6 37 	call	0x6fec	; 0x6fec <TWI_stop>
						Led_ON(LED2);
    5102:	82 e0       	ldi	r24, 0x02	; 2
    5104:	0e 94 26 31 	call	0x624c	; 0x624c <Led_ON>
					}
				}
			}
		}
	}
	return ReadValue;
    5108:	8b 81       	ldd	r24, Y+3	; 0x03
}
    510a:	0f 90       	pop	r0
    510c:	0f 90       	pop	r0
    510e:	0f 90       	pop	r0
    5110:	0f 90       	pop	r0
    5112:	0f 90       	pop	r0
    5114:	cf 91       	pop	r28
    5116:	df 91       	pop	r29
    5118:	08 95       	ret

0000511a <Buzzer_Int>:
 *      Author: lione
 */

#include "Buzzer_Interface.h"
void Buzzer_Int()
{
    511a:	df 93       	push	r29
    511c:	cf 93       	push	r28
    511e:	cd b7       	in	r28, 0x3d	; 61
    5120:	de b7       	in	r29, 0x3e	; 62
DIO_cnfg_channel(DIO_PORTA, DIO_PIN3, DIO_OUTPUT);
    5122:	80 e0       	ldi	r24, 0x00	; 0
    5124:	63 e0       	ldi	r22, 0x03	; 3
    5126:	41 e0       	ldi	r20, 0x01	; 1
    5128:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
DIO_write(DIO_PORTA, DIO_PIN3, DIO_LOW);
    512c:	80 e0       	ldi	r24, 0x00	; 0
    512e:	63 e0       	ldi	r22, 0x03	; 3
    5130:	40 e0       	ldi	r20, 0x00	; 0
    5132:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
}
    5136:	cf 91       	pop	r28
    5138:	df 91       	pop	r29
    513a:	08 95       	ret

0000513c <Buzzer_ON>:

void Buzzer_ON(buzzer_id_t id)
{
    513c:	df 93       	push	r29
    513e:	cf 93       	push	r28
    5140:	0f 92       	push	r0
    5142:	cd b7       	in	r28, 0x3d	; 61
    5144:	de b7       	in	r29, 0x3e	; 62
    5146:	89 83       	std	Y+1, r24	; 0x01
	switch(id)
    5148:	89 81       	ldd	r24, Y+1	; 0x01
    514a:	88 2f       	mov	r24, r24
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	00 97       	sbiw	r24, 0x00	; 0
    5150:	29 f4       	brne	.+10     	; 0x515c <Buzzer_ON+0x20>
	{
	case BUZZER0:
		DIO_write(DIO_PORTA, DIO_PIN3, DIO_HIGH);
    5152:	80 e0       	ldi	r24, 0x00	; 0
    5154:	63 e0       	ldi	r22, 0x03	; 3
    5156:	41 e0       	ldi	r20, 0x01	; 1
    5158:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
break;
}
}
    515c:	0f 90       	pop	r0
    515e:	cf 91       	pop	r28
    5160:	df 91       	pop	r29
    5162:	08 95       	ret

00005164 <Buzzer_OFF>:

void Buzzer_OFF(buzzer_id_t id)
{
    5164:	df 93       	push	r29
    5166:	cf 93       	push	r28
    5168:	0f 92       	push	r0
    516a:	cd b7       	in	r28, 0x3d	; 61
    516c:	de b7       	in	r29, 0x3e	; 62
    516e:	89 83       	std	Y+1, r24	; 0x01
	switch(id)
    5170:	89 81       	ldd	r24, Y+1	; 0x01
    5172:	88 2f       	mov	r24, r24
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	00 97       	sbiw	r24, 0x00	; 0
    5178:	29 f4       	brne	.+10     	; 0x5184 <Buzzer_OFF+0x20>
	{
		case BUZZER0:
			DIO_write(DIO_PORTA, DIO_PIN3, DIO_LOW);
    517a:	80 e0       	ldi	r24, 0x00	; 0
    517c:	63 e0       	ldi	r22, 0x03	; 3
    517e:	40 e0       	ldi	r20, 0x00	; 0
    5180:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
break;
}
}
    5184:	0f 90       	pop	r0
    5186:	cf 91       	pop	r28
    5188:	df 91       	pop	r29
    518a:	08 95       	ret

0000518c <Buzzer_Toggle>:



void Buzzer_Toggle(buzzer_id_t id)
{
    518c:	df 93       	push	r29
    518e:	cf 93       	push	r28
    5190:	0f 92       	push	r0
    5192:	cd b7       	in	r28, 0x3d	; 61
    5194:	de b7       	in	r29, 0x3e	; 62
    5196:	89 83       	std	Y+1, r24	; 0x01
	switch(id)
    5198:	89 81       	ldd	r24, Y+1	; 0x01
    519a:	88 2f       	mov	r24, r24
    519c:	90 e0       	ldi	r25, 0x00	; 0
    519e:	00 97       	sbiw	r24, 0x00	; 0
    51a0:	21 f4       	brne	.+8      	; 0x51aa <Buzzer_Toggle+0x1e>
	{
			case BUZZER0:
		DIO_flip(DIO_PORTA, DIO_PIN3);
    51a2:	80 e0       	ldi	r24, 0x00	; 0
    51a4:	63 e0       	ldi	r22, 0x03	; 3
    51a6:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <DIO_flip>
}
}
    51aa:	0f 90       	pop	r0
    51ac:	cf 91       	pop	r28
    51ae:	df 91       	pop	r29
    51b0:	08 95       	ret

000051b2 <LM35_Int>:
 *      Author: lione
 */
#include "LM35_Interface.h"

void LM35_Int(void)
{
    51b2:	df 93       	push	r29
    51b4:	cf 93       	push	r28
    51b6:	cd b7       	in	r28, 0x3d	; 61
    51b8:	de b7       	in	r29, 0x3e	; 62
	ADC_init();
    51ba:	0e 94 87 3d 	call	0x7b0e	; 0x7b0e <ADC_init>
}
    51be:	cf 91       	pop	r28
    51c0:	df 91       	pop	r29
    51c2:	08 95       	ret

000051c4 <LM35_Read>:
u16 LM35_Read(void)
{
    51c4:	df 93       	push	r29
    51c6:	cf 93       	push	r28
    51c8:	cd b7       	in	r28, 0x3d	; 61
    51ca:	de b7       	in	r29, 0x3e	; 62
    51cc:	28 97       	sbiw	r28, 0x08	; 8
    51ce:	0f b6       	in	r0, 0x3f	; 63
    51d0:	f8 94       	cli
    51d2:	de bf       	out	0x3e, r29	; 62
    51d4:	0f be       	out	0x3f, r0	; 63
    51d6:	cd bf       	out	0x3d, r28	; 61
	u16 result=0;
    51d8:	18 86       	std	Y+8, r1	; 0x08
    51da:	1f 82       	std	Y+7, r1	; 0x07
	f32 volt=0;
    51dc:	80 e0       	ldi	r24, 0x00	; 0
    51de:	90 e0       	ldi	r25, 0x00	; 0
    51e0:	a0 e0       	ldi	r26, 0x00	; 0
    51e2:	b0 e0       	ldi	r27, 0x00	; 0
    51e4:	8b 83       	std	Y+3, r24	; 0x03
    51e6:	9c 83       	std	Y+4, r25	; 0x04
    51e8:	ad 83       	std	Y+5, r26	; 0x05
    51ea:	be 83       	std	Y+6, r27	; 0x06
	u16 temp;
	result=ADC_read(LM35_CHANNEL);
    51ec:	81 e0       	ldi	r24, 0x01	; 1
    51ee:	0e 94 9c 3d 	call	0x7b38	; 0x7b38 <ADC_read>
    51f2:	98 87       	std	Y+8, r25	; 0x08
    51f4:	8f 83       	std	Y+7, r24	; 0x07
	volt=result*4.8;
    51f6:	8f 81       	ldd	r24, Y+7	; 0x07
    51f8:	98 85       	ldd	r25, Y+8	; 0x08
    51fa:	cc 01       	movw	r24, r24
    51fc:	a0 e0       	ldi	r26, 0x00	; 0
    51fe:	b0 e0       	ldi	r27, 0x00	; 0
    5200:	bc 01       	movw	r22, r24
    5202:	cd 01       	movw	r24, r26
    5204:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    5208:	dc 01       	movw	r26, r24
    520a:	cb 01       	movw	r24, r22
    520c:	bc 01       	movw	r22, r24
    520e:	cd 01       	movw	r24, r26
    5210:	2a e9       	ldi	r18, 0x9A	; 154
    5212:	39 e9       	ldi	r19, 0x99	; 153
    5214:	49 e9       	ldi	r20, 0x99	; 153
    5216:	50 e4       	ldi	r21, 0x40	; 64
    5218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    521c:	dc 01       	movw	r26, r24
    521e:	cb 01       	movw	r24, r22
    5220:	8b 83       	std	Y+3, r24	; 0x03
    5222:	9c 83       	std	Y+4, r25	; 0x04
    5224:	ad 83       	std	Y+5, r26	; 0x05
    5226:	be 83       	std	Y+6, r27	; 0x06
	temp=volt/10;
    5228:	6b 81       	ldd	r22, Y+3	; 0x03
    522a:	7c 81       	ldd	r23, Y+4	; 0x04
    522c:	8d 81       	ldd	r24, Y+5	; 0x05
    522e:	9e 81       	ldd	r25, Y+6	; 0x06
    5230:	20 e0       	ldi	r18, 0x00	; 0
    5232:	30 e0       	ldi	r19, 0x00	; 0
    5234:	40 e2       	ldi	r20, 0x20	; 32
    5236:	51 e4       	ldi	r21, 0x41	; 65
    5238:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    523c:	dc 01       	movw	r26, r24
    523e:	cb 01       	movw	r24, r22
    5240:	bc 01       	movw	r22, r24
    5242:	cd 01       	movw	r24, r26
    5244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5248:	dc 01       	movw	r26, r24
    524a:	cb 01       	movw	r24, r22
    524c:	9a 83       	std	Y+2, r25	; 0x02
    524e:	89 83       	std	Y+1, r24	; 0x01
	return temp;
    5250:	89 81       	ldd	r24, Y+1	; 0x01
    5252:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5254:	28 96       	adiw	r28, 0x08	; 8
    5256:	0f b6       	in	r0, 0x3f	; 63
    5258:	f8 94       	cli
    525a:	de bf       	out	0x3e, r29	; 62
    525c:	0f be       	out	0x3f, r0	; 63
    525e:	cd bf       	out	0x3d, r28	; 61
    5260:	cf 91       	pop	r28
    5262:	df 91       	pop	r29
    5264:	08 95       	ret

00005266 <Keypad_Is_Pressed>:
						{'S','0','P','D'}
};


static boolean Keypad_Is_Pressed(void)
{
    5266:	df 93       	push	r29
    5268:	cf 93       	push	r28
    526a:	0f 92       	push	r0
    526c:	cd b7       	in	r28, 0x3d	; 61
    526e:	de b7       	in	r29, 0x3e	; 62
	if (
    5270:	82 e0       	ldi	r24, 0x02	; 2
    5272:	61 e0       	ldi	r22, 0x01	; 1
    5274:	0e 94 53 3c 	call	0x78a6	; 0x78a6 <DIO_read>
    5278:	88 23       	and	r24, r24
    527a:	91 f0       	breq	.+36     	; 0x52a0 <Keypad_Is_Pressed+0x3a>
    527c:	82 e0       	ldi	r24, 0x02	; 2
    527e:	60 e0       	ldi	r22, 0x00	; 0
    5280:	0e 94 53 3c 	call	0x78a6	; 0x78a6 <DIO_read>
    5284:	88 23       	and	r24, r24
    5286:	61 f0       	breq	.+24     	; 0x52a0 <Keypad_Is_Pressed+0x3a>
    5288:	82 e0       	ldi	r24, 0x02	; 2
    528a:	65 e0       	ldi	r22, 0x05	; 5
    528c:	0e 94 53 3c 	call	0x78a6	; 0x78a6 <DIO_read>
    5290:	88 23       	and	r24, r24
    5292:	31 f0       	breq	.+12     	; 0x52a0 <Keypad_Is_Pressed+0x3a>
    5294:	80 e0       	ldi	r24, 0x00	; 0
    5296:	60 e0       	ldi	r22, 0x00	; 0
    5298:	0e 94 53 3c 	call	0x78a6	; 0x78a6 <DIO_read>
    529c:	88 23       	and	r24, r24
    529e:	19 f4       	brne	.+6      	; 0x52a6 <Keypad_Is_Pressed+0x40>
		DIO_read(DIO_PORTC,DIO_PIN0) == DIO_LOW ||
		DIO_read(DIO_PORTC,DIO_PIN5) == DIO_LOW ||
		DIO_read(DIO_PORTA,DIO_PIN0) == DIO_LOW
	)
	{
		return TRUE;
    52a0:	81 e0       	ldi	r24, 0x01	; 1
    52a2:	89 83       	std	Y+1, r24	; 0x01
    52a4:	01 c0       	rjmp	.+2      	; 0x52a8 <Keypad_Is_Pressed+0x42>
	}
	else
	{
		return FALSE;
    52a6:	19 82       	std	Y+1, r1	; 0x01
    52a8:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    52aa:	0f 90       	pop	r0
    52ac:	cf 91       	pop	r28
    52ae:	df 91       	pop	r29
    52b0:	08 95       	ret

000052b2 <Keypad_Get_Row>:

static s8 Keypad_Get_Row(void)
{
    52b2:	df 93       	push	r29
    52b4:	cf 93       	push	r28
    52b6:	0f 92       	push	r0
    52b8:	cd b7       	in	r28, 0x3d	; 61
    52ba:	de b7       	in	r29, 0x3e	; 62
	s8 loc_Row = -1;
    52bc:	8f ef       	ldi	r24, 0xFF	; 255
    52be:	89 83       	std	Y+1, r24	; 0x01

	if (DIO_read(DIO_PORTC,DIO_PIN1) == DIO_LOW)
    52c0:	82 e0       	ldi	r24, 0x02	; 2
    52c2:	61 e0       	ldi	r22, 0x01	; 1
    52c4:	0e 94 53 3c 	call	0x78a6	; 0x78a6 <DIO_read>
    52c8:	88 23       	and	r24, r24
    52ca:	11 f4       	brne	.+4      	; 0x52d0 <Keypad_Get_Row+0x1e>
	{
		loc_Row = 0;
    52cc:	19 82       	std	Y+1, r1	; 0x01
    52ce:	1a c0       	rjmp	.+52     	; 0x5304 <Keypad_Get_Row+0x52>
	}
	else if (DIO_read(DIO_PORTC,DIO_PIN0) == DIO_LOW)
    52d0:	82 e0       	ldi	r24, 0x02	; 2
    52d2:	60 e0       	ldi	r22, 0x00	; 0
    52d4:	0e 94 53 3c 	call	0x78a6	; 0x78a6 <DIO_read>
    52d8:	88 23       	and	r24, r24
    52da:	19 f4       	brne	.+6      	; 0x52e2 <Keypad_Get_Row+0x30>
	{
		loc_Row = 1;
    52dc:	81 e0       	ldi	r24, 0x01	; 1
    52de:	89 83       	std	Y+1, r24	; 0x01
    52e0:	11 c0       	rjmp	.+34     	; 0x5304 <Keypad_Get_Row+0x52>
	}
	else if (DIO_read(DIO_PORTC,DIO_PIN5) == DIO_LOW)
    52e2:	82 e0       	ldi	r24, 0x02	; 2
    52e4:	65 e0       	ldi	r22, 0x05	; 5
    52e6:	0e 94 53 3c 	call	0x78a6	; 0x78a6 <DIO_read>
    52ea:	88 23       	and	r24, r24
    52ec:	19 f4       	brne	.+6      	; 0x52f4 <Keypad_Get_Row+0x42>
		{
			loc_Row = 2;
    52ee:	82 e0       	ldi	r24, 0x02	; 2
    52f0:	89 83       	std	Y+1, r24	; 0x01
    52f2:	08 c0       	rjmp	.+16     	; 0x5304 <Keypad_Get_Row+0x52>
		}
	else if (DIO_read(DIO_PORTA,DIO_PIN0) == DIO_LOW)
    52f4:	80 e0       	ldi	r24, 0x00	; 0
    52f6:	60 e0       	ldi	r22, 0x00	; 0
    52f8:	0e 94 53 3c 	call	0x78a6	; 0x78a6 <DIO_read>
    52fc:	88 23       	and	r24, r24
    52fe:	11 f4       	brne	.+4      	; 0x5304 <Keypad_Get_Row+0x52>
		{
			loc_Row = 3;
    5300:	83 e0       	ldi	r24, 0x03	; 3
    5302:	89 83       	std	Y+1, r24	; 0x01
		}
	else
	{
		/*	Do Nothing	*/
	}
return loc_Row;
    5304:	89 81       	ldd	r24, Y+1	; 0x01
}
    5306:	0f 90       	pop	r0
    5308:	cf 91       	pop	r28
    530a:	df 91       	pop	r29
    530c:	08 95       	ret

0000530e <Keypad_Get_Column>:

static s8 Keypad_Get_Column(s8 current_row)
{
    530e:	df 93       	push	r29
    5310:	cf 93       	push	r28
    5312:	00 d0       	rcall	.+0      	; 0x5314 <Keypad_Get_Column+0x6>
    5314:	cd b7       	in	r28, 0x3d	; 61
    5316:	de b7       	in	r29, 0x3e	; 62
    5318:	8a 83       	std	Y+2, r24	; 0x02
	s8 Loc_Column = -1;
    531a:	8f ef       	ldi	r24, 0xFF	; 255
    531c:	89 83       	std	Y+1, r24	; 0x01
	DIO_write(DIO_PORTB, DIO_PIN4,DIO_LOW);
    531e:	81 e0       	ldi	r24, 0x01	; 1
    5320:	64 e0       	ldi	r22, 0x04	; 4
    5322:	40 e0       	ldi	r20, 0x00	; 0
    5324:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(DIO_PORTB, DIO_PIN5,DIO_HIGH);
    5328:	81 e0       	ldi	r24, 0x01	; 1
    532a:	65 e0       	ldi	r22, 0x05	; 5
    532c:	41 e0       	ldi	r20, 0x01	; 1
    532e:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(DIO_PORTB, DIO_PIN6,DIO_HIGH);
    5332:	81 e0       	ldi	r24, 0x01	; 1
    5334:	66 e0       	ldi	r22, 0x06	; 6
    5336:	41 e0       	ldi	r20, 0x01	; 1
    5338:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(DIO_PORTB, DIO_PIN7,DIO_HIGH);
    533c:	81 e0       	ldi	r24, 0x01	; 1
    533e:	67 e0       	ldi	r22, 0x07	; 7
    5340:	41 e0       	ldi	r20, 0x01	; 1
    5342:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>

	if (Keypad_Get_Row() == current_row)
    5346:	0e 94 59 29 	call	0x52b2	; 0x52b2 <Keypad_Get_Row>
    534a:	98 2f       	mov	r25, r24
    534c:	8a 81       	ldd	r24, Y+2	; 0x02
    534e:	98 17       	cp	r25, r24
    5350:	09 f4       	brne	.+2      	; 0x5354 <Keypad_Get_Column+0x46>
	{
		Loc_Column = 0;
    5352:	19 82       	std	Y+1, r1	; 0x01

	}

	DIO_write(DIO_PORTB, DIO_PIN4,DIO_HIGH);
    5354:	81 e0       	ldi	r24, 0x01	; 1
    5356:	64 e0       	ldi	r22, 0x04	; 4
    5358:	41 e0       	ldi	r20, 0x01	; 1
    535a:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(DIO_PORTB, DIO_PIN5,DIO_LOW);
    535e:	81 e0       	ldi	r24, 0x01	; 1
    5360:	65 e0       	ldi	r22, 0x05	; 5
    5362:	40 e0       	ldi	r20, 0x00	; 0
    5364:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(DIO_PORTB, DIO_PIN6,DIO_HIGH);
    5368:	81 e0       	ldi	r24, 0x01	; 1
    536a:	66 e0       	ldi	r22, 0x06	; 6
    536c:	41 e0       	ldi	r20, 0x01	; 1
    536e:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(DIO_PORTB, DIO_PIN7,DIO_HIGH);
    5372:	81 e0       	ldi	r24, 0x01	; 1
    5374:	67 e0       	ldi	r22, 0x07	; 7
    5376:	41 e0       	ldi	r20, 0x01	; 1
    5378:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>

	if (Keypad_Get_Row() == current_row)
    537c:	0e 94 59 29 	call	0x52b2	; 0x52b2 <Keypad_Get_Row>
    5380:	98 2f       	mov	r25, r24
    5382:	8a 81       	ldd	r24, Y+2	; 0x02
    5384:	98 17       	cp	r25, r24
    5386:	11 f4       	brne	.+4      	; 0x538c <Keypad_Get_Column+0x7e>
	{
		Loc_Column = 1;
    5388:	81 e0       	ldi	r24, 0x01	; 1
    538a:	89 83       	std	Y+1, r24	; 0x01

	}

	DIO_write(DIO_PORTB, DIO_PIN4,DIO_HIGH);
    538c:	81 e0       	ldi	r24, 0x01	; 1
    538e:	64 e0       	ldi	r22, 0x04	; 4
    5390:	41 e0       	ldi	r20, 0x01	; 1
    5392:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(DIO_PORTB, DIO_PIN5,DIO_HIGH);
    5396:	81 e0       	ldi	r24, 0x01	; 1
    5398:	65 e0       	ldi	r22, 0x05	; 5
    539a:	41 e0       	ldi	r20, 0x01	; 1
    539c:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(DIO_PORTB, DIO_PIN6,DIO_LOW);
    53a0:	81 e0       	ldi	r24, 0x01	; 1
    53a2:	66 e0       	ldi	r22, 0x06	; 6
    53a4:	40 e0       	ldi	r20, 0x00	; 0
    53a6:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(DIO_PORTB, DIO_PIN7,DIO_HIGH);
    53aa:	81 e0       	ldi	r24, 0x01	; 1
    53ac:	67 e0       	ldi	r22, 0x07	; 7
    53ae:	41 e0       	ldi	r20, 0x01	; 1
    53b0:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>

	if (Keypad_Get_Row() == current_row)
    53b4:	0e 94 59 29 	call	0x52b2	; 0x52b2 <Keypad_Get_Row>
    53b8:	98 2f       	mov	r25, r24
    53ba:	8a 81       	ldd	r24, Y+2	; 0x02
    53bc:	98 17       	cp	r25, r24
    53be:	11 f4       	brne	.+4      	; 0x53c4 <Keypad_Get_Column+0xb6>
	{
		Loc_Column = 2;
    53c0:	82 e0       	ldi	r24, 0x02	; 2
    53c2:	89 83       	std	Y+1, r24	; 0x01

	}

	DIO_write(DIO_PORTB, DIO_PIN4,DIO_HIGH);
    53c4:	81 e0       	ldi	r24, 0x01	; 1
    53c6:	64 e0       	ldi	r22, 0x04	; 4
    53c8:	41 e0       	ldi	r20, 0x01	; 1
    53ca:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(DIO_PORTB, DIO_PIN5,DIO_HIGH);
    53ce:	81 e0       	ldi	r24, 0x01	; 1
    53d0:	65 e0       	ldi	r22, 0x05	; 5
    53d2:	41 e0       	ldi	r20, 0x01	; 1
    53d4:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(DIO_PORTB, DIO_PIN6,DIO_HIGH);
    53d8:	81 e0       	ldi	r24, 0x01	; 1
    53da:	66 e0       	ldi	r22, 0x06	; 6
    53dc:	41 e0       	ldi	r20, 0x01	; 1
    53de:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(DIO_PORTB, DIO_PIN7,DIO_LOW);
    53e2:	81 e0       	ldi	r24, 0x01	; 1
    53e4:	67 e0       	ldi	r22, 0x07	; 7
    53e6:	40 e0       	ldi	r20, 0x00	; 0
    53e8:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>

	if (Keypad_Get_Row() == current_row)
    53ec:	0e 94 59 29 	call	0x52b2	; 0x52b2 <Keypad_Get_Row>
    53f0:	98 2f       	mov	r25, r24
    53f2:	8a 81       	ldd	r24, Y+2	; 0x02
    53f4:	98 17       	cp	r25, r24
    53f6:	11 f4       	brne	.+4      	; 0x53fc <Keypad_Get_Column+0xee>
	{
		Loc_Column = 3;
    53f8:	83 e0       	ldi	r24, 0x03	; 3
    53fa:	89 83       	std	Y+1, r24	; 0x01

	}
	return Loc_Column;
    53fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    53fe:	0f 90       	pop	r0
    5400:	0f 90       	pop	r0
    5402:	cf 91       	pop	r28
    5404:	df 91       	pop	r29
    5406:	08 95       	ret

00005408 <Keypad_Int>:

void Keypad_Int(void)
{
    5408:	df 93       	push	r29
    540a:	cf 93       	push	r28
    540c:	cd b7       	in	r28, 0x3d	; 61
    540e:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Rows Pins as Input	*/
	DIO_cnfg_channel(DIO_PORTC, DIO_PIN1, DIO_INPUT);
    5410:	82 e0       	ldi	r24, 0x02	; 2
    5412:	61 e0       	ldi	r22, 0x01	; 1
    5414:	40 e0       	ldi	r20, 0x00	; 0
    5416:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
	DIO_cnfg_channel(DIO_PORTC, DIO_PIN0, DIO_INPUT);
    541a:	82 e0       	ldi	r24, 0x02	; 2
    541c:	60 e0       	ldi	r22, 0x00	; 0
    541e:	40 e0       	ldi	r20, 0x00	; 0
    5420:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
	DIO_cnfg_channel(DIO_PORTC, DIO_PIN5, DIO_INPUT);
    5424:	82 e0       	ldi	r24, 0x02	; 2
    5426:	65 e0       	ldi	r22, 0x05	; 5
    5428:	40 e0       	ldi	r20, 0x00	; 0
    542a:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
	DIO_cnfg_channel(DIO_PORTA, DIO_PIN0, DIO_INPUT);
    542e:	80 e0       	ldi	r24, 0x00	; 0
    5430:	60 e0       	ldi	r22, 0x00	; 0
    5432:	40 e0       	ldi	r20, 0x00	; 0
    5434:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>

	/*	Enable Pull Up Resistor For Rows Channels	*/
	DIO_pull_up(DIO_PORTC, DIO_PIN1);
    5438:	82 e0       	ldi	r24, 0x02	; 2
    543a:	61 e0       	ldi	r22, 0x01	; 1
    543c:	0e 94 76 3d 	call	0x7aec	; 0x7aec <DIO_pull_up>
	DIO_pull_up(DIO_PORTC, DIO_PIN0);
    5440:	82 e0       	ldi	r24, 0x02	; 2
    5442:	60 e0       	ldi	r22, 0x00	; 0
    5444:	0e 94 76 3d 	call	0x7aec	; 0x7aec <DIO_pull_up>
	DIO_pull_up(DIO_PORTC, DIO_PIN5);
    5448:	82 e0       	ldi	r24, 0x02	; 2
    544a:	65 e0       	ldi	r22, 0x05	; 5
    544c:	0e 94 76 3d 	call	0x7aec	; 0x7aec <DIO_pull_up>
	DIO_pull_up(DIO_PORTA, DIO_PIN0);
    5450:	80 e0       	ldi	r24, 0x00	; 0
    5452:	60 e0       	ldi	r22, 0x00	; 0
    5454:	0e 94 76 3d 	call	0x7aec	; 0x7aec <DIO_pull_up>

	/*	Configure Columns Pins as Output	*/
	DIO_cnfg_channel(DIO_PORTB, DIO_PIN4, DIO_OUTPUT);
    5458:	81 e0       	ldi	r24, 0x01	; 1
    545a:	64 e0       	ldi	r22, 0x04	; 4
    545c:	41 e0       	ldi	r20, 0x01	; 1
    545e:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
	DIO_cnfg_channel(DIO_PORTB, DIO_PIN5, DIO_OUTPUT);
    5462:	81 e0       	ldi	r24, 0x01	; 1
    5464:	65 e0       	ldi	r22, 0x05	; 5
    5466:	41 e0       	ldi	r20, 0x01	; 1
    5468:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
	DIO_cnfg_channel(DIO_PORTB, DIO_PIN6, DIO_OUTPUT);
    546c:	81 e0       	ldi	r24, 0x01	; 1
    546e:	66 e0       	ldi	r22, 0x06	; 6
    5470:	41 e0       	ldi	r20, 0x01	; 1
    5472:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
	DIO_cnfg_channel(DIO_PORTB, DIO_PIN7, DIO_OUTPUT);
    5476:	81 e0       	ldi	r24, 0x01	; 1
    5478:	67 e0       	ldi	r22, 0x07	; 7
    547a:	41 e0       	ldi	r20, 0x01	; 1
    547c:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>

	/*	Initialize all Columns Outputs with zeros	*/
	DIO_write(DIO_PORTB, DIO_PIN4,DIO_LOW);
    5480:	81 e0       	ldi	r24, 0x01	; 1
    5482:	64 e0       	ldi	r22, 0x04	; 4
    5484:	40 e0       	ldi	r20, 0x00	; 0
    5486:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(DIO_PORTB, DIO_PIN5,DIO_LOW);
    548a:	81 e0       	ldi	r24, 0x01	; 1
    548c:	65 e0       	ldi	r22, 0x05	; 5
    548e:	40 e0       	ldi	r20, 0x00	; 0
    5490:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(DIO_PORTB, DIO_PIN6,DIO_LOW);
    5494:	81 e0       	ldi	r24, 0x01	; 1
    5496:	66 e0       	ldi	r22, 0x06	; 6
    5498:	40 e0       	ldi	r20, 0x00	; 0
    549a:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(DIO_PORTB, DIO_PIN7,DIO_LOW);
    549e:	81 e0       	ldi	r24, 0x01	; 1
    54a0:	67 e0       	ldi	r22, 0x07	; 7
    54a2:	40 e0       	ldi	r20, 0x00	; 0
    54a4:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
}
    54a8:	cf 91       	pop	r28
    54aa:	df 91       	pop	r29
    54ac:	08 95       	ret

000054ae <Keypad_Read>:



u8 Keypad_Read(void)
{
    54ae:	df 93       	push	r29
    54b0:	cf 93       	push	r28
    54b2:	00 d0       	rcall	.+0      	; 0x54b4 <Keypad_Read+0x6>
    54b4:	00 d0       	rcall	.+0      	; 0x54b6 <Keypad_Read+0x8>
    54b6:	cd b7       	in	r28, 0x3d	; 61
    54b8:	de b7       	in	r29, 0x3e	; 62
	s8 loc_Row = -1;
    54ba:	8f ef       	ldi	r24, 0xFF	; 255
    54bc:	8b 83       	std	Y+3, r24	; 0x03
	s8 loc_Col = -1;
    54be:	8f ef       	ldi	r24, 0xFF	; 255
    54c0:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_button;

	Keypad_Int();
    54c2:	0e 94 04 2a 	call	0x5408	; 0x5408 <Keypad_Int>
	if(Keypad_Is_Pressed() == TRUE)
    54c6:	0e 94 33 29 	call	0x5266	; 0x5266 <Keypad_Is_Pressed>
    54ca:	81 30       	cpi	r24, 0x01	; 1
    54cc:	01 f5       	brne	.+64     	; 0x550e <Keypad_Read+0x60>
	{
		loc_Row = Keypad_Get_Row();
    54ce:	0e 94 59 29 	call	0x52b2	; 0x52b2 <Keypad_Get_Row>
    54d2:	8b 83       	std	Y+3, r24	; 0x03
		loc_Col = Keypad_Get_Column(loc_Row);
    54d4:	8b 81       	ldd	r24, Y+3	; 0x03
    54d6:	0e 94 87 29 	call	0x530e	; 0x530e <Keypad_Get_Column>
    54da:	8a 83       	std	Y+2, r24	; 0x02
		loc_button = Keypad_Layout[loc_Row][loc_Col];
    54dc:	8b 81       	ldd	r24, Y+3	; 0x03
    54de:	48 2f       	mov	r20, r24
    54e0:	55 27       	eor	r21, r21
    54e2:	47 fd       	sbrc	r20, 7
    54e4:	50 95       	com	r21
    54e6:	8a 81       	ldd	r24, Y+2	; 0x02
    54e8:	28 2f       	mov	r18, r24
    54ea:	33 27       	eor	r19, r19
    54ec:	27 fd       	sbrc	r18, 7
    54ee:	30 95       	com	r19
    54f0:	ca 01       	movw	r24, r20
    54f2:	88 0f       	add	r24, r24
    54f4:	99 1f       	adc	r25, r25
    54f6:	88 0f       	add	r24, r24
    54f8:	99 1f       	adc	r25, r25
    54fa:	82 0f       	add	r24, r18
    54fc:	93 1f       	adc	r25, r19
    54fe:	fc 01       	movw	r30, r24
    5500:	ee 52       	subi	r30, 0x2E	; 46
    5502:	fd 4f       	sbci	r31, 0xFD	; 253
    5504:	80 81       	ld	r24, Z
    5506:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		return 0xFF;
	}
	return loc_button;
    5508:	89 81       	ldd	r24, Y+1	; 0x01
    550a:	8c 83       	std	Y+4, r24	; 0x04
    550c:	02 c0       	rjmp	.+4      	; 0x5512 <Keypad_Read+0x64>
		loc_Col = Keypad_Get_Column(loc_Row);
		loc_button = Keypad_Layout[loc_Row][loc_Col];
	}
	else
	{
		return 0xFF;
    550e:	8f ef       	ldi	r24, 0xFF	; 255
    5510:	8c 83       	std	Y+4, r24	; 0x04
    5512:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return loc_button;
}
    5514:	0f 90       	pop	r0
    5516:	0f 90       	pop	r0
    5518:	0f 90       	pop	r0
    551a:	0f 90       	pop	r0
    551c:	cf 91       	pop	r28
    551e:	df 91       	pop	r29
    5520:	08 95       	ret

00005522 <SSD_Int>:
 *      Author: lione
 */
#include "SSD_Interface.h"

void SSD_Int()
{
    5522:	df 93       	push	r29
    5524:	cf 93       	push	r28
    5526:	cd b7       	in	r28, 0x3d	; 61
    5528:	de b7       	in	r29, 0x3e	; 62
	/*	Configure SSD Enable Lines as Output	*/
			DIO_cnfg_channel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
    552a:	81 e0       	ldi	r24, 0x01	; 1
    552c:	61 e0       	ldi	r22, 0x01	; 1
    552e:	41 e0       	ldi	r20, 0x01	; 1
    5530:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
			DIO_cnfg_channel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
    5534:	81 e0       	ldi	r24, 0x01	; 1
    5536:	62 e0       	ldi	r22, 0x02	; 2
    5538:	41 e0       	ldi	r20, 0x01	; 1
    553a:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
			/*Configure SSD DIP Line*/
			DIO_cnfg_channel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    553e:	81 e0       	ldi	r24, 0x01	; 1
    5540:	63 e0       	ldi	r22, 0x03	; 3
    5542:	41 e0       	ldi	r20, 0x01	; 1
    5544:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>

			/*	Configure SSD Data Lines as Output		*/
			DIO_cnfg_channel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
    5548:	80 e0       	ldi	r24, 0x00	; 0
    554a:	64 e0       	ldi	r22, 0x04	; 4
    554c:	41 e0       	ldi	r20, 0x01	; 1
    554e:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
			DIO_cnfg_channel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
    5552:	80 e0       	ldi	r24, 0x00	; 0
    5554:	65 e0       	ldi	r22, 0x05	; 5
    5556:	41 e0       	ldi	r20, 0x01	; 1
    5558:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
			DIO_cnfg_channel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
    555c:	80 e0       	ldi	r24, 0x00	; 0
    555e:	66 e0       	ldi	r22, 0x06	; 6
    5560:	41 e0       	ldi	r20, 0x01	; 1
    5562:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
			DIO_cnfg_channel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
    5566:	80 e0       	ldi	r24, 0x00	; 0
    5568:	67 e0       	ldi	r22, 0x07	; 7
    556a:	41 e0       	ldi	r20, 0x01	; 1
    556c:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>


			/*Make SSD off*/

			DIO_write(DIO_PORTB, DIO_PIN1, DIO_LOW);
    5570:	81 e0       	ldi	r24, 0x01	; 1
    5572:	61 e0       	ldi	r22, 0x01	; 1
    5574:	40 e0       	ldi	r20, 0x00	; 0
    5576:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
			DIO_write(DIO_PORTB, DIO_PIN2, DIO_LOW);
    557a:	81 e0       	ldi	r24, 0x01	; 1
    557c:	62 e0       	ldi	r22, 0x02	; 2
    557e:	40 e0       	ldi	r20, 0x00	; 0
    5580:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
}
    5584:	cf 91       	pop	r28
    5586:	df 91       	pop	r29
    5588:	08 95       	ret

0000558a <SSD_Display>:
void SSD_Display(u8 number)
{
    558a:	df 93       	push	r29
    558c:	cf 93       	push	r28
    558e:	cd b7       	in	r28, 0x3d	; 61
    5590:	de b7       	in	r29, 0x3e	; 62
    5592:	6f 97       	sbiw	r28, 0x1f	; 31
    5594:	0f b6       	in	r0, 0x3f	; 63
    5596:	f8 94       	cli
    5598:	de bf       	out	0x3e, r29	; 62
    559a:	0f be       	out	0x3f, r0	; 63
    559c:	cd bf       	out	0x3d, r28	; 61
    559e:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 Loc_SSD_Firist_Digit=(number%10)<<4;
    55a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    55a2:	9a e0       	ldi	r25, 0x0A	; 10
    55a4:	69 2f       	mov	r22, r25
    55a6:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__udivmodqi4>
    55aa:	89 2f       	mov	r24, r25
    55ac:	82 95       	swap	r24
    55ae:	80 7f       	andi	r24, 0xF0	; 240
    55b0:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 Loc_SSD_Second_Digit=(number/10)<<4;
    55b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    55b4:	9a e0       	ldi	r25, 0x0A	; 10
    55b6:	69 2f       	mov	r22, r25
    55b8:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <__udivmodqi4>
    55bc:	82 95       	swap	r24
    55be:	80 7f       	andi	r24, 0xF0	; 240
    55c0:	8d 8f       	std	Y+29, r24	; 0x1d
if(number<=99)
    55c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    55c4:	84 36       	cpi	r24, 0x64	; 100
    55c6:	08 f0       	brcs	.+2      	; 0x55ca <SSD_Display+0x40>
    55c8:	02 c1       	rjmp	.+516    	; 0x57ce <SSD_Display+0x244>
{
	/*Make Digit one on*/
	DIO_write(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    55ca:	81 e0       	ldi	r24, 0x01	; 1
    55cc:	61 e0       	ldi	r22, 0x01	; 1
    55ce:	41 e0       	ldi	r20, 0x01	; 1
    55d0:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	/*Make Digit two off*/
	DIO_write(DIO_PORTB, DIO_PIN2, DIO_LOW);
    55d4:	81 e0       	ldi	r24, 0x01	; 1
    55d6:	62 e0       	ldi	r22, 0x02	; 2
    55d8:	40 e0       	ldi	r20, 0x00	; 0
    55da:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	/*Send Number of First Digit*/
	DIO_write_Group(DIO_PORTA, 0xF0,Loc_SSD_Firist_Digit );
    55de:	80 e0       	ldi	r24, 0x00	; 0
    55e0:	60 ef       	ldi	r22, 0xF0	; 240
    55e2:	4e 8d       	ldd	r20, Y+30	; 0x1e
    55e4:	0e 94 e3 3b 	call	0x77c6	; 0x77c6 <DIO_write_Group>
    55e8:	80 e0       	ldi	r24, 0x00	; 0
    55ea:	90 e0       	ldi	r25, 0x00	; 0
    55ec:	a0 e8       	ldi	r26, 0x80	; 128
    55ee:	bf e3       	ldi	r27, 0x3F	; 63
    55f0:	89 8f       	std	Y+25, r24	; 0x19
    55f2:	9a 8f       	std	Y+26, r25	; 0x1a
    55f4:	ab 8f       	std	Y+27, r26	; 0x1b
    55f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55f8:	69 8d       	ldd	r22, Y+25	; 0x19
    55fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5600:	20 e0       	ldi	r18, 0x00	; 0
    5602:	30 e0       	ldi	r19, 0x00	; 0
    5604:	4a e7       	ldi	r20, 0x7A	; 122
    5606:	53 e4       	ldi	r21, 0x43	; 67
    5608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    560c:	dc 01       	movw	r26, r24
    560e:	cb 01       	movw	r24, r22
    5610:	8d 8b       	std	Y+21, r24	; 0x15
    5612:	9e 8b       	std	Y+22, r25	; 0x16
    5614:	af 8b       	std	Y+23, r26	; 0x17
    5616:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5618:	6d 89       	ldd	r22, Y+21	; 0x15
    561a:	7e 89       	ldd	r23, Y+22	; 0x16
    561c:	8f 89       	ldd	r24, Y+23	; 0x17
    561e:	98 8d       	ldd	r25, Y+24	; 0x18
    5620:	20 e0       	ldi	r18, 0x00	; 0
    5622:	30 e0       	ldi	r19, 0x00	; 0
    5624:	40 e8       	ldi	r20, 0x80	; 128
    5626:	5f e3       	ldi	r21, 0x3F	; 63
    5628:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    562c:	88 23       	and	r24, r24
    562e:	2c f4       	brge	.+10     	; 0x563a <SSD_Display+0xb0>
		__ticks = 1;
    5630:	81 e0       	ldi	r24, 0x01	; 1
    5632:	90 e0       	ldi	r25, 0x00	; 0
    5634:	9c 8b       	std	Y+20, r25	; 0x14
    5636:	8b 8b       	std	Y+19, r24	; 0x13
    5638:	3f c0       	rjmp	.+126    	; 0x56b8 <SSD_Display+0x12e>
	else if (__tmp > 65535)
    563a:	6d 89       	ldd	r22, Y+21	; 0x15
    563c:	7e 89       	ldd	r23, Y+22	; 0x16
    563e:	8f 89       	ldd	r24, Y+23	; 0x17
    5640:	98 8d       	ldd	r25, Y+24	; 0x18
    5642:	20 e0       	ldi	r18, 0x00	; 0
    5644:	3f ef       	ldi	r19, 0xFF	; 255
    5646:	4f e7       	ldi	r20, 0x7F	; 127
    5648:	57 e4       	ldi	r21, 0x47	; 71
    564a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    564e:	18 16       	cp	r1, r24
    5650:	4c f5       	brge	.+82     	; 0x56a4 <SSD_Display+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5652:	69 8d       	ldd	r22, Y+25	; 0x19
    5654:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5656:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5658:	9c 8d       	ldd	r25, Y+28	; 0x1c
    565a:	20 e0       	ldi	r18, 0x00	; 0
    565c:	30 e0       	ldi	r19, 0x00	; 0
    565e:	40 e2       	ldi	r20, 0x20	; 32
    5660:	51 e4       	ldi	r21, 0x41	; 65
    5662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5666:	dc 01       	movw	r26, r24
    5668:	cb 01       	movw	r24, r22
    566a:	bc 01       	movw	r22, r24
    566c:	cd 01       	movw	r24, r26
    566e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5672:	dc 01       	movw	r26, r24
    5674:	cb 01       	movw	r24, r22
    5676:	9c 8b       	std	Y+20, r25	; 0x14
    5678:	8b 8b       	std	Y+19, r24	; 0x13
    567a:	0f c0       	rjmp	.+30     	; 0x569a <SSD_Display+0x110>
    567c:	89 e1       	ldi	r24, 0x19	; 25
    567e:	90 e0       	ldi	r25, 0x00	; 0
    5680:	9a 8b       	std	Y+18, r25	; 0x12
    5682:	89 8b       	std	Y+17, r24	; 0x11
    5684:	89 89       	ldd	r24, Y+17	; 0x11
    5686:	9a 89       	ldd	r25, Y+18	; 0x12
    5688:	01 97       	sbiw	r24, 0x01	; 1
    568a:	f1 f7       	brne	.-4      	; 0x5688 <SSD_Display+0xfe>
    568c:	9a 8b       	std	Y+18, r25	; 0x12
    568e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5690:	8b 89       	ldd	r24, Y+19	; 0x13
    5692:	9c 89       	ldd	r25, Y+20	; 0x14
    5694:	01 97       	sbiw	r24, 0x01	; 1
    5696:	9c 8b       	std	Y+20, r25	; 0x14
    5698:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    569a:	8b 89       	ldd	r24, Y+19	; 0x13
    569c:	9c 89       	ldd	r25, Y+20	; 0x14
    569e:	00 97       	sbiw	r24, 0x00	; 0
    56a0:	69 f7       	brne	.-38     	; 0x567c <SSD_Display+0xf2>
    56a2:	14 c0       	rjmp	.+40     	; 0x56cc <SSD_Display+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56a4:	6d 89       	ldd	r22, Y+21	; 0x15
    56a6:	7e 89       	ldd	r23, Y+22	; 0x16
    56a8:	8f 89       	ldd	r24, Y+23	; 0x17
    56aa:	98 8d       	ldd	r25, Y+24	; 0x18
    56ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56b0:	dc 01       	movw	r26, r24
    56b2:	cb 01       	movw	r24, r22
    56b4:	9c 8b       	std	Y+20, r25	; 0x14
    56b6:	8b 8b       	std	Y+19, r24	; 0x13
    56b8:	8b 89       	ldd	r24, Y+19	; 0x13
    56ba:	9c 89       	ldd	r25, Y+20	; 0x14
    56bc:	98 8b       	std	Y+16, r25	; 0x10
    56be:	8f 87       	std	Y+15, r24	; 0x0f
    56c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    56c2:	98 89       	ldd	r25, Y+16	; 0x10
    56c4:	01 97       	sbiw	r24, 0x01	; 1
    56c6:	f1 f7       	brne	.-4      	; 0x56c4 <SSD_Display+0x13a>
    56c8:	98 8b       	std	Y+16, r25	; 0x10
    56ca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/*Make Digit one off*/
	DIO_write(DIO_PORTB, DIO_PIN1, DIO_LOW);
    56cc:	81 e0       	ldi	r24, 0x01	; 1
    56ce:	61 e0       	ldi	r22, 0x01	; 1
    56d0:	40 e0       	ldi	r20, 0x00	; 0
    56d2:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		/*Make Digit two on*/
	DIO_write(DIO_PORTB, DIO_PIN2, DIO_HIGH);
    56d6:	81 e0       	ldi	r24, 0x01	; 1
    56d8:	62 e0       	ldi	r22, 0x02	; 2
    56da:	41 e0       	ldi	r20, 0x01	; 1
    56dc:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
		/*Send Number of Second Digit*/
	DIO_write_Group(DIO_PORTA, 0xF0,Loc_SSD_Second_Digit );
    56e0:	80 e0       	ldi	r24, 0x00	; 0
    56e2:	60 ef       	ldi	r22, 0xF0	; 240
    56e4:	4d 8d       	ldd	r20, Y+29	; 0x1d
    56e6:	0e 94 e3 3b 	call	0x77c6	; 0x77c6 <DIO_write_Group>
    56ea:	80 e0       	ldi	r24, 0x00	; 0
    56ec:	90 e0       	ldi	r25, 0x00	; 0
    56ee:	a0 e8       	ldi	r26, 0x80	; 128
    56f0:	bf e3       	ldi	r27, 0x3F	; 63
    56f2:	8b 87       	std	Y+11, r24	; 0x0b
    56f4:	9c 87       	std	Y+12, r25	; 0x0c
    56f6:	ad 87       	std	Y+13, r26	; 0x0d
    56f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    56fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    56fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5700:	9e 85       	ldd	r25, Y+14	; 0x0e
    5702:	20 e0       	ldi	r18, 0x00	; 0
    5704:	30 e0       	ldi	r19, 0x00	; 0
    5706:	4a e7       	ldi	r20, 0x7A	; 122
    5708:	53 e4       	ldi	r21, 0x43	; 67
    570a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    570e:	dc 01       	movw	r26, r24
    5710:	cb 01       	movw	r24, r22
    5712:	8f 83       	std	Y+7, r24	; 0x07
    5714:	98 87       	std	Y+8, r25	; 0x08
    5716:	a9 87       	std	Y+9, r26	; 0x09
    5718:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    571a:	6f 81       	ldd	r22, Y+7	; 0x07
    571c:	78 85       	ldd	r23, Y+8	; 0x08
    571e:	89 85       	ldd	r24, Y+9	; 0x09
    5720:	9a 85       	ldd	r25, Y+10	; 0x0a
    5722:	20 e0       	ldi	r18, 0x00	; 0
    5724:	30 e0       	ldi	r19, 0x00	; 0
    5726:	40 e8       	ldi	r20, 0x80	; 128
    5728:	5f e3       	ldi	r21, 0x3F	; 63
    572a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    572e:	88 23       	and	r24, r24
    5730:	2c f4       	brge	.+10     	; 0x573c <SSD_Display+0x1b2>
		__ticks = 1;
    5732:	81 e0       	ldi	r24, 0x01	; 1
    5734:	90 e0       	ldi	r25, 0x00	; 0
    5736:	9e 83       	std	Y+6, r25	; 0x06
    5738:	8d 83       	std	Y+5, r24	; 0x05
    573a:	3f c0       	rjmp	.+126    	; 0x57ba <SSD_Display+0x230>
	else if (__tmp > 65535)
    573c:	6f 81       	ldd	r22, Y+7	; 0x07
    573e:	78 85       	ldd	r23, Y+8	; 0x08
    5740:	89 85       	ldd	r24, Y+9	; 0x09
    5742:	9a 85       	ldd	r25, Y+10	; 0x0a
    5744:	20 e0       	ldi	r18, 0x00	; 0
    5746:	3f ef       	ldi	r19, 0xFF	; 255
    5748:	4f e7       	ldi	r20, 0x7F	; 127
    574a:	57 e4       	ldi	r21, 0x47	; 71
    574c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5750:	18 16       	cp	r1, r24
    5752:	4c f5       	brge	.+82     	; 0x57a6 <SSD_Display+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5754:	6b 85       	ldd	r22, Y+11	; 0x0b
    5756:	7c 85       	ldd	r23, Y+12	; 0x0c
    5758:	8d 85       	ldd	r24, Y+13	; 0x0d
    575a:	9e 85       	ldd	r25, Y+14	; 0x0e
    575c:	20 e0       	ldi	r18, 0x00	; 0
    575e:	30 e0       	ldi	r19, 0x00	; 0
    5760:	40 e2       	ldi	r20, 0x20	; 32
    5762:	51 e4       	ldi	r21, 0x41	; 65
    5764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5768:	dc 01       	movw	r26, r24
    576a:	cb 01       	movw	r24, r22
    576c:	bc 01       	movw	r22, r24
    576e:	cd 01       	movw	r24, r26
    5770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5774:	dc 01       	movw	r26, r24
    5776:	cb 01       	movw	r24, r22
    5778:	9e 83       	std	Y+6, r25	; 0x06
    577a:	8d 83       	std	Y+5, r24	; 0x05
    577c:	0f c0       	rjmp	.+30     	; 0x579c <SSD_Display+0x212>
    577e:	89 e1       	ldi	r24, 0x19	; 25
    5780:	90 e0       	ldi	r25, 0x00	; 0
    5782:	9c 83       	std	Y+4, r25	; 0x04
    5784:	8b 83       	std	Y+3, r24	; 0x03
    5786:	8b 81       	ldd	r24, Y+3	; 0x03
    5788:	9c 81       	ldd	r25, Y+4	; 0x04
    578a:	01 97       	sbiw	r24, 0x01	; 1
    578c:	f1 f7       	brne	.-4      	; 0x578a <SSD_Display+0x200>
    578e:	9c 83       	std	Y+4, r25	; 0x04
    5790:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5792:	8d 81       	ldd	r24, Y+5	; 0x05
    5794:	9e 81       	ldd	r25, Y+6	; 0x06
    5796:	01 97       	sbiw	r24, 0x01	; 1
    5798:	9e 83       	std	Y+6, r25	; 0x06
    579a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    579c:	8d 81       	ldd	r24, Y+5	; 0x05
    579e:	9e 81       	ldd	r25, Y+6	; 0x06
    57a0:	00 97       	sbiw	r24, 0x00	; 0
    57a2:	69 f7       	brne	.-38     	; 0x577e <SSD_Display+0x1f4>
    57a4:	14 c0       	rjmp	.+40     	; 0x57ce <SSD_Display+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57a6:	6f 81       	ldd	r22, Y+7	; 0x07
    57a8:	78 85       	ldd	r23, Y+8	; 0x08
    57aa:	89 85       	ldd	r24, Y+9	; 0x09
    57ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    57ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57b2:	dc 01       	movw	r26, r24
    57b4:	cb 01       	movw	r24, r22
    57b6:	9e 83       	std	Y+6, r25	; 0x06
    57b8:	8d 83       	std	Y+5, r24	; 0x05
    57ba:	8d 81       	ldd	r24, Y+5	; 0x05
    57bc:	9e 81       	ldd	r25, Y+6	; 0x06
    57be:	9a 83       	std	Y+2, r25	; 0x02
    57c0:	89 83       	std	Y+1, r24	; 0x01
    57c2:	89 81       	ldd	r24, Y+1	; 0x01
    57c4:	9a 81       	ldd	r25, Y+2	; 0x02
    57c6:	01 97       	sbiw	r24, 0x01	; 1
    57c8:	f1 f7       	brne	.-4      	; 0x57c6 <SSD_Display+0x23c>
    57ca:	9a 83       	std	Y+2, r25	; 0x02
    57cc:	89 83       	std	Y+1, r24	; 0x01
}
else
{
/*Do Nothing*/
}
}
    57ce:	6f 96       	adiw	r28, 0x1f	; 31
    57d0:	0f b6       	in	r0, 0x3f	; 63
    57d2:	f8 94       	cli
    57d4:	de bf       	out	0x3e, r29	; 62
    57d6:	0f be       	out	0x3f, r0	; 63
    57d8:	cd bf       	out	0x3d, r28	; 61
    57da:	cf 91       	pop	r28
    57dc:	df 91       	pop	r29
    57de:	08 95       	ret

000057e0 <SSD_Display_With_Delay>:
void SSD_Display_With_Delay(u8 number,u32 delay)
{
    57e0:	df 93       	push	r29
    57e2:	cf 93       	push	r28
    57e4:	cd b7       	in	r28, 0x3d	; 61
    57e6:	de b7       	in	r29, 0x3e	; 62
    57e8:	67 97       	sbiw	r28, 0x17	; 23
    57ea:	0f b6       	in	r0, 0x3f	; 63
    57ec:	f8 94       	cli
    57ee:	de bf       	out	0x3e, r29	; 62
    57f0:	0f be       	out	0x3f, r0	; 63
    57f2:	cd bf       	out	0x3d, r28	; 61
    57f4:	8b 8b       	std	Y+19, r24	; 0x13
    57f6:	4c 8b       	std	Y+20, r20	; 0x14
    57f8:	5d 8b       	std	Y+21, r21	; 0x15
    57fa:	6e 8b       	std	Y+22, r22	; 0x16
    57fc:	7f 8b       	std	Y+23, r23	; 0x17
	u32 counter=0;
    57fe:	1f 86       	std	Y+15, r1	; 0x0f
    5800:	18 8a       	std	Y+16, r1	; 0x10
    5802:	19 8a       	std	Y+17, r1	; 0x11
    5804:	1a 8a       	std	Y+18, r1	; 0x12
	for(counter=0;counter<delay;counter+=3)
    5806:	1f 86       	std	Y+15, r1	; 0x0f
    5808:	18 8a       	std	Y+16, r1	; 0x10
    580a:	19 8a       	std	Y+17, r1	; 0x11
    580c:	1a 8a       	std	Y+18, r1	; 0x12
    580e:	80 c0       	rjmp	.+256    	; 0x5910 <SSD_Display_With_Delay+0x130>
	{
		SSD_Display(number);
    5810:	8b 89       	ldd	r24, Y+19	; 0x13
    5812:	0e 94 c5 2a 	call	0x558a	; 0x558a <SSD_Display>
    5816:	80 e0       	ldi	r24, 0x00	; 0
    5818:	90 e0       	ldi	r25, 0x00	; 0
    581a:	a0 e8       	ldi	r26, 0x80	; 128
    581c:	bf e3       	ldi	r27, 0x3F	; 63
    581e:	8b 87       	std	Y+11, r24	; 0x0b
    5820:	9c 87       	std	Y+12, r25	; 0x0c
    5822:	ad 87       	std	Y+13, r26	; 0x0d
    5824:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5826:	6b 85       	ldd	r22, Y+11	; 0x0b
    5828:	7c 85       	ldd	r23, Y+12	; 0x0c
    582a:	8d 85       	ldd	r24, Y+13	; 0x0d
    582c:	9e 85       	ldd	r25, Y+14	; 0x0e
    582e:	20 e0       	ldi	r18, 0x00	; 0
    5830:	30 e0       	ldi	r19, 0x00	; 0
    5832:	4a e7       	ldi	r20, 0x7A	; 122
    5834:	53 e4       	ldi	r21, 0x43	; 67
    5836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    583a:	dc 01       	movw	r26, r24
    583c:	cb 01       	movw	r24, r22
    583e:	8f 83       	std	Y+7, r24	; 0x07
    5840:	98 87       	std	Y+8, r25	; 0x08
    5842:	a9 87       	std	Y+9, r26	; 0x09
    5844:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5846:	6f 81       	ldd	r22, Y+7	; 0x07
    5848:	78 85       	ldd	r23, Y+8	; 0x08
    584a:	89 85       	ldd	r24, Y+9	; 0x09
    584c:	9a 85       	ldd	r25, Y+10	; 0x0a
    584e:	20 e0       	ldi	r18, 0x00	; 0
    5850:	30 e0       	ldi	r19, 0x00	; 0
    5852:	40 e8       	ldi	r20, 0x80	; 128
    5854:	5f e3       	ldi	r21, 0x3F	; 63
    5856:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    585a:	88 23       	and	r24, r24
    585c:	2c f4       	brge	.+10     	; 0x5868 <SSD_Display_With_Delay+0x88>
		__ticks = 1;
    585e:	81 e0       	ldi	r24, 0x01	; 1
    5860:	90 e0       	ldi	r25, 0x00	; 0
    5862:	9e 83       	std	Y+6, r25	; 0x06
    5864:	8d 83       	std	Y+5, r24	; 0x05
    5866:	3f c0       	rjmp	.+126    	; 0x58e6 <SSD_Display_With_Delay+0x106>
	else if (__tmp > 65535)
    5868:	6f 81       	ldd	r22, Y+7	; 0x07
    586a:	78 85       	ldd	r23, Y+8	; 0x08
    586c:	89 85       	ldd	r24, Y+9	; 0x09
    586e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5870:	20 e0       	ldi	r18, 0x00	; 0
    5872:	3f ef       	ldi	r19, 0xFF	; 255
    5874:	4f e7       	ldi	r20, 0x7F	; 127
    5876:	57 e4       	ldi	r21, 0x47	; 71
    5878:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    587c:	18 16       	cp	r1, r24
    587e:	4c f5       	brge	.+82     	; 0x58d2 <SSD_Display_With_Delay+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5880:	6b 85       	ldd	r22, Y+11	; 0x0b
    5882:	7c 85       	ldd	r23, Y+12	; 0x0c
    5884:	8d 85       	ldd	r24, Y+13	; 0x0d
    5886:	9e 85       	ldd	r25, Y+14	; 0x0e
    5888:	20 e0       	ldi	r18, 0x00	; 0
    588a:	30 e0       	ldi	r19, 0x00	; 0
    588c:	40 e2       	ldi	r20, 0x20	; 32
    588e:	51 e4       	ldi	r21, 0x41	; 65
    5890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5894:	dc 01       	movw	r26, r24
    5896:	cb 01       	movw	r24, r22
    5898:	bc 01       	movw	r22, r24
    589a:	cd 01       	movw	r24, r26
    589c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58a0:	dc 01       	movw	r26, r24
    58a2:	cb 01       	movw	r24, r22
    58a4:	9e 83       	std	Y+6, r25	; 0x06
    58a6:	8d 83       	std	Y+5, r24	; 0x05
    58a8:	0f c0       	rjmp	.+30     	; 0x58c8 <SSD_Display_With_Delay+0xe8>
    58aa:	89 e1       	ldi	r24, 0x19	; 25
    58ac:	90 e0       	ldi	r25, 0x00	; 0
    58ae:	9c 83       	std	Y+4, r25	; 0x04
    58b0:	8b 83       	std	Y+3, r24	; 0x03
    58b2:	8b 81       	ldd	r24, Y+3	; 0x03
    58b4:	9c 81       	ldd	r25, Y+4	; 0x04
    58b6:	01 97       	sbiw	r24, 0x01	; 1
    58b8:	f1 f7       	brne	.-4      	; 0x58b6 <SSD_Display_With_Delay+0xd6>
    58ba:	9c 83       	std	Y+4, r25	; 0x04
    58bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58be:	8d 81       	ldd	r24, Y+5	; 0x05
    58c0:	9e 81       	ldd	r25, Y+6	; 0x06
    58c2:	01 97       	sbiw	r24, 0x01	; 1
    58c4:	9e 83       	std	Y+6, r25	; 0x06
    58c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58c8:	8d 81       	ldd	r24, Y+5	; 0x05
    58ca:	9e 81       	ldd	r25, Y+6	; 0x06
    58cc:	00 97       	sbiw	r24, 0x00	; 0
    58ce:	69 f7       	brne	.-38     	; 0x58aa <SSD_Display_With_Delay+0xca>
    58d0:	14 c0       	rjmp	.+40     	; 0x58fa <SSD_Display_With_Delay+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58d2:	6f 81       	ldd	r22, Y+7	; 0x07
    58d4:	78 85       	ldd	r23, Y+8	; 0x08
    58d6:	89 85       	ldd	r24, Y+9	; 0x09
    58d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    58da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58de:	dc 01       	movw	r26, r24
    58e0:	cb 01       	movw	r24, r22
    58e2:	9e 83       	std	Y+6, r25	; 0x06
    58e4:	8d 83       	std	Y+5, r24	; 0x05
    58e6:	8d 81       	ldd	r24, Y+5	; 0x05
    58e8:	9e 81       	ldd	r25, Y+6	; 0x06
    58ea:	9a 83       	std	Y+2, r25	; 0x02
    58ec:	89 83       	std	Y+1, r24	; 0x01
    58ee:	89 81       	ldd	r24, Y+1	; 0x01
    58f0:	9a 81       	ldd	r25, Y+2	; 0x02
    58f2:	01 97       	sbiw	r24, 0x01	; 1
    58f4:	f1 f7       	brne	.-4      	; 0x58f2 <SSD_Display_With_Delay+0x112>
    58f6:	9a 83       	std	Y+2, r25	; 0x02
    58f8:	89 83       	std	Y+1, r24	; 0x01
}
}
void SSD_Display_With_Delay(u8 number,u32 delay)
{
	u32 counter=0;
	for(counter=0;counter<delay;counter+=3)
    58fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    58fc:	98 89       	ldd	r25, Y+16	; 0x10
    58fe:	a9 89       	ldd	r26, Y+17	; 0x11
    5900:	ba 89       	ldd	r27, Y+18	; 0x12
    5902:	03 96       	adiw	r24, 0x03	; 3
    5904:	a1 1d       	adc	r26, r1
    5906:	b1 1d       	adc	r27, r1
    5908:	8f 87       	std	Y+15, r24	; 0x0f
    590a:	98 8b       	std	Y+16, r25	; 0x10
    590c:	a9 8b       	std	Y+17, r26	; 0x11
    590e:	ba 8b       	std	Y+18, r27	; 0x12
    5910:	2f 85       	ldd	r18, Y+15	; 0x0f
    5912:	38 89       	ldd	r19, Y+16	; 0x10
    5914:	49 89       	ldd	r20, Y+17	; 0x11
    5916:	5a 89       	ldd	r21, Y+18	; 0x12
    5918:	8c 89       	ldd	r24, Y+20	; 0x14
    591a:	9d 89       	ldd	r25, Y+21	; 0x15
    591c:	ae 89       	ldd	r26, Y+22	; 0x16
    591e:	bf 89       	ldd	r27, Y+23	; 0x17
    5920:	28 17       	cp	r18, r24
    5922:	39 07       	cpc	r19, r25
    5924:	4a 07       	cpc	r20, r26
    5926:	5b 07       	cpc	r21, r27
    5928:	08 f4       	brcc	.+2      	; 0x592c <SSD_Display_With_Delay+0x14c>
    592a:	72 cf       	rjmp	.-284    	; 0x5810 <SSD_Display_With_Delay+0x30>
	{
		SSD_Display(number);
		_delay_ms(1);

	}
}
    592c:	67 96       	adiw	r28, 0x17	; 23
    592e:	0f b6       	in	r0, 0x3f	; 63
    5930:	f8 94       	cli
    5932:	de bf       	out	0x3e, r29	; 62
    5934:	0f be       	out	0x3f, r0	; 63
    5936:	cd bf       	out	0x3d, r28	; 61
    5938:	cf 91       	pop	r28
    593a:	df 91       	pop	r29
    593c:	08 95       	ret

0000593e <Lcd_Pulse>:
#include "DIO_INTERFACE.h"

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];

void Lcd_Pulse()
{
    593e:	df 93       	push	r29
    5940:	cf 93       	push	r28
    5942:	cd b7       	in	r28, 0x3d	; 61
    5944:	de b7       	in	r29, 0x3e	; 62
    5946:	a6 97       	sbiw	r28, 0x26	; 38
    5948:	0f b6       	in	r0, 0x3f	; 63
    594a:	f8 94       	cli
    594c:	de bf       	out	0x3e, r29	; 62
    594e:	0f be       	out	0x3f, r0	; 63
    5950:	cd bf       	out	0x3d, r28	; 61
DIO_write(DIO_PORTB, DIO_PIN3, DIO_HIGH);
    5952:	81 e0       	ldi	r24, 0x01	; 1
    5954:	63 e0       	ldi	r22, 0x03	; 3
    5956:	41 e0       	ldi	r20, 0x01	; 1
    5958:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
    595c:	80 e0       	ldi	r24, 0x00	; 0
    595e:	90 e0       	ldi	r25, 0x00	; 0
    5960:	a0 e8       	ldi	r26, 0x80	; 128
    5962:	bf e3       	ldi	r27, 0x3F	; 63
    5964:	8b a3       	std	Y+35, r24	; 0x23
    5966:	9c a3       	std	Y+36, r25	; 0x24
    5968:	ad a3       	std	Y+37, r26	; 0x25
    596a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    596c:	6b a1       	ldd	r22, Y+35	; 0x23
    596e:	7c a1       	ldd	r23, Y+36	; 0x24
    5970:	8d a1       	ldd	r24, Y+37	; 0x25
    5972:	9e a1       	ldd	r25, Y+38	; 0x26
    5974:	2b ea       	ldi	r18, 0xAB	; 171
    5976:	3a ea       	ldi	r19, 0xAA	; 170
    5978:	4a ea       	ldi	r20, 0xAA	; 170
    597a:	5e e3       	ldi	r21, 0x3E	; 62
    597c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5980:	dc 01       	movw	r26, r24
    5982:	cb 01       	movw	r24, r22
    5984:	8f 8f       	std	Y+31, r24	; 0x1f
    5986:	98 a3       	std	Y+32, r25	; 0x20
    5988:	a9 a3       	std	Y+33, r26	; 0x21
    598a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    598c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    598e:	78 a1       	ldd	r23, Y+32	; 0x20
    5990:	89 a1       	ldd	r24, Y+33	; 0x21
    5992:	9a a1       	ldd	r25, Y+34	; 0x22
    5994:	20 e0       	ldi	r18, 0x00	; 0
    5996:	30 e0       	ldi	r19, 0x00	; 0
    5998:	40 e8       	ldi	r20, 0x80	; 128
    599a:	5f e3       	ldi	r21, 0x3F	; 63
    599c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    59a0:	88 23       	and	r24, r24
    59a2:	1c f4       	brge	.+6      	; 0x59aa <Lcd_Pulse+0x6c>
		__ticks = 1;
    59a4:	81 e0       	ldi	r24, 0x01	; 1
    59a6:	8e 8f       	std	Y+30, r24	; 0x1e
    59a8:	91 c0       	rjmp	.+290    	; 0x5acc <Lcd_Pulse+0x18e>
	else if (__tmp > 255)
    59aa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    59ac:	78 a1       	ldd	r23, Y+32	; 0x20
    59ae:	89 a1       	ldd	r24, Y+33	; 0x21
    59b0:	9a a1       	ldd	r25, Y+34	; 0x22
    59b2:	20 e0       	ldi	r18, 0x00	; 0
    59b4:	30 e0       	ldi	r19, 0x00	; 0
    59b6:	4f e7       	ldi	r20, 0x7F	; 127
    59b8:	53 e4       	ldi	r21, 0x43	; 67
    59ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    59be:	18 16       	cp	r1, r24
    59c0:	0c f0       	brlt	.+2      	; 0x59c4 <Lcd_Pulse+0x86>
    59c2:	7b c0       	rjmp	.+246    	; 0x5aba <Lcd_Pulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    59c4:	6b a1       	ldd	r22, Y+35	; 0x23
    59c6:	7c a1       	ldd	r23, Y+36	; 0x24
    59c8:	8d a1       	ldd	r24, Y+37	; 0x25
    59ca:	9e a1       	ldd	r25, Y+38	; 0x26
    59cc:	20 e0       	ldi	r18, 0x00	; 0
    59ce:	30 e0       	ldi	r19, 0x00	; 0
    59d0:	4a e7       	ldi	r20, 0x7A	; 122
    59d2:	54 e4       	ldi	r21, 0x44	; 68
    59d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    59d8:	dc 01       	movw	r26, r24
    59da:	cb 01       	movw	r24, r22
    59dc:	8a 8f       	std	Y+26, r24	; 0x1a
    59de:	9b 8f       	std	Y+27, r25	; 0x1b
    59e0:	ac 8f       	std	Y+28, r26	; 0x1c
    59e2:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59e4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    59e6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    59e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    59ea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    59ec:	20 e0       	ldi	r18, 0x00	; 0
    59ee:	30 e0       	ldi	r19, 0x00	; 0
    59f0:	4a e7       	ldi	r20, 0x7A	; 122
    59f2:	53 e4       	ldi	r21, 0x43	; 67
    59f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59f8:	dc 01       	movw	r26, r24
    59fa:	cb 01       	movw	r24, r22
    59fc:	8e 8b       	std	Y+22, r24	; 0x16
    59fe:	9f 8b       	std	Y+23, r25	; 0x17
    5a00:	a8 8f       	std	Y+24, r26	; 0x18
    5a02:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    5a04:	6e 89       	ldd	r22, Y+22	; 0x16
    5a06:	7f 89       	ldd	r23, Y+23	; 0x17
    5a08:	88 8d       	ldd	r24, Y+24	; 0x18
    5a0a:	99 8d       	ldd	r25, Y+25	; 0x19
    5a0c:	20 e0       	ldi	r18, 0x00	; 0
    5a0e:	30 e0       	ldi	r19, 0x00	; 0
    5a10:	40 e8       	ldi	r20, 0x80	; 128
    5a12:	5f e3       	ldi	r21, 0x3F	; 63
    5a14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a18:	88 23       	and	r24, r24
    5a1a:	2c f4       	brge	.+10     	; 0x5a26 <Lcd_Pulse+0xe8>
		__ticks = 1;
    5a1c:	81 e0       	ldi	r24, 0x01	; 1
    5a1e:	90 e0       	ldi	r25, 0x00	; 0
    5a20:	9d 8b       	std	Y+21, r25	; 0x15
    5a22:	8c 8b       	std	Y+20, r24	; 0x14
    5a24:	3f c0       	rjmp	.+126    	; 0x5aa4 <Lcd_Pulse+0x166>
	else if (__tmp > 65535)
    5a26:	6e 89       	ldd	r22, Y+22	; 0x16
    5a28:	7f 89       	ldd	r23, Y+23	; 0x17
    5a2a:	88 8d       	ldd	r24, Y+24	; 0x18
    5a2c:	99 8d       	ldd	r25, Y+25	; 0x19
    5a2e:	20 e0       	ldi	r18, 0x00	; 0
    5a30:	3f ef       	ldi	r19, 0xFF	; 255
    5a32:	4f e7       	ldi	r20, 0x7F	; 127
    5a34:	57 e4       	ldi	r21, 0x47	; 71
    5a36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a3a:	18 16       	cp	r1, r24
    5a3c:	4c f5       	brge	.+82     	; 0x5a90 <Lcd_Pulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a3e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5a40:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5a42:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5a44:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5a46:	20 e0       	ldi	r18, 0x00	; 0
    5a48:	30 e0       	ldi	r19, 0x00	; 0
    5a4a:	40 e2       	ldi	r20, 0x20	; 32
    5a4c:	51 e4       	ldi	r21, 0x41	; 65
    5a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a52:	dc 01       	movw	r26, r24
    5a54:	cb 01       	movw	r24, r22
    5a56:	bc 01       	movw	r22, r24
    5a58:	cd 01       	movw	r24, r26
    5a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a5e:	dc 01       	movw	r26, r24
    5a60:	cb 01       	movw	r24, r22
    5a62:	9d 8b       	std	Y+21, r25	; 0x15
    5a64:	8c 8b       	std	Y+20, r24	; 0x14
    5a66:	0f c0       	rjmp	.+30     	; 0x5a86 <Lcd_Pulse+0x148>
    5a68:	89 e1       	ldi	r24, 0x19	; 25
    5a6a:	90 e0       	ldi	r25, 0x00	; 0
    5a6c:	9b 8b       	std	Y+19, r25	; 0x13
    5a6e:	8a 8b       	std	Y+18, r24	; 0x12
    5a70:	8a 89       	ldd	r24, Y+18	; 0x12
    5a72:	9b 89       	ldd	r25, Y+19	; 0x13
    5a74:	01 97       	sbiw	r24, 0x01	; 1
    5a76:	f1 f7       	brne	.-4      	; 0x5a74 <Lcd_Pulse+0x136>
    5a78:	9b 8b       	std	Y+19, r25	; 0x13
    5a7a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a7c:	8c 89       	ldd	r24, Y+20	; 0x14
    5a7e:	9d 89       	ldd	r25, Y+21	; 0x15
    5a80:	01 97       	sbiw	r24, 0x01	; 1
    5a82:	9d 8b       	std	Y+21, r25	; 0x15
    5a84:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a86:	8c 89       	ldd	r24, Y+20	; 0x14
    5a88:	9d 89       	ldd	r25, Y+21	; 0x15
    5a8a:	00 97       	sbiw	r24, 0x00	; 0
    5a8c:	69 f7       	brne	.-38     	; 0x5a68 <Lcd_Pulse+0x12a>
    5a8e:	24 c0       	rjmp	.+72     	; 0x5ad8 <Lcd_Pulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a90:	6e 89       	ldd	r22, Y+22	; 0x16
    5a92:	7f 89       	ldd	r23, Y+23	; 0x17
    5a94:	88 8d       	ldd	r24, Y+24	; 0x18
    5a96:	99 8d       	ldd	r25, Y+25	; 0x19
    5a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a9c:	dc 01       	movw	r26, r24
    5a9e:	cb 01       	movw	r24, r22
    5aa0:	9d 8b       	std	Y+21, r25	; 0x15
    5aa2:	8c 8b       	std	Y+20, r24	; 0x14
    5aa4:	8c 89       	ldd	r24, Y+20	; 0x14
    5aa6:	9d 89       	ldd	r25, Y+21	; 0x15
    5aa8:	99 8b       	std	Y+17, r25	; 0x11
    5aaa:	88 8b       	std	Y+16, r24	; 0x10
    5aac:	88 89       	ldd	r24, Y+16	; 0x10
    5aae:	99 89       	ldd	r25, Y+17	; 0x11
    5ab0:	01 97       	sbiw	r24, 0x01	; 1
    5ab2:	f1 f7       	brne	.-4      	; 0x5ab0 <Lcd_Pulse+0x172>
    5ab4:	99 8b       	std	Y+17, r25	; 0x11
    5ab6:	88 8b       	std	Y+16, r24	; 0x10
    5ab8:	0f c0       	rjmp	.+30     	; 0x5ad8 <Lcd_Pulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5aba:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5abc:	78 a1       	ldd	r23, Y+32	; 0x20
    5abe:	89 a1       	ldd	r24, Y+33	; 0x21
    5ac0:	9a a1       	ldd	r25, Y+34	; 0x22
    5ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ac6:	dc 01       	movw	r26, r24
    5ac8:	cb 01       	movw	r24, r22
    5aca:	8e 8f       	std	Y+30, r24	; 0x1e
    5acc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5ace:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5ad0:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ad2:	8a 95       	dec	r24
    5ad4:	f1 f7       	brne	.-4      	; 0x5ad2 <Lcd_Pulse+0x194>
    5ad6:	8f 87       	std	Y+15, r24	; 0x0f
_delay_us(1);
DIO_write(DIO_PORTB, DIO_PIN3, DIO_LOW);
    5ad8:	81 e0       	ldi	r24, 0x01	; 1
    5ada:	63 e0       	ldi	r22, 0x03	; 3
    5adc:	40 e0       	ldi	r20, 0x00	; 0
    5ade:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
    5ae2:	80 e0       	ldi	r24, 0x00	; 0
    5ae4:	90 e0       	ldi	r25, 0x00	; 0
    5ae6:	a0 e0       	ldi	r26, 0x00	; 0
    5ae8:	b0 e4       	ldi	r27, 0x40	; 64
    5aea:	8b 87       	std	Y+11, r24	; 0x0b
    5aec:	9c 87       	std	Y+12, r25	; 0x0c
    5aee:	ad 87       	std	Y+13, r26	; 0x0d
    5af0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5af2:	6b 85       	ldd	r22, Y+11	; 0x0b
    5af4:	7c 85       	ldd	r23, Y+12	; 0x0c
    5af6:	8d 85       	ldd	r24, Y+13	; 0x0d
    5af8:	9e 85       	ldd	r25, Y+14	; 0x0e
    5afa:	20 e0       	ldi	r18, 0x00	; 0
    5afc:	30 e0       	ldi	r19, 0x00	; 0
    5afe:	4a e7       	ldi	r20, 0x7A	; 122
    5b00:	53 e4       	ldi	r21, 0x43	; 67
    5b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b06:	dc 01       	movw	r26, r24
    5b08:	cb 01       	movw	r24, r22
    5b0a:	8f 83       	std	Y+7, r24	; 0x07
    5b0c:	98 87       	std	Y+8, r25	; 0x08
    5b0e:	a9 87       	std	Y+9, r26	; 0x09
    5b10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5b12:	6f 81       	ldd	r22, Y+7	; 0x07
    5b14:	78 85       	ldd	r23, Y+8	; 0x08
    5b16:	89 85       	ldd	r24, Y+9	; 0x09
    5b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b1a:	20 e0       	ldi	r18, 0x00	; 0
    5b1c:	30 e0       	ldi	r19, 0x00	; 0
    5b1e:	40 e8       	ldi	r20, 0x80	; 128
    5b20:	5f e3       	ldi	r21, 0x3F	; 63
    5b22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b26:	88 23       	and	r24, r24
    5b28:	2c f4       	brge	.+10     	; 0x5b34 <Lcd_Pulse+0x1f6>
		__ticks = 1;
    5b2a:	81 e0       	ldi	r24, 0x01	; 1
    5b2c:	90 e0       	ldi	r25, 0x00	; 0
    5b2e:	9e 83       	std	Y+6, r25	; 0x06
    5b30:	8d 83       	std	Y+5, r24	; 0x05
    5b32:	3f c0       	rjmp	.+126    	; 0x5bb2 <Lcd_Pulse+0x274>
	else if (__tmp > 65535)
    5b34:	6f 81       	ldd	r22, Y+7	; 0x07
    5b36:	78 85       	ldd	r23, Y+8	; 0x08
    5b38:	89 85       	ldd	r24, Y+9	; 0x09
    5b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b3c:	20 e0       	ldi	r18, 0x00	; 0
    5b3e:	3f ef       	ldi	r19, 0xFF	; 255
    5b40:	4f e7       	ldi	r20, 0x7F	; 127
    5b42:	57 e4       	ldi	r21, 0x47	; 71
    5b44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b48:	18 16       	cp	r1, r24
    5b4a:	4c f5       	brge	.+82     	; 0x5b9e <Lcd_Pulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b50:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b52:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b54:	20 e0       	ldi	r18, 0x00	; 0
    5b56:	30 e0       	ldi	r19, 0x00	; 0
    5b58:	40 e2       	ldi	r20, 0x20	; 32
    5b5a:	51 e4       	ldi	r21, 0x41	; 65
    5b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b60:	dc 01       	movw	r26, r24
    5b62:	cb 01       	movw	r24, r22
    5b64:	bc 01       	movw	r22, r24
    5b66:	cd 01       	movw	r24, r26
    5b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b6c:	dc 01       	movw	r26, r24
    5b6e:	cb 01       	movw	r24, r22
    5b70:	9e 83       	std	Y+6, r25	; 0x06
    5b72:	8d 83       	std	Y+5, r24	; 0x05
    5b74:	0f c0       	rjmp	.+30     	; 0x5b94 <Lcd_Pulse+0x256>
    5b76:	89 e1       	ldi	r24, 0x19	; 25
    5b78:	90 e0       	ldi	r25, 0x00	; 0
    5b7a:	9c 83       	std	Y+4, r25	; 0x04
    5b7c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    5b80:	9c 81       	ldd	r25, Y+4	; 0x04
    5b82:	01 97       	sbiw	r24, 0x01	; 1
    5b84:	f1 f7       	brne	.-4      	; 0x5b82 <Lcd_Pulse+0x244>
    5b86:	9c 83       	std	Y+4, r25	; 0x04
    5b88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    5b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    5b8e:	01 97       	sbiw	r24, 0x01	; 1
    5b90:	9e 83       	std	Y+6, r25	; 0x06
    5b92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b94:	8d 81       	ldd	r24, Y+5	; 0x05
    5b96:	9e 81       	ldd	r25, Y+6	; 0x06
    5b98:	00 97       	sbiw	r24, 0x00	; 0
    5b9a:	69 f7       	brne	.-38     	; 0x5b76 <Lcd_Pulse+0x238>
    5b9c:	14 c0       	rjmp	.+40     	; 0x5bc6 <Lcd_Pulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    5ba0:	78 85       	ldd	r23, Y+8	; 0x08
    5ba2:	89 85       	ldd	r24, Y+9	; 0x09
    5ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5baa:	dc 01       	movw	r26, r24
    5bac:	cb 01       	movw	r24, r22
    5bae:	9e 83       	std	Y+6, r25	; 0x06
    5bb0:	8d 83       	std	Y+5, r24	; 0x05
    5bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    5bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    5bb6:	9a 83       	std	Y+2, r25	; 0x02
    5bb8:	89 83       	std	Y+1, r24	; 0x01
    5bba:	89 81       	ldd	r24, Y+1	; 0x01
    5bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    5bbe:	01 97       	sbiw	r24, 0x01	; 1
    5bc0:	f1 f7       	brne	.-4      	; 0x5bbe <Lcd_Pulse+0x280>
    5bc2:	9a 83       	std	Y+2, r25	; 0x02
    5bc4:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
}
    5bc6:	a6 96       	adiw	r28, 0x26	; 38
    5bc8:	0f b6       	in	r0, 0x3f	; 63
    5bca:	f8 94       	cli
    5bcc:	de bf       	out	0x3e, r29	; 62
    5bce:	0f be       	out	0x3f, r0	; 63
    5bd0:	cd bf       	out	0x3d, r28	; 61
    5bd2:	cf 91       	pop	r28
    5bd4:	df 91       	pop	r29
    5bd6:	08 95       	ret

00005bd8 <Lcd_Write_Custom>:

 void Lcd_Write_Custom(void)
{
    5bd8:	df 93       	push	r29
    5bda:	cf 93       	push	r28
    5bdc:	00 d0       	rcall	.+0      	; 0x5bde <Lcd_Write_Custom+0x6>
    5bde:	cd b7       	in	r28, 0x3d	; 61
    5be0:	de b7       	in	r29, 0x3e	; 62
	u8 loc_ByteIndex=0;
    5be2:	1a 82       	std	Y+2, r1	; 0x02
		u8 loc_CharIndx=0;
    5be4:	19 82       	std	Y+1, r1	; 0x01

		for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    5be6:	19 82       	std	Y+1, r1	; 0x01
    5be8:	2c c0       	rjmp	.+88     	; 0x5c42 <Lcd_Write_Custom+0x6a>
		{
			Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
    5bea:	89 81       	ldd	r24, Y+1	; 0x01
    5bec:	88 2f       	mov	r24, r24
    5bee:	90 e0       	ldi	r25, 0x00	; 0
    5bf0:	08 96       	adiw	r24, 0x08	; 8
    5bf2:	88 0f       	add	r24, r24
    5bf4:	99 1f       	adc	r25, r25
    5bf6:	88 0f       	add	r24, r24
    5bf8:	99 1f       	adc	r25, r25
    5bfa:	88 0f       	add	r24, r24
    5bfc:	99 1f       	adc	r25, r25
    5bfe:	0e 94 1b 30 	call	0x6036	; 0x6036 <Lcd_Cmd>
				for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    5c02:	1a 82       	std	Y+2, r1	; 0x02
    5c04:	18 c0       	rjmp	.+48     	; 0x5c36 <Lcd_Write_Custom+0x5e>
				{
					Lcd_Display_chr(customChar[loc_CharIndx][loc_ByteIndex]);
    5c06:	89 81       	ldd	r24, Y+1	; 0x01
    5c08:	48 2f       	mov	r20, r24
    5c0a:	50 e0       	ldi	r21, 0x00	; 0
    5c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    5c0e:	28 2f       	mov	r18, r24
    5c10:	30 e0       	ldi	r19, 0x00	; 0
    5c12:	ca 01       	movw	r24, r20
    5c14:	88 0f       	add	r24, r24
    5c16:	99 1f       	adc	r25, r25
    5c18:	88 0f       	add	r24, r24
    5c1a:	99 1f       	adc	r25, r25
    5c1c:	88 0f       	add	r24, r24
    5c1e:	99 1f       	adc	r25, r25
    5c20:	82 0f       	add	r24, r18
    5c22:	93 1f       	adc	r25, r19
    5c24:	fc 01       	movw	r30, r24
    5c26:	ee 51       	subi	r30, 0x1E	; 30
    5c28:	fd 4f       	sbci	r31, 0xFD	; 253
    5c2a:	80 81       	ld	r24, Z
    5c2c:	0e 94 67 30 	call	0x60ce	; 0x60ce <Lcd_Display_chr>
		u8 loc_CharIndx=0;

		for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
		{
			Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
				for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    5c30:	8a 81       	ldd	r24, Y+2	; 0x02
    5c32:	8f 5f       	subi	r24, 0xFF	; 255
    5c34:	8a 83       	std	Y+2, r24	; 0x02
    5c36:	8a 81       	ldd	r24, Y+2	; 0x02
    5c38:	88 30       	cpi	r24, 0x08	; 8
    5c3a:	28 f3       	brcs	.-54     	; 0x5c06 <Lcd_Write_Custom+0x2e>
 void Lcd_Write_Custom(void)
{
	u8 loc_ByteIndex=0;
		u8 loc_CharIndx=0;

		for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    5c3c:	89 81       	ldd	r24, Y+1	; 0x01
    5c3e:	8f 5f       	subi	r24, 0xFF	; 255
    5c40:	89 83       	std	Y+1, r24	; 0x01
    5c42:	89 81       	ldd	r24, Y+1	; 0x01
    5c44:	88 30       	cpi	r24, 0x08	; 8
    5c46:	88 f2       	brcs	.-94     	; 0x5bea <Lcd_Write_Custom+0x12>
				{
					Lcd_Display_chr(customChar[loc_CharIndx][loc_ByteIndex]);
				}
		}

}
    5c48:	0f 90       	pop	r0
    5c4a:	0f 90       	pop	r0
    5c4c:	cf 91       	pop	r28
    5c4e:	df 91       	pop	r29
    5c50:	08 95       	ret

00005c52 <Lcd_Int>:

void Lcd_Int(void)
{
    5c52:	df 93       	push	r29
    5c54:	cf 93       	push	r28
    5c56:	cd b7       	in	r28, 0x3d	; 61
    5c58:	de b7       	in	r29, 0x3e	; 62
    5c5a:	e4 97       	sbiw	r28, 0x34	; 52
    5c5c:	0f b6       	in	r0, 0x3f	; 63
    5c5e:	f8 94       	cli
    5c60:	de bf       	out	0x3e, r29	; 62
    5c62:	0f be       	out	0x3f, r0	; 63
    5c64:	cd bf       	out	0x3d, r28	; 61

	/*	Configure LCD Control Lines as Output	*/
		DIO_cnfg_channel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
    5c66:	81 e0       	ldi	r24, 0x01	; 1
    5c68:	61 e0       	ldi	r22, 0x01	; 1
    5c6a:	41 e0       	ldi	r20, 0x01	; 1
    5c6c:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
		DIO_cnfg_channel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
    5c70:	81 e0       	ldi	r24, 0x01	; 1
    5c72:	62 e0       	ldi	r22, 0x02	; 2
    5c74:	41 e0       	ldi	r20, 0x01	; 1
    5c76:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
		DIO_cnfg_channel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    5c7a:	81 e0       	ldi	r24, 0x01	; 1
    5c7c:	63 e0       	ldi	r22, 0x03	; 3
    5c7e:	41 e0       	ldi	r20, 0x01	; 1
    5c80:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>

		/*	Configure LCD Data Lines as Output		*/
		DIO_cnfg_channel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
    5c84:	80 e0       	ldi	r24, 0x00	; 0
    5c86:	64 e0       	ldi	r22, 0x04	; 4
    5c88:	41 e0       	ldi	r20, 0x01	; 1
    5c8a:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
		DIO_cnfg_channel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
    5c8e:	80 e0       	ldi	r24, 0x00	; 0
    5c90:	65 e0       	ldi	r22, 0x05	; 5
    5c92:	41 e0       	ldi	r20, 0x01	; 1
    5c94:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
		DIO_cnfg_channel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
    5c98:	80 e0       	ldi	r24, 0x00	; 0
    5c9a:	66 e0       	ldi	r22, 0x06	; 6
    5c9c:	41 e0       	ldi	r20, 0x01	; 1
    5c9e:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
		DIO_cnfg_channel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
    5ca2:	80 e0       	ldi	r24, 0x00	; 0
    5ca4:	67 e0       	ldi	r22, 0x07	; 7
    5ca6:	41 e0       	ldi	r20, 0x01	; 1
    5ca8:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>

		/*	Set LCD For Write Mode	*/
		DIO_write(DIO_PORTB, DIO_PIN2, DIO_LOW);
    5cac:	81 e0       	ldi	r24, 0x01	; 1
    5cae:	62 e0       	ldi	r22, 0x02	; 2
    5cb0:	40 e0       	ldi	r20, 0x00	; 0
    5cb2:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
    5cb6:	80 e0       	ldi	r24, 0x00	; 0
    5cb8:	90 e0       	ldi	r25, 0x00	; 0
    5cba:	a0 e7       	ldi	r26, 0x70	; 112
    5cbc:	b1 e4       	ldi	r27, 0x41	; 65
    5cbe:	89 ab       	std	Y+49, r24	; 0x31
    5cc0:	9a ab       	std	Y+50, r25	; 0x32
    5cc2:	ab ab       	std	Y+51, r26	; 0x33
    5cc4:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cc6:	69 a9       	ldd	r22, Y+49	; 0x31
    5cc8:	7a a9       	ldd	r23, Y+50	; 0x32
    5cca:	8b a9       	ldd	r24, Y+51	; 0x33
    5ccc:	9c a9       	ldd	r25, Y+52	; 0x34
    5cce:	20 e0       	ldi	r18, 0x00	; 0
    5cd0:	30 e0       	ldi	r19, 0x00	; 0
    5cd2:	4a e7       	ldi	r20, 0x7A	; 122
    5cd4:	53 e4       	ldi	r21, 0x43	; 67
    5cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cda:	dc 01       	movw	r26, r24
    5cdc:	cb 01       	movw	r24, r22
    5cde:	8d a7       	std	Y+45, r24	; 0x2d
    5ce0:	9e a7       	std	Y+46, r25	; 0x2e
    5ce2:	af a7       	std	Y+47, r26	; 0x2f
    5ce4:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    5ce6:	6d a5       	ldd	r22, Y+45	; 0x2d
    5ce8:	7e a5       	ldd	r23, Y+46	; 0x2e
    5cea:	8f a5       	ldd	r24, Y+47	; 0x2f
    5cec:	98 a9       	ldd	r25, Y+48	; 0x30
    5cee:	20 e0       	ldi	r18, 0x00	; 0
    5cf0:	30 e0       	ldi	r19, 0x00	; 0
    5cf2:	40 e8       	ldi	r20, 0x80	; 128
    5cf4:	5f e3       	ldi	r21, 0x3F	; 63
    5cf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5cfa:	88 23       	and	r24, r24
    5cfc:	2c f4       	brge	.+10     	; 0x5d08 <Lcd_Int+0xb6>
		__ticks = 1;
    5cfe:	81 e0       	ldi	r24, 0x01	; 1
    5d00:	90 e0       	ldi	r25, 0x00	; 0
    5d02:	9c a7       	std	Y+44, r25	; 0x2c
    5d04:	8b a7       	std	Y+43, r24	; 0x2b
    5d06:	3f c0       	rjmp	.+126    	; 0x5d86 <Lcd_Int+0x134>
	else if (__tmp > 65535)
    5d08:	6d a5       	ldd	r22, Y+45	; 0x2d
    5d0a:	7e a5       	ldd	r23, Y+46	; 0x2e
    5d0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5d0e:	98 a9       	ldd	r25, Y+48	; 0x30
    5d10:	20 e0       	ldi	r18, 0x00	; 0
    5d12:	3f ef       	ldi	r19, 0xFF	; 255
    5d14:	4f e7       	ldi	r20, 0x7F	; 127
    5d16:	57 e4       	ldi	r21, 0x47	; 71
    5d18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5d1c:	18 16       	cp	r1, r24
    5d1e:	4c f5       	brge	.+82     	; 0x5d72 <Lcd_Int+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d20:	69 a9       	ldd	r22, Y+49	; 0x31
    5d22:	7a a9       	ldd	r23, Y+50	; 0x32
    5d24:	8b a9       	ldd	r24, Y+51	; 0x33
    5d26:	9c a9       	ldd	r25, Y+52	; 0x34
    5d28:	20 e0       	ldi	r18, 0x00	; 0
    5d2a:	30 e0       	ldi	r19, 0x00	; 0
    5d2c:	40 e2       	ldi	r20, 0x20	; 32
    5d2e:	51 e4       	ldi	r21, 0x41	; 65
    5d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d34:	dc 01       	movw	r26, r24
    5d36:	cb 01       	movw	r24, r22
    5d38:	bc 01       	movw	r22, r24
    5d3a:	cd 01       	movw	r24, r26
    5d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d40:	dc 01       	movw	r26, r24
    5d42:	cb 01       	movw	r24, r22
    5d44:	9c a7       	std	Y+44, r25	; 0x2c
    5d46:	8b a7       	std	Y+43, r24	; 0x2b
    5d48:	0f c0       	rjmp	.+30     	; 0x5d68 <Lcd_Int+0x116>
    5d4a:	89 e1       	ldi	r24, 0x19	; 25
    5d4c:	90 e0       	ldi	r25, 0x00	; 0
    5d4e:	9a a7       	std	Y+42, r25	; 0x2a
    5d50:	89 a7       	std	Y+41, r24	; 0x29
    5d52:	89 a5       	ldd	r24, Y+41	; 0x29
    5d54:	9a a5       	ldd	r25, Y+42	; 0x2a
    5d56:	01 97       	sbiw	r24, 0x01	; 1
    5d58:	f1 f7       	brne	.-4      	; 0x5d56 <Lcd_Int+0x104>
    5d5a:	9a a7       	std	Y+42, r25	; 0x2a
    5d5c:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d5e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5d60:	9c a5       	ldd	r25, Y+44	; 0x2c
    5d62:	01 97       	sbiw	r24, 0x01	; 1
    5d64:	9c a7       	std	Y+44, r25	; 0x2c
    5d66:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d68:	8b a5       	ldd	r24, Y+43	; 0x2b
    5d6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    5d6c:	00 97       	sbiw	r24, 0x00	; 0
    5d6e:	69 f7       	brne	.-38     	; 0x5d4a <Lcd_Int+0xf8>
    5d70:	14 c0       	rjmp	.+40     	; 0x5d9a <Lcd_Int+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d72:	6d a5       	ldd	r22, Y+45	; 0x2d
    5d74:	7e a5       	ldd	r23, Y+46	; 0x2e
    5d76:	8f a5       	ldd	r24, Y+47	; 0x2f
    5d78:	98 a9       	ldd	r25, Y+48	; 0x30
    5d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d7e:	dc 01       	movw	r26, r24
    5d80:	cb 01       	movw	r24, r22
    5d82:	9c a7       	std	Y+44, r25	; 0x2c
    5d84:	8b a7       	std	Y+43, r24	; 0x2b
    5d86:	8b a5       	ldd	r24, Y+43	; 0x2b
    5d88:	9c a5       	ldd	r25, Y+44	; 0x2c
    5d8a:	98 a7       	std	Y+40, r25	; 0x28
    5d8c:	8f a3       	std	Y+39, r24	; 0x27
    5d8e:	8f a1       	ldd	r24, Y+39	; 0x27
    5d90:	98 a5       	ldd	r25, Y+40	; 0x28
    5d92:	01 97       	sbiw	r24, 0x01	; 1
    5d94:	f1 f7       	brne	.-4      	; 0x5d92 <Lcd_Int+0x140>
    5d96:	98 a7       	std	Y+40, r25	; 0x28
    5d98:	8f a3       	std	Y+39, r24	; 0x27

		_delay_ms(15);

		Lcd_Cmd(0x03);
    5d9a:	83 e0       	ldi	r24, 0x03	; 3
    5d9c:	0e 94 1b 30 	call	0x6036	; 0x6036 <Lcd_Cmd>
    5da0:	80 e0       	ldi	r24, 0x00	; 0
    5da2:	90 e0       	ldi	r25, 0x00	; 0
    5da4:	a0 ea       	ldi	r26, 0xA0	; 160
    5da6:	b0 e4       	ldi	r27, 0x40	; 64
    5da8:	8b a3       	std	Y+35, r24	; 0x23
    5daa:	9c a3       	std	Y+36, r25	; 0x24
    5dac:	ad a3       	std	Y+37, r26	; 0x25
    5dae:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5db0:	6b a1       	ldd	r22, Y+35	; 0x23
    5db2:	7c a1       	ldd	r23, Y+36	; 0x24
    5db4:	8d a1       	ldd	r24, Y+37	; 0x25
    5db6:	9e a1       	ldd	r25, Y+38	; 0x26
    5db8:	20 e0       	ldi	r18, 0x00	; 0
    5dba:	30 e0       	ldi	r19, 0x00	; 0
    5dbc:	4a e7       	ldi	r20, 0x7A	; 122
    5dbe:	53 e4       	ldi	r21, 0x43	; 67
    5dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5dc4:	dc 01       	movw	r26, r24
    5dc6:	cb 01       	movw	r24, r22
    5dc8:	8f 8f       	std	Y+31, r24	; 0x1f
    5dca:	98 a3       	std	Y+32, r25	; 0x20
    5dcc:	a9 a3       	std	Y+33, r26	; 0x21
    5dce:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    5dd0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5dd2:	78 a1       	ldd	r23, Y+32	; 0x20
    5dd4:	89 a1       	ldd	r24, Y+33	; 0x21
    5dd6:	9a a1       	ldd	r25, Y+34	; 0x22
    5dd8:	20 e0       	ldi	r18, 0x00	; 0
    5dda:	30 e0       	ldi	r19, 0x00	; 0
    5ddc:	40 e8       	ldi	r20, 0x80	; 128
    5dde:	5f e3       	ldi	r21, 0x3F	; 63
    5de0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5de4:	88 23       	and	r24, r24
    5de6:	2c f4       	brge	.+10     	; 0x5df2 <Lcd_Int+0x1a0>
		__ticks = 1;
    5de8:	81 e0       	ldi	r24, 0x01	; 1
    5dea:	90 e0       	ldi	r25, 0x00	; 0
    5dec:	9e 8f       	std	Y+30, r25	; 0x1e
    5dee:	8d 8f       	std	Y+29, r24	; 0x1d
    5df0:	3f c0       	rjmp	.+126    	; 0x5e70 <Lcd_Int+0x21e>
	else if (__tmp > 65535)
    5df2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5df4:	78 a1       	ldd	r23, Y+32	; 0x20
    5df6:	89 a1       	ldd	r24, Y+33	; 0x21
    5df8:	9a a1       	ldd	r25, Y+34	; 0x22
    5dfa:	20 e0       	ldi	r18, 0x00	; 0
    5dfc:	3f ef       	ldi	r19, 0xFF	; 255
    5dfe:	4f e7       	ldi	r20, 0x7F	; 127
    5e00:	57 e4       	ldi	r21, 0x47	; 71
    5e02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5e06:	18 16       	cp	r1, r24
    5e08:	4c f5       	brge	.+82     	; 0x5e5c <Lcd_Int+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e0a:	6b a1       	ldd	r22, Y+35	; 0x23
    5e0c:	7c a1       	ldd	r23, Y+36	; 0x24
    5e0e:	8d a1       	ldd	r24, Y+37	; 0x25
    5e10:	9e a1       	ldd	r25, Y+38	; 0x26
    5e12:	20 e0       	ldi	r18, 0x00	; 0
    5e14:	30 e0       	ldi	r19, 0x00	; 0
    5e16:	40 e2       	ldi	r20, 0x20	; 32
    5e18:	51 e4       	ldi	r21, 0x41	; 65
    5e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e1e:	dc 01       	movw	r26, r24
    5e20:	cb 01       	movw	r24, r22
    5e22:	bc 01       	movw	r22, r24
    5e24:	cd 01       	movw	r24, r26
    5e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e2a:	dc 01       	movw	r26, r24
    5e2c:	cb 01       	movw	r24, r22
    5e2e:	9e 8f       	std	Y+30, r25	; 0x1e
    5e30:	8d 8f       	std	Y+29, r24	; 0x1d
    5e32:	0f c0       	rjmp	.+30     	; 0x5e52 <Lcd_Int+0x200>
    5e34:	89 e1       	ldi	r24, 0x19	; 25
    5e36:	90 e0       	ldi	r25, 0x00	; 0
    5e38:	9c 8f       	std	Y+28, r25	; 0x1c
    5e3a:	8b 8f       	std	Y+27, r24	; 0x1b
    5e3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5e3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5e40:	01 97       	sbiw	r24, 0x01	; 1
    5e42:	f1 f7       	brne	.-4      	; 0x5e40 <Lcd_Int+0x1ee>
    5e44:	9c 8f       	std	Y+28, r25	; 0x1c
    5e46:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5e4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5e4c:	01 97       	sbiw	r24, 0x01	; 1
    5e4e:	9e 8f       	std	Y+30, r25	; 0x1e
    5e50:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5e54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5e56:	00 97       	sbiw	r24, 0x00	; 0
    5e58:	69 f7       	brne	.-38     	; 0x5e34 <Lcd_Int+0x1e2>
    5e5a:	14 c0       	rjmp	.+40     	; 0x5e84 <Lcd_Int+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e5c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5e5e:	78 a1       	ldd	r23, Y+32	; 0x20
    5e60:	89 a1       	ldd	r24, Y+33	; 0x21
    5e62:	9a a1       	ldd	r25, Y+34	; 0x22
    5e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e68:	dc 01       	movw	r26, r24
    5e6a:	cb 01       	movw	r24, r22
    5e6c:	9e 8f       	std	Y+30, r25	; 0x1e
    5e6e:	8d 8f       	std	Y+29, r24	; 0x1d
    5e70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5e72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5e74:	9a 8f       	std	Y+26, r25	; 0x1a
    5e76:	89 8f       	std	Y+25, r24	; 0x19
    5e78:	89 8d       	ldd	r24, Y+25	; 0x19
    5e7a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5e7c:	01 97       	sbiw	r24, 0x01	; 1
    5e7e:	f1 f7       	brne	.-4      	; 0x5e7c <Lcd_Int+0x22a>
    5e80:	9a 8f       	std	Y+26, r25	; 0x1a
    5e82:	89 8f       	std	Y+25, r24	; 0x19
		_delay_ms(5);

		Lcd_Cmd(0x03);
    5e84:	83 e0       	ldi	r24, 0x03	; 3
    5e86:	0e 94 1b 30 	call	0x6036	; 0x6036 <Lcd_Cmd>
    5e8a:	80 e0       	ldi	r24, 0x00	; 0
    5e8c:	90 e0       	ldi	r25, 0x00	; 0
    5e8e:	a8 ec       	ldi	r26, 0xC8	; 200
    5e90:	b2 e4       	ldi	r27, 0x42	; 66
    5e92:	8d 8b       	std	Y+21, r24	; 0x15
    5e94:	9e 8b       	std	Y+22, r25	; 0x16
    5e96:	af 8b       	std	Y+23, r26	; 0x17
    5e98:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5e9a:	6d 89       	ldd	r22, Y+21	; 0x15
    5e9c:	7e 89       	ldd	r23, Y+22	; 0x16
    5e9e:	8f 89       	ldd	r24, Y+23	; 0x17
    5ea0:	98 8d       	ldd	r25, Y+24	; 0x18
    5ea2:	2b ea       	ldi	r18, 0xAB	; 171
    5ea4:	3a ea       	ldi	r19, 0xAA	; 170
    5ea6:	4a ea       	ldi	r20, 0xAA	; 170
    5ea8:	5e e3       	ldi	r21, 0x3E	; 62
    5eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5eae:	dc 01       	movw	r26, r24
    5eb0:	cb 01       	movw	r24, r22
    5eb2:	89 8b       	std	Y+17, r24	; 0x11
    5eb4:	9a 8b       	std	Y+18, r25	; 0x12
    5eb6:	ab 8b       	std	Y+19, r26	; 0x13
    5eb8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5eba:	69 89       	ldd	r22, Y+17	; 0x11
    5ebc:	7a 89       	ldd	r23, Y+18	; 0x12
    5ebe:	8b 89       	ldd	r24, Y+19	; 0x13
    5ec0:	9c 89       	ldd	r25, Y+20	; 0x14
    5ec2:	20 e0       	ldi	r18, 0x00	; 0
    5ec4:	30 e0       	ldi	r19, 0x00	; 0
    5ec6:	40 e8       	ldi	r20, 0x80	; 128
    5ec8:	5f e3       	ldi	r21, 0x3F	; 63
    5eca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ece:	88 23       	and	r24, r24
    5ed0:	1c f4       	brge	.+6      	; 0x5ed8 <Lcd_Int+0x286>
		__ticks = 1;
    5ed2:	81 e0       	ldi	r24, 0x01	; 1
    5ed4:	88 8b       	std	Y+16, r24	; 0x10
    5ed6:	91 c0       	rjmp	.+290    	; 0x5ffa <Lcd_Int+0x3a8>
	else if (__tmp > 255)
    5ed8:	69 89       	ldd	r22, Y+17	; 0x11
    5eda:	7a 89       	ldd	r23, Y+18	; 0x12
    5edc:	8b 89       	ldd	r24, Y+19	; 0x13
    5ede:	9c 89       	ldd	r25, Y+20	; 0x14
    5ee0:	20 e0       	ldi	r18, 0x00	; 0
    5ee2:	30 e0       	ldi	r19, 0x00	; 0
    5ee4:	4f e7       	ldi	r20, 0x7F	; 127
    5ee6:	53 e4       	ldi	r21, 0x43	; 67
    5ee8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5eec:	18 16       	cp	r1, r24
    5eee:	0c f0       	brlt	.+2      	; 0x5ef2 <Lcd_Int+0x2a0>
    5ef0:	7b c0       	rjmp	.+246    	; 0x5fe8 <Lcd_Int+0x396>
	{
		_delay_ms(__us / 1000.0);
    5ef2:	6d 89       	ldd	r22, Y+21	; 0x15
    5ef4:	7e 89       	ldd	r23, Y+22	; 0x16
    5ef6:	8f 89       	ldd	r24, Y+23	; 0x17
    5ef8:	98 8d       	ldd	r25, Y+24	; 0x18
    5efa:	20 e0       	ldi	r18, 0x00	; 0
    5efc:	30 e0       	ldi	r19, 0x00	; 0
    5efe:	4a e7       	ldi	r20, 0x7A	; 122
    5f00:	54 e4       	ldi	r21, 0x44	; 68
    5f02:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5f06:	dc 01       	movw	r26, r24
    5f08:	cb 01       	movw	r24, r22
    5f0a:	8c 87       	std	Y+12, r24	; 0x0c
    5f0c:	9d 87       	std	Y+13, r25	; 0x0d
    5f0e:	ae 87       	std	Y+14, r26	; 0x0e
    5f10:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f12:	6c 85       	ldd	r22, Y+12	; 0x0c
    5f14:	7d 85       	ldd	r23, Y+13	; 0x0d
    5f16:	8e 85       	ldd	r24, Y+14	; 0x0e
    5f18:	9f 85       	ldd	r25, Y+15	; 0x0f
    5f1a:	20 e0       	ldi	r18, 0x00	; 0
    5f1c:	30 e0       	ldi	r19, 0x00	; 0
    5f1e:	4a e7       	ldi	r20, 0x7A	; 122
    5f20:	53 e4       	ldi	r21, 0x43	; 67
    5f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f26:	dc 01       	movw	r26, r24
    5f28:	cb 01       	movw	r24, r22
    5f2a:	88 87       	std	Y+8, r24	; 0x08
    5f2c:	99 87       	std	Y+9, r25	; 0x09
    5f2e:	aa 87       	std	Y+10, r26	; 0x0a
    5f30:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5f32:	68 85       	ldd	r22, Y+8	; 0x08
    5f34:	79 85       	ldd	r23, Y+9	; 0x09
    5f36:	8a 85       	ldd	r24, Y+10	; 0x0a
    5f38:	9b 85       	ldd	r25, Y+11	; 0x0b
    5f3a:	20 e0       	ldi	r18, 0x00	; 0
    5f3c:	30 e0       	ldi	r19, 0x00	; 0
    5f3e:	40 e8       	ldi	r20, 0x80	; 128
    5f40:	5f e3       	ldi	r21, 0x3F	; 63
    5f42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5f46:	88 23       	and	r24, r24
    5f48:	2c f4       	brge	.+10     	; 0x5f54 <Lcd_Int+0x302>
		__ticks = 1;
    5f4a:	81 e0       	ldi	r24, 0x01	; 1
    5f4c:	90 e0       	ldi	r25, 0x00	; 0
    5f4e:	9f 83       	std	Y+7, r25	; 0x07
    5f50:	8e 83       	std	Y+6, r24	; 0x06
    5f52:	3f c0       	rjmp	.+126    	; 0x5fd2 <Lcd_Int+0x380>
	else if (__tmp > 65535)
    5f54:	68 85       	ldd	r22, Y+8	; 0x08
    5f56:	79 85       	ldd	r23, Y+9	; 0x09
    5f58:	8a 85       	ldd	r24, Y+10	; 0x0a
    5f5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    5f5c:	20 e0       	ldi	r18, 0x00	; 0
    5f5e:	3f ef       	ldi	r19, 0xFF	; 255
    5f60:	4f e7       	ldi	r20, 0x7F	; 127
    5f62:	57 e4       	ldi	r21, 0x47	; 71
    5f64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5f68:	18 16       	cp	r1, r24
    5f6a:	4c f5       	brge	.+82     	; 0x5fbe <Lcd_Int+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f6c:	6c 85       	ldd	r22, Y+12	; 0x0c
    5f6e:	7d 85       	ldd	r23, Y+13	; 0x0d
    5f70:	8e 85       	ldd	r24, Y+14	; 0x0e
    5f72:	9f 85       	ldd	r25, Y+15	; 0x0f
    5f74:	20 e0       	ldi	r18, 0x00	; 0
    5f76:	30 e0       	ldi	r19, 0x00	; 0
    5f78:	40 e2       	ldi	r20, 0x20	; 32
    5f7a:	51 e4       	ldi	r21, 0x41	; 65
    5f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f80:	dc 01       	movw	r26, r24
    5f82:	cb 01       	movw	r24, r22
    5f84:	bc 01       	movw	r22, r24
    5f86:	cd 01       	movw	r24, r26
    5f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f8c:	dc 01       	movw	r26, r24
    5f8e:	cb 01       	movw	r24, r22
    5f90:	9f 83       	std	Y+7, r25	; 0x07
    5f92:	8e 83       	std	Y+6, r24	; 0x06
    5f94:	0f c0       	rjmp	.+30     	; 0x5fb4 <Lcd_Int+0x362>
    5f96:	89 e1       	ldi	r24, 0x19	; 25
    5f98:	90 e0       	ldi	r25, 0x00	; 0
    5f9a:	9d 83       	std	Y+5, r25	; 0x05
    5f9c:	8c 83       	std	Y+4, r24	; 0x04
    5f9e:	8c 81       	ldd	r24, Y+4	; 0x04
    5fa0:	9d 81       	ldd	r25, Y+5	; 0x05
    5fa2:	01 97       	sbiw	r24, 0x01	; 1
    5fa4:	f1 f7       	brne	.-4      	; 0x5fa2 <Lcd_Int+0x350>
    5fa6:	9d 83       	std	Y+5, r25	; 0x05
    5fa8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5faa:	8e 81       	ldd	r24, Y+6	; 0x06
    5fac:	9f 81       	ldd	r25, Y+7	; 0x07
    5fae:	01 97       	sbiw	r24, 0x01	; 1
    5fb0:	9f 83       	std	Y+7, r25	; 0x07
    5fb2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5fb4:	8e 81       	ldd	r24, Y+6	; 0x06
    5fb6:	9f 81       	ldd	r25, Y+7	; 0x07
    5fb8:	00 97       	sbiw	r24, 0x00	; 0
    5fba:	69 f7       	brne	.-38     	; 0x5f96 <Lcd_Int+0x344>
    5fbc:	24 c0       	rjmp	.+72     	; 0x6006 <Lcd_Int+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5fbe:	68 85       	ldd	r22, Y+8	; 0x08
    5fc0:	79 85       	ldd	r23, Y+9	; 0x09
    5fc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    5fc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    5fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fca:	dc 01       	movw	r26, r24
    5fcc:	cb 01       	movw	r24, r22
    5fce:	9f 83       	std	Y+7, r25	; 0x07
    5fd0:	8e 83       	std	Y+6, r24	; 0x06
    5fd2:	8e 81       	ldd	r24, Y+6	; 0x06
    5fd4:	9f 81       	ldd	r25, Y+7	; 0x07
    5fd6:	9b 83       	std	Y+3, r25	; 0x03
    5fd8:	8a 83       	std	Y+2, r24	; 0x02
    5fda:	8a 81       	ldd	r24, Y+2	; 0x02
    5fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    5fde:	01 97       	sbiw	r24, 0x01	; 1
    5fe0:	f1 f7       	brne	.-4      	; 0x5fde <Lcd_Int+0x38c>
    5fe2:	9b 83       	std	Y+3, r25	; 0x03
    5fe4:	8a 83       	std	Y+2, r24	; 0x02
    5fe6:	0f c0       	rjmp	.+30     	; 0x6006 <Lcd_Int+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5fe8:	69 89       	ldd	r22, Y+17	; 0x11
    5fea:	7a 89       	ldd	r23, Y+18	; 0x12
    5fec:	8b 89       	ldd	r24, Y+19	; 0x13
    5fee:	9c 89       	ldd	r25, Y+20	; 0x14
    5ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ff4:	dc 01       	movw	r26, r24
    5ff6:	cb 01       	movw	r24, r22
    5ff8:	88 8b       	std	Y+16, r24	; 0x10
    5ffa:	88 89       	ldd	r24, Y+16	; 0x10
    5ffc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5ffe:	89 81       	ldd	r24, Y+1	; 0x01
    6000:	8a 95       	dec	r24
    6002:	f1 f7       	brne	.-4      	; 0x6000 <Lcd_Int+0x3ae>
    6004:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(100);

		Lcd_Cmd(0x03);
    6006:	83 e0       	ldi	r24, 0x03	; 3
    6008:	0e 94 1b 30 	call	0x6036	; 0x6036 <Lcd_Cmd>
		Lcd_Cmd(0x02);
    600c:	82 e0       	ldi	r24, 0x02	; 2
    600e:	0e 94 1b 30 	call	0x6036	; 0x6036 <Lcd_Cmd>
		Lcd_Cmd(0x02);
    6012:	82 e0       	ldi	r24, 0x02	; 2
    6014:	0e 94 1b 30 	call	0x6036	; 0x6036 <Lcd_Cmd>
		Lcd_Write_Custom();
    6018:	0e 94 ec 2d 	call	0x5bd8	; 0x5bd8 <Lcd_Write_Custom>
		Lcd_Goto_Row_Column(0, 0);
    601c:	80 e0       	ldi	r24, 0x00	; 0
    601e:	60 e0       	ldi	r22, 0x00	; 0
    6020:	0e 94 90 30 	call	0x6120	; 0x6120 <Lcd_Goto_Row_Column>

}
    6024:	e4 96       	adiw	r28, 0x34	; 52
    6026:	0f b6       	in	r0, 0x3f	; 63
    6028:	f8 94       	cli
    602a:	de bf       	out	0x3e, r29	; 62
    602c:	0f be       	out	0x3f, r0	; 63
    602e:	cd bf       	out	0x3d, r28	; 61
    6030:	cf 91       	pop	r28
    6032:	df 91       	pop	r29
    6034:	08 95       	ret

00006036 <Lcd_Cmd>:




void Lcd_Cmd(lcd_Cmd_Type command)
{
    6036:	df 93       	push	r29
    6038:	cf 93       	push	r28
    603a:	00 d0       	rcall	.+0      	; 0x603c <Lcd_Cmd+0x6>
    603c:	0f 92       	push	r0
    603e:	cd b7       	in	r28, 0x3d	; 61
    6040:	de b7       	in	r29, 0x3e	; 62
    6042:	8b 83       	std	Y+3, r24	; 0x03
	/* sending command in two times*/
		u8 Loc_High_Nipple=command;
    6044:	8b 81       	ldd	r24, Y+3	; 0x03
    6046:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_Low_Nipple=command<<LCD_Shift;
    6048:	8b 81       	ldd	r24, Y+3	; 0x03
    604a:	82 95       	swap	r24
    604c:	80 7f       	andi	r24, 0xF0	; 240
    604e:	89 83       	std	Y+1, r24	; 0x01

		/*RS =0*/

		DIO_write(DIO_PORTB, DIO_PIN1, DIO_LOW);
    6050:	81 e0       	ldi	r24, 0x01	; 1
    6052:	61 e0       	ldi	r22, 0x01	; 1
    6054:	40 e0       	ldi	r20, 0x00	; 0
    6056:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>

		/*write the high nipple */

		DIO_write_Group(DIO_PORTA, LCD_MASK, Loc_High_Nipple);
    605a:	80 e0       	ldi	r24, 0x00	; 0
    605c:	60 ef       	ldi	r22, 0xF0	; 240
    605e:	4a 81       	ldd	r20, Y+2	; 0x02
    6060:	0e 94 e3 3b 	call	0x77c6	; 0x77c6 <DIO_write_Group>

		/*Enable Pulse*/
Lcd_Pulse();
    6064:	0e 94 9f 2c 	call	0x593e	; 0x593e <Lcd_Pulse>

/*write low nipple*/

DIO_write_Group(DIO_PORTA, LCD_MASK, Loc_Low_Nipple);
    6068:	80 e0       	ldi	r24, 0x00	; 0
    606a:	60 ef       	ldi	r22, 0xF0	; 240
    606c:	49 81       	ldd	r20, Y+1	; 0x01
    606e:	0e 94 e3 3b 	call	0x77c6	; 0x77c6 <DIO_write_Group>

/*enable pulse*/

Lcd_Pulse();
    6072:	0e 94 9f 2c 	call	0x593e	; 0x593e <Lcd_Pulse>

}
    6076:	0f 90       	pop	r0
    6078:	0f 90       	pop	r0
    607a:	0f 90       	pop	r0
    607c:	cf 91       	pop	r28
    607e:	df 91       	pop	r29
    6080:	08 95       	ret

00006082 <Lcd_Data>:


void Lcd_Data(u8 data)
{
    6082:	df 93       	push	r29
    6084:	cf 93       	push	r28
    6086:	00 d0       	rcall	.+0      	; 0x6088 <Lcd_Data+0x6>
    6088:	0f 92       	push	r0
    608a:	cd b7       	in	r28, 0x3d	; 61
    608c:	de b7       	in	r29, 0x3e	; 62
    608e:	8b 83       	std	Y+3, r24	; 0x03
	/* sending data in two times*/
			u8 Loc_High_Nipple=data;
    6090:	8b 81       	ldd	r24, Y+3	; 0x03
    6092:	8a 83       	std	Y+2, r24	; 0x02
			u8 Loc_Low_Nipple=data<<LCD_Shift;
    6094:	8b 81       	ldd	r24, Y+3	; 0x03
    6096:	82 95       	swap	r24
    6098:	80 7f       	andi	r24, 0xF0	; 240
    609a:	89 83       	std	Y+1, r24	; 0x01

			/*RS =1*/

			DIO_write(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    609c:	81 e0       	ldi	r24, 0x01	; 1
    609e:	61 e0       	ldi	r22, 0x01	; 1
    60a0:	41 e0       	ldi	r20, 0x01	; 1
    60a2:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>

			/*write the high nipple */

			DIO_write_Group(DIO_PORTA, LCD_MASK, Loc_High_Nipple);
    60a6:	80 e0       	ldi	r24, 0x00	; 0
    60a8:	60 ef       	ldi	r22, 0xF0	; 240
    60aa:	4a 81       	ldd	r20, Y+2	; 0x02
    60ac:	0e 94 e3 3b 	call	0x77c6	; 0x77c6 <DIO_write_Group>

			/*Enable Pulse*/
	Lcd_Pulse();
    60b0:	0e 94 9f 2c 	call	0x593e	; 0x593e <Lcd_Pulse>

	/*write low nipple*/

	DIO_write_Group(DIO_PORTA, LCD_MASK, Loc_Low_Nipple);
    60b4:	80 e0       	ldi	r24, 0x00	; 0
    60b6:	60 ef       	ldi	r22, 0xF0	; 240
    60b8:	49 81       	ldd	r20, Y+1	; 0x01
    60ba:	0e 94 e3 3b 	call	0x77c6	; 0x77c6 <DIO_write_Group>

	/*enable pulse*/

	Lcd_Pulse();
    60be:	0e 94 9f 2c 	call	0x593e	; 0x593e <Lcd_Pulse>
}
    60c2:	0f 90       	pop	r0
    60c4:	0f 90       	pop	r0
    60c6:	0f 90       	pop	r0
    60c8:	cf 91       	pop	r28
    60ca:	df 91       	pop	r29
    60cc:	08 95       	ret

000060ce <Lcd_Display_chr>:

void Lcd_Display_chr(u8 chr)
{
    60ce:	df 93       	push	r29
    60d0:	cf 93       	push	r28
    60d2:	0f 92       	push	r0
    60d4:	cd b7       	in	r28, 0x3d	; 61
    60d6:	de b7       	in	r29, 0x3e	; 62
    60d8:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Data(chr);
    60da:	89 81       	ldd	r24, Y+1	; 0x01
    60dc:	0e 94 41 30 	call	0x6082	; 0x6082 <Lcd_Data>
}
    60e0:	0f 90       	pop	r0
    60e2:	cf 91       	pop	r28
    60e4:	df 91       	pop	r29
    60e6:	08 95       	ret

000060e8 <Lcd_Display_str>:
void Lcd_Display_str(u8 str[])
{
    60e8:	df 93       	push	r29
    60ea:	cf 93       	push	r28
    60ec:	00 d0       	rcall	.+0      	; 0x60ee <Lcd_Display_str+0x6>
    60ee:	cd b7       	in	r28, 0x3d	; 61
    60f0:	de b7       	in	r29, 0x3e	; 62
    60f2:	9a 83       	std	Y+2, r25	; 0x02
    60f4:	89 83       	std	Y+1, r24	; 0x01
    60f6:	0a c0       	rjmp	.+20     	; 0x610c <Lcd_Display_str+0x24>
while(*str!='\0')
{
Lcd_Display_chr(*str);
    60f8:	e9 81       	ldd	r30, Y+1	; 0x01
    60fa:	fa 81       	ldd	r31, Y+2	; 0x02
    60fc:	80 81       	ld	r24, Z
    60fe:	0e 94 67 30 	call	0x60ce	; 0x60ce <Lcd_Display_chr>
str++;
    6102:	89 81       	ldd	r24, Y+1	; 0x01
    6104:	9a 81       	ldd	r25, Y+2	; 0x02
    6106:	01 96       	adiw	r24, 0x01	; 1
    6108:	9a 83       	std	Y+2, r25	; 0x02
    610a:	89 83       	std	Y+1, r24	; 0x01
{
	Lcd_Data(chr);
}
void Lcd_Display_str(u8 str[])
{
while(*str!='\0')
    610c:	e9 81       	ldd	r30, Y+1	; 0x01
    610e:	fa 81       	ldd	r31, Y+2	; 0x02
    6110:	80 81       	ld	r24, Z
    6112:	88 23       	and	r24, r24
    6114:	89 f7       	brne	.-30     	; 0x60f8 <Lcd_Display_str+0x10>
{
Lcd_Display_chr(*str);
str++;
}
}
    6116:	0f 90       	pop	r0
    6118:	0f 90       	pop	r0
    611a:	cf 91       	pop	r28
    611c:	df 91       	pop	r29
    611e:	08 95       	ret

00006120 <Lcd_Goto_Row_Column>:
void Lcd_Goto_Row_Column(u8 row, u8 column)
{
    6120:	df 93       	push	r29
    6122:	cf 93       	push	r28
    6124:	00 d0       	rcall	.+0      	; 0x6126 <Lcd_Goto_Row_Column+0x6>
    6126:	00 d0       	rcall	.+0      	; 0x6128 <Lcd_Goto_Row_Column+0x8>
    6128:	cd b7       	in	r28, 0x3d	; 61
    612a:	de b7       	in	r29, 0x3e	; 62
    612c:	89 83       	std	Y+1, r24	; 0x01
    612e:	6a 83       	std	Y+2, r22	; 0x02
	switch(row)
    6130:	89 81       	ldd	r24, Y+1	; 0x01
    6132:	28 2f       	mov	r18, r24
    6134:	30 e0       	ldi	r19, 0x00	; 0
    6136:	3c 83       	std	Y+4, r19	; 0x04
    6138:	2b 83       	std	Y+3, r18	; 0x03
    613a:	8b 81       	ldd	r24, Y+3	; 0x03
    613c:	9c 81       	ldd	r25, Y+4	; 0x04
    613e:	00 97       	sbiw	r24, 0x00	; 0
    6140:	31 f0       	breq	.+12     	; 0x614e <Lcd_Goto_Row_Column+0x2e>
    6142:	2b 81       	ldd	r18, Y+3	; 0x03
    6144:	3c 81       	ldd	r19, Y+4	; 0x04
    6146:	21 30       	cpi	r18, 0x01	; 1
    6148:	31 05       	cpc	r19, r1
    614a:	31 f0       	breq	.+12     	; 0x6158 <Lcd_Goto_Row_Column+0x38>
    614c:	09 c0       	rjmp	.+18     	; 0x6160 <Lcd_Goto_Row_Column+0x40>
	{
	case 0:
		Lcd_Cmd(0x80+column);
    614e:	8a 81       	ldd	r24, Y+2	; 0x02
    6150:	80 58       	subi	r24, 0x80	; 128
    6152:	0e 94 1b 30 	call	0x6036	; 0x6036 <Lcd_Cmd>
    6156:	04 c0       	rjmp	.+8      	; 0x6160 <Lcd_Goto_Row_Column+0x40>
		break;

	case 1:
		Lcd_Cmd(0xC0+column);
    6158:	8a 81       	ldd	r24, Y+2	; 0x02
    615a:	80 54       	subi	r24, 0x40	; 64
    615c:	0e 94 1b 30 	call	0x6036	; 0x6036 <Lcd_Cmd>
		break;
	}
}
    6160:	0f 90       	pop	r0
    6162:	0f 90       	pop	r0
    6164:	0f 90       	pop	r0
    6166:	0f 90       	pop	r0
    6168:	cf 91       	pop	r28
    616a:	df 91       	pop	r29
    616c:	08 95       	ret

0000616e <Button_Int>:
 *      Author: lione
 */

#include "Button_Interface.h"
void Button_Int(void)
{
    616e:	df 93       	push	r29
    6170:	cf 93       	push	r28
    6172:	cd b7       	in	r28, 0x3d	; 61
    6174:	de b7       	in	r29, 0x3e	; 62
DIO_cnfg_channel(DIO_PORTB, DIO_PIN0, DIO_INPUT);
    6176:	81 e0       	ldi	r24, 0x01	; 1
    6178:	60 e0       	ldi	r22, 0x00	; 0
    617a:	40 e0       	ldi	r20, 0x00	; 0
    617c:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
DIO_cnfg_channel(DIO_PORTD, DIO_PIN2, DIO_INPUT);
    6180:	83 e0       	ldi	r24, 0x03	; 3
    6182:	62 e0       	ldi	r22, 0x02	; 2
    6184:	40 e0       	ldi	r20, 0x00	; 0
    6186:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
DIO_cnfg_channel(DIO_PORTD, DIO_PIN6, DIO_INPUT);
    618a:	83 e0       	ldi	r24, 0x03	; 3
    618c:	66 e0       	ldi	r22, 0x06	; 6
    618e:	40 e0       	ldi	r20, 0x00	; 0
    6190:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>

}
    6194:	cf 91       	pop	r28
    6196:	df 91       	pop	r29
    6198:	08 95       	ret

0000619a <Button_Read>:

dio_level_t Button_Read(button_id_t id)
{
    619a:	df 93       	push	r29
    619c:	cf 93       	push	r28
    619e:	00 d0       	rcall	.+0      	; 0x61a0 <Button_Read+0x6>
    61a0:	00 d0       	rcall	.+0      	; 0x61a2 <Button_Read+0x8>
    61a2:	cd b7       	in	r28, 0x3d	; 61
    61a4:	de b7       	in	r29, 0x3e	; 62
    61a6:	8a 83       	std	Y+2, r24	; 0x02
	dio_level_t loc_result=DIO_LOW;
    61a8:	19 82       	std	Y+1, r1	; 0x01
	switch (id)
    61aa:	8a 81       	ldd	r24, Y+2	; 0x02
    61ac:	28 2f       	mov	r18, r24
    61ae:	30 e0       	ldi	r19, 0x00	; 0
    61b0:	3c 83       	std	Y+4, r19	; 0x04
    61b2:	2b 83       	std	Y+3, r18	; 0x03
    61b4:	8b 81       	ldd	r24, Y+3	; 0x03
    61b6:	9c 81       	ldd	r25, Y+4	; 0x04
    61b8:	81 30       	cpi	r24, 0x01	; 1
    61ba:	91 05       	cpc	r25, r1
    61bc:	79 f0       	breq	.+30     	; 0x61dc <Button_Read+0x42>
    61be:	2b 81       	ldd	r18, Y+3	; 0x03
    61c0:	3c 81       	ldd	r19, Y+4	; 0x04
    61c2:	22 30       	cpi	r18, 0x02	; 2
    61c4:	31 05       	cpc	r19, r1
    61c6:	81 f0       	breq	.+32     	; 0x61e8 <Button_Read+0x4e>
    61c8:	8b 81       	ldd	r24, Y+3	; 0x03
    61ca:	9c 81       	ldd	r25, Y+4	; 0x04
    61cc:	00 97       	sbiw	r24, 0x00	; 0
    61ce:	89 f4       	brne	.+34     	; 0x61f2 <Button_Read+0x58>
{
	case BUTTON0:
		loc_result=DIO_read(DIO_PORTB, DIO_PIN0);
    61d0:	81 e0       	ldi	r24, 0x01	; 1
    61d2:	60 e0       	ldi	r22, 0x00	; 0
    61d4:	0e 94 53 3c 	call	0x78a6	; 0x78a6 <DIO_read>
    61d8:	89 83       	std	Y+1, r24	; 0x01
    61da:	0b c0       	rjmp	.+22     	; 0x61f2 <Button_Read+0x58>
		break;
	case BUTTON1:
		loc_result=DIO_read(DIO_PORTD, DIO_PIN6);
    61dc:	83 e0       	ldi	r24, 0x03	; 3
    61de:	66 e0       	ldi	r22, 0x06	; 6
    61e0:	0e 94 53 3c 	call	0x78a6	; 0x78a6 <DIO_read>
    61e4:	89 83       	std	Y+1, r24	; 0x01
    61e6:	05 c0       	rjmp	.+10     	; 0x61f2 <Button_Read+0x58>
			break;
	case BUTTON2:
		loc_result=DIO_read(DIO_PORTD, DIO_PIN2);
    61e8:	83 e0       	ldi	r24, 0x03	; 3
    61ea:	62 e0       	ldi	r22, 0x02	; 2
    61ec:	0e 94 53 3c 	call	0x78a6	; 0x78a6 <DIO_read>
    61f0:	89 83       	std	Y+1, r24	; 0x01
			break;

}
	return loc_result;
    61f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    61f4:	0f 90       	pop	r0
    61f6:	0f 90       	pop	r0
    61f8:	0f 90       	pop	r0
    61fa:	0f 90       	pop	r0
    61fc:	cf 91       	pop	r28
    61fe:	df 91       	pop	r29
    6200:	08 95       	ret

00006202 <Led_Init>:
 *  Created on: Jun 23, 2022
 *      Author: lione
 */
#include "Led_Interface.h"
void Led_Init()
{
    6202:	df 93       	push	r29
    6204:	cf 93       	push	r28
    6206:	cd b7       	in	r28, 0x3d	; 61
    6208:	de b7       	in	r29, 0x3e	; 62
	DIO_cnfg_channel(DIO_PORTC, LED0_PIN, DIO_OUTPUT);
    620a:	82 e0       	ldi	r24, 0x02	; 2
    620c:	62 e0       	ldi	r22, 0x02	; 2
    620e:	41 e0       	ldi	r20, 0x01	; 1
    6210:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
	DIO_cnfg_channel(LED1_PORT, LED1_PIN, DIO_OUTPUT);
    6214:	82 e0       	ldi	r24, 0x02	; 2
    6216:	67 e0       	ldi	r22, 0x07	; 7
    6218:	41 e0       	ldi	r20, 0x01	; 1
    621a:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
	DIO_cnfg_channel(LED2_PORT, LED2_PIN, DIO_OUTPUT);
    621e:	83 e0       	ldi	r24, 0x03	; 3
    6220:	63 e0       	ldi	r22, 0x03	; 3
    6222:	41 e0       	ldi	r20, 0x01	; 1
    6224:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>

	DIO_write(LED0_PORT, LED0_PIN, DIO_LOW);
    6228:	82 e0       	ldi	r24, 0x02	; 2
    622a:	62 e0       	ldi	r22, 0x02	; 2
    622c:	40 e0       	ldi	r20, 0x00	; 0
    622e:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(LED1_PORT, LED1_PIN, DIO_LOW);
    6232:	82 e0       	ldi	r24, 0x02	; 2
    6234:	67 e0       	ldi	r22, 0x07	; 7
    6236:	40 e0       	ldi	r20, 0x00	; 0
    6238:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	DIO_write(LED2_PORT, LED2_PIN, DIO_LOW);
    623c:	83 e0       	ldi	r24, 0x03	; 3
    623e:	63 e0       	ldi	r22, 0x03	; 3
    6240:	40 e0       	ldi	r20, 0x00	; 0
    6242:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
}
    6246:	cf 91       	pop	r28
    6248:	df 91       	pop	r29
    624a:	08 95       	ret

0000624c <Led_ON>:
void Led_ON(led_id_t led)
{
    624c:	df 93       	push	r29
    624e:	cf 93       	push	r28
    6250:	00 d0       	rcall	.+0      	; 0x6252 <Led_ON+0x6>
    6252:	0f 92       	push	r0
    6254:	cd b7       	in	r28, 0x3d	; 61
    6256:	de b7       	in	r29, 0x3e	; 62
    6258:	89 83       	std	Y+1, r24	; 0x01
	switch (led) {
    625a:	89 81       	ldd	r24, Y+1	; 0x01
    625c:	28 2f       	mov	r18, r24
    625e:	30 e0       	ldi	r19, 0x00	; 0
    6260:	3b 83       	std	Y+3, r19	; 0x03
    6262:	2a 83       	std	Y+2, r18	; 0x02
    6264:	8a 81       	ldd	r24, Y+2	; 0x02
    6266:	9b 81       	ldd	r25, Y+3	; 0x03
    6268:	81 30       	cpi	r24, 0x01	; 1
    626a:	91 05       	cpc	r25, r1
    626c:	79 f0       	breq	.+30     	; 0x628c <Led_ON+0x40>
    626e:	2a 81       	ldd	r18, Y+2	; 0x02
    6270:	3b 81       	ldd	r19, Y+3	; 0x03
    6272:	22 30       	cpi	r18, 0x02	; 2
    6274:	31 05       	cpc	r19, r1
    6276:	81 f0       	breq	.+32     	; 0x6298 <Led_ON+0x4c>
    6278:	8a 81       	ldd	r24, Y+2	; 0x02
    627a:	9b 81       	ldd	r25, Y+3	; 0x03
    627c:	00 97       	sbiw	r24, 0x00	; 0
    627e:	89 f4       	brne	.+34     	; 0x62a2 <Led_ON+0x56>
	case LED0:
#if(LED0_CONNECTION==SOURCE)
		DIO_write(LED0_PORT, LED0_PIN, DIO_HIGH);
    6280:	82 e0       	ldi	r24, 0x02	; 2
    6282:	62 e0       	ldi	r22, 0x02	; 2
    6284:	41 e0       	ldi	r20, 0x01	; 1
    6286:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
    628a:	0b c0       	rjmp	.+22     	; 0x62a2 <Led_ON+0x56>
		DIO_write(LED0_PORT, LED0_PIN, DIO_LOW);
#endif
		break;
	case LED1:
#if(LED1_CONNECTION==SOURCE)
		DIO_write(LED1_PORT, LED1_PIN, DIO_HIGH);
    628c:	82 e0       	ldi	r24, 0x02	; 2
    628e:	67 e0       	ldi	r22, 0x07	; 7
    6290:	41 e0       	ldi	r20, 0x01	; 1
    6292:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
    6296:	05 c0       	rjmp	.+10     	; 0x62a2 <Led_ON+0x56>
		DIO_write(LED1_PORT, LED1_PIN, DIO_LOW);
#endif
		break;
	case LED2:
#if(LED2_CONNECTION==SOURCE)
		DIO_write(LED2_PORT, LED2_PIN, DIO_HIGH);
    6298:	83 e0       	ldi	r24, 0x03	; 3
    629a:	63 e0       	ldi	r22, 0x03	; 3
    629c:	41 e0       	ldi	r20, 0x01	; 1
    629e:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
#else
		DIO_write(LED2_PORT, LED2_PIN, DIO_LOW);
#endif
		break;
	}
}
    62a2:	0f 90       	pop	r0
    62a4:	0f 90       	pop	r0
    62a6:	0f 90       	pop	r0
    62a8:	cf 91       	pop	r28
    62aa:	df 91       	pop	r29
    62ac:	08 95       	ret

000062ae <Led_OFF>:

void Led_OFF(led_id_t led)
{
    62ae:	df 93       	push	r29
    62b0:	cf 93       	push	r28
    62b2:	00 d0       	rcall	.+0      	; 0x62b4 <Led_OFF+0x6>
    62b4:	0f 92       	push	r0
    62b6:	cd b7       	in	r28, 0x3d	; 61
    62b8:	de b7       	in	r29, 0x3e	; 62
    62ba:	89 83       	std	Y+1, r24	; 0x01
	switch (led) {
    62bc:	89 81       	ldd	r24, Y+1	; 0x01
    62be:	28 2f       	mov	r18, r24
    62c0:	30 e0       	ldi	r19, 0x00	; 0
    62c2:	3b 83       	std	Y+3, r19	; 0x03
    62c4:	2a 83       	std	Y+2, r18	; 0x02
    62c6:	8a 81       	ldd	r24, Y+2	; 0x02
    62c8:	9b 81       	ldd	r25, Y+3	; 0x03
    62ca:	81 30       	cpi	r24, 0x01	; 1
    62cc:	91 05       	cpc	r25, r1
    62ce:	79 f0       	breq	.+30     	; 0x62ee <Led_OFF+0x40>
    62d0:	2a 81       	ldd	r18, Y+2	; 0x02
    62d2:	3b 81       	ldd	r19, Y+3	; 0x03
    62d4:	22 30       	cpi	r18, 0x02	; 2
    62d6:	31 05       	cpc	r19, r1
    62d8:	81 f0       	breq	.+32     	; 0x62fa <Led_OFF+0x4c>
    62da:	8a 81       	ldd	r24, Y+2	; 0x02
    62dc:	9b 81       	ldd	r25, Y+3	; 0x03
    62de:	00 97       	sbiw	r24, 0x00	; 0
    62e0:	89 f4       	brne	.+34     	; 0x6304 <Led_OFF+0x56>
	case LED0:
#if(LED0_CONNECTION==SOURCE)
		DIO_write(LED0_PORT, LED0_PIN, DIO_LOW);
    62e2:	82 e0       	ldi	r24, 0x02	; 2
    62e4:	62 e0       	ldi	r22, 0x02	; 2
    62e6:	40 e0       	ldi	r20, 0x00	; 0
    62e8:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
    62ec:	0b c0       	rjmp	.+22     	; 0x6304 <Led_OFF+0x56>
#endif
		break;

	case LED1:
#if(LED1_CONNECTION==SOURCE)
		DIO_write(LED1_PORT, LED1_PIN, DIO_LOW);
    62ee:	82 e0       	ldi	r24, 0x02	; 2
    62f0:	67 e0       	ldi	r22, 0x07	; 7
    62f2:	40 e0       	ldi	r20, 0x00	; 0
    62f4:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
    62f8:	05 c0       	rjmp	.+10     	; 0x6304 <Led_OFF+0x56>
#endif
		break;

	case LED2:
#if(LED2_CONNECTION==SOURCE)
		DIO_write(LED2_PORT, LED2_PIN, DIO_LOW);
    62fa:	83 e0       	ldi	r24, 0x03	; 3
    62fc:	63 e0       	ldi	r22, 0x03	; 3
    62fe:	40 e0       	ldi	r20, 0x00	; 0
    6300:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
#else
		DIO_write(LED2_PORT, LED2_PIN, DIO_HIGH);
#endif
		break;
	}
}
    6304:	0f 90       	pop	r0
    6306:	0f 90       	pop	r0
    6308:	0f 90       	pop	r0
    630a:	cf 91       	pop	r28
    630c:	df 91       	pop	r29
    630e:	08 95       	ret

00006310 <Led_Toggle>:

void Led_Toggle(led_id_t led)
{
    6310:	df 93       	push	r29
    6312:	cf 93       	push	r28
    6314:	00 d0       	rcall	.+0      	; 0x6316 <Led_Toggle+0x6>
    6316:	0f 92       	push	r0
    6318:	cd b7       	in	r28, 0x3d	; 61
    631a:	de b7       	in	r29, 0x3e	; 62
    631c:	89 83       	std	Y+1, r24	; 0x01
	switch (led) {
    631e:	89 81       	ldd	r24, Y+1	; 0x01
    6320:	28 2f       	mov	r18, r24
    6322:	30 e0       	ldi	r19, 0x00	; 0
    6324:	3b 83       	std	Y+3, r19	; 0x03
    6326:	2a 83       	std	Y+2, r18	; 0x02
    6328:	8a 81       	ldd	r24, Y+2	; 0x02
    632a:	9b 81       	ldd	r25, Y+3	; 0x03
    632c:	81 30       	cpi	r24, 0x01	; 1
    632e:	91 05       	cpc	r25, r1
    6330:	71 f0       	breq	.+28     	; 0x634e <Led_Toggle+0x3e>
    6332:	2a 81       	ldd	r18, Y+2	; 0x02
    6334:	3b 81       	ldd	r19, Y+3	; 0x03
    6336:	22 30       	cpi	r18, 0x02	; 2
    6338:	31 05       	cpc	r19, r1
    633a:	71 f0       	breq	.+28     	; 0x6358 <Led_Toggle+0x48>
    633c:	8a 81       	ldd	r24, Y+2	; 0x02
    633e:	9b 81       	ldd	r25, Y+3	; 0x03
    6340:	00 97       	sbiw	r24, 0x00	; 0
    6342:	71 f4       	brne	.+28     	; 0x6360 <Led_Toggle+0x50>
	case LED0:
		DIO_flip(DIO_PORTC,DIO_PIN2);
    6344:	82 e0       	ldi	r24, 0x02	; 2
    6346:	62 e0       	ldi	r22, 0x02	; 2
    6348:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <DIO_flip>
    634c:	09 c0       	rjmp	.+18     	; 0x6360 <Led_Toggle+0x50>
		break;
	case LED1:
		DIO_flip(DIO_PORTC,DIO_PIN7);
    634e:	82 e0       	ldi	r24, 0x02	; 2
    6350:	67 e0       	ldi	r22, 0x07	; 7
    6352:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <DIO_flip>
    6356:	04 c0       	rjmp	.+8      	; 0x6360 <Led_Toggle+0x50>
		break;
	case LED2:
		DIO_flip(DIO_PORTD,DIO_PIN3);
    6358:	83 e0       	ldi	r24, 0x03	; 3
    635a:	63 e0       	ldi	r22, 0x03	; 3
    635c:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <DIO_flip>
		break;
	}
}
    6360:	0f 90       	pop	r0
    6362:	0f 90       	pop	r0
    6364:	0f 90       	pop	r0
    6366:	cf 91       	pop	r28
    6368:	df 91       	pop	r29
    636a:	08 95       	ret

0000636c <UART_Int>:
#include "Uart_interface.h"
static void (*USART_RXC)(u8)=NULL;
u8 data;
u8 *name;
void UART_Int(void)
{
    636c:	df 93       	push	r29
    636e:	cf 93       	push	r28
    6370:	00 d0       	rcall	.+0      	; 0x6372 <UART_Int+0x6>
    6372:	cd b7       	in	r28, 0x3d	; 61
    6374:	de b7       	in	r29, 0x3e	; 62
	//USART Data Register Empty Interrupt Enable
	//SIT_BIT(UCSRB_REG,5);


	//Receiver Enable
	SET_BIT(UCSRB_REG,4);
    6376:	aa e2       	ldi	r26, 0x2A	; 42
    6378:	b0 e0       	ldi	r27, 0x00	; 0
    637a:	ea e2       	ldi	r30, 0x2A	; 42
    637c:	f0 e0       	ldi	r31, 0x00	; 0
    637e:	80 81       	ld	r24, Z
    6380:	80 61       	ori	r24, 0x10	; 16
    6382:	8c 93       	st	X, r24



	// TXEN: Transmitter Enable
	SET_BIT(UCSRB_REG,3);
    6384:	aa e2       	ldi	r26, 0x2A	; 42
    6386:	b0 e0       	ldi	r27, 0x00	; 0
    6388:	ea e2       	ldi	r30, 0x2A	; 42
    638a:	f0 e0       	ldi	r31, 0x00	; 0
    638c:	80 81       	ld	r24, Z
    638e:	88 60       	ori	r24, 0x08	; 8
    6390:	8c 93       	st	X, r24


	// Character Size to be 8 bit
	//CLEAR_BIT(UCSRB_REG,2);       U DONT NEED TO WRITE ON IT
	UCSRC_REG=134; //A_SYN NO_PRIOTY 1BIT_DATA 1BIT STOP NO_CLOCK_POLARITY
    6392:	e0 e4       	ldi	r30, 0x40	; 64
    6394:	f0 e0       	ldi	r31, 0x00	; 0
    6396:	86 e8       	ldi	r24, 0x86	; 134
    6398:	80 83       	st	Z, r24


	// Rule for UBRRH and UBRRL
	u16 UBRR_loc=(((16000000)/(BAUD*16UL))-1);
    639a:	87 e6       	ldi	r24, 0x67	; 103
    639c:	90 e0       	ldi	r25, 0x00	; 0
    639e:	9a 83       	std	Y+2, r25	; 0x02
    63a0:	89 83       	std	Y+1, r24	; 0x01
	UBRRH_REG=UBRR_loc>>8;
    63a2:	e0 e4       	ldi	r30, 0x40	; 64
    63a4:	f0 e0       	ldi	r31, 0x00	; 0
    63a6:	89 81       	ldd	r24, Y+1	; 0x01
    63a8:	9a 81       	ldd	r25, Y+2	; 0x02
    63aa:	89 2f       	mov	r24, r25
    63ac:	99 27       	eor	r25, r25
    63ae:	80 83       	st	Z, r24
	UBRRL_REG=(u8)UBRR_loc;
    63b0:	e9 e2       	ldi	r30, 0x29	; 41
    63b2:	f0 e0       	ldi	r31, 0x00	; 0
    63b4:	89 81       	ldd	r24, Y+1	; 0x01
    63b6:	80 83       	st	Z, r24
}
    63b8:	0f 90       	pop	r0
    63ba:	0f 90       	pop	r0
    63bc:	cf 91       	pop	r28
    63be:	df 91       	pop	r29
    63c0:	08 95       	ret

000063c2 <UART_Transmit_chr>:

void UART_Transmit_chr(u8 data)
{
    63c2:	df 93       	push	r29
    63c4:	cf 93       	push	r28
    63c6:	0f 92       	push	r0
    63c8:	cd b7       	in	r28, 0x3d	; 61
    63ca:	de b7       	in	r29, 0x3e	; 62
    63cc:	89 83       	std	Y+1, r24	; 0x01
// USART Data Register Empty
while(CHECK_BIT(UCSRA_REG,5)==0);
    63ce:	eb e2       	ldi	r30, 0x2B	; 43
    63d0:	f0 e0       	ldi	r31, 0x00	; 0
    63d2:	80 81       	ld	r24, Z
    63d4:	82 95       	swap	r24
    63d6:	86 95       	lsr	r24
    63d8:	87 70       	andi	r24, 0x07	; 7
    63da:	88 2f       	mov	r24, r24
    63dc:	90 e0       	ldi	r25, 0x00	; 0
    63de:	81 70       	andi	r24, 0x01	; 1
    63e0:	90 70       	andi	r25, 0x00	; 0
    63e2:	00 97       	sbiw	r24, 0x00	; 0
    63e4:	a1 f3       	breq	.-24     	; 0x63ce <UART_Transmit_chr+0xc>

UDR_REG=data;
    63e6:	ec e2       	ldi	r30, 0x2C	; 44
    63e8:	f0 e0       	ldi	r31, 0x00	; 0
    63ea:	89 81       	ldd	r24, Y+1	; 0x01
    63ec:	80 83       	st	Z, r24

}
    63ee:	0f 90       	pop	r0
    63f0:	cf 91       	pop	r28
    63f2:	df 91       	pop	r29
    63f4:	08 95       	ret

000063f6 <UART_Receive>:


u8 UART_Receive(void)
{
    63f6:	df 93       	push	r29
    63f8:	cf 93       	push	r28
    63fa:	cd b7       	in	r28, 0x3d	; 61
    63fc:	de b7       	in	r29, 0x3e	; 62
	// wait  USART Receive Complete

while(CHECK_BIT(UCSRA_REG,7)==0);
    63fe:	eb e2       	ldi	r30, 0x2B	; 43
    6400:	f0 e0       	ldi	r31, 0x00	; 0
    6402:	80 81       	ld	r24, Z
    6404:	88 23       	and	r24, r24
    6406:	dc f7       	brge	.-10     	; 0x63fe <UART_Receive+0x8>
data=UDR_REG;
    6408:	ec e2       	ldi	r30, 0x2C	; 44
    640a:	f0 e0       	ldi	r31, 0x00	; 0
    640c:	80 81       	ld	r24, Z
    640e:	80 93 4a 03 	sts	0x034A, r24
return data;
    6412:	80 91 4a 03 	lds	r24, 0x034A
}
    6416:	cf 91       	pop	r28
    6418:	df 91       	pop	r29
    641a:	08 95       	ret

0000641c <UART_TransmitString>:


void UART_TransmitString(u8 * string){
    641c:	df 93       	push	r29
    641e:	cf 93       	push	r28
    6420:	00 d0       	rcall	.+0      	; 0x6422 <UART_TransmitString+0x6>
    6422:	0f 92       	push	r0
    6424:	cd b7       	in	r28, 0x3d	; 61
    6426:	de b7       	in	r29, 0x3e	; 62
    6428:	9b 83       	std	Y+3, r25	; 0x03
    642a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    642c:	19 82       	std	Y+1, r1	; 0x01
    642e:	0e c0       	rjmp	.+28     	; 0x644c <UART_TransmitString+0x30>
	while(string[i] != '\0'){
		UART_Transmit_chr(string[i]);
    6430:	89 81       	ldd	r24, Y+1	; 0x01
    6432:	28 2f       	mov	r18, r24
    6434:	30 e0       	ldi	r19, 0x00	; 0
    6436:	8a 81       	ldd	r24, Y+2	; 0x02
    6438:	9b 81       	ldd	r25, Y+3	; 0x03
    643a:	fc 01       	movw	r30, r24
    643c:	e2 0f       	add	r30, r18
    643e:	f3 1f       	adc	r31, r19
    6440:	80 81       	ld	r24, Z
    6442:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <UART_Transmit_chr>
		i++;
    6446:	89 81       	ldd	r24, Y+1	; 0x01
    6448:	8f 5f       	subi	r24, 0xFF	; 255
    644a:	89 83       	std	Y+1, r24	; 0x01
}


void UART_TransmitString(u8 * string){
	u8 i = 0;
	while(string[i] != '\0'){
    644c:	89 81       	ldd	r24, Y+1	; 0x01
    644e:	28 2f       	mov	r18, r24
    6450:	30 e0       	ldi	r19, 0x00	; 0
    6452:	8a 81       	ldd	r24, Y+2	; 0x02
    6454:	9b 81       	ldd	r25, Y+3	; 0x03
    6456:	fc 01       	movw	r30, r24
    6458:	e2 0f       	add	r30, r18
    645a:	f3 1f       	adc	r31, r19
    645c:	80 81       	ld	r24, Z
    645e:	88 23       	and	r24, r24
    6460:	39 f7       	brne	.-50     	; 0x6430 <UART_TransmitString+0x14>
		UART_Transmit_chr(string[i]);
		i++;
	}
}
    6462:	0f 90       	pop	r0
    6464:	0f 90       	pop	r0
    6466:	0f 90       	pop	r0
    6468:	cf 91       	pop	r28
    646a:	df 91       	pop	r29
    646c:	08 95       	ret

0000646e <UART1_Rx_Str>:




u8  *UART1_Rx_Str()
{
    646e:	df 93       	push	r29
    6470:	cf 93       	push	r28
    6472:	cd b7       	in	r28, 0x3d	; 61
    6474:	de b7       	in	r29, 0x3e	; 62
    6476:	60 97       	sbiw	r28, 0x10	; 16
    6478:	0f b6       	in	r0, 0x3f	; 63
    647a:	f8 94       	cli
    647c:	de bf       	out	0x3e, r29	; 62
    647e:	0f be       	out	0x3f, r0	; 63
    6480:	cd bf       	out	0x3d, r28	; 61
	u8 send[15]={0};
    6482:	8f e0       	ldi	r24, 0x0F	; 15
    6484:	fe 01       	movw	r30, r28
    6486:	32 96       	adiw	r30, 0x02	; 2
    6488:	df 01       	movw	r26, r30
    648a:	98 2f       	mov	r25, r24
    648c:	1d 92       	st	X+, r1
    648e:	9a 95       	dec	r25
    6490:	e9 f7       	brne	.-6      	; 0x648c <UART1_Rx_Str+0x1e>
data=0;
    6492:	10 92 4a 03 	sts	0x034A, r1
u8 i=0;
    6496:	19 82       	std	Y+1, r1	; 0x01
    6498:	0e c0       	rjmp	.+28     	; 0x64b6 <UART1_Rx_Str+0x48>
	while(UART_Receive()!=' ')
	{
		send[i]=data;
    649a:	89 81       	ldd	r24, Y+1	; 0x01
    649c:	28 2f       	mov	r18, r24
    649e:	30 e0       	ldi	r19, 0x00	; 0
    64a0:	40 91 4a 03 	lds	r20, 0x034A
    64a4:	ce 01       	movw	r24, r28
    64a6:	02 96       	adiw	r24, 0x02	; 2
    64a8:	fc 01       	movw	r30, r24
    64aa:	e2 0f       	add	r30, r18
    64ac:	f3 1f       	adc	r31, r19
    64ae:	40 83       	st	Z, r20
i++;
    64b0:	89 81       	ldd	r24, Y+1	; 0x01
    64b2:	8f 5f       	subi	r24, 0xFF	; 255
    64b4:	89 83       	std	Y+1, r24	; 0x01
u8  *UART1_Rx_Str()
{
	u8 send[15]={0};
data=0;
u8 i=0;
	while(UART_Receive()!=' ')
    64b6:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <UART_Receive>
    64ba:	80 32       	cpi	r24, 0x20	; 32
    64bc:	71 f7       	brne	.-36     	; 0x649a <UART1_Rx_Str+0x2c>
	{
		send[i]=data;
i++;
	}

	send[i]='\0';
    64be:	89 81       	ldd	r24, Y+1	; 0x01
    64c0:	28 2f       	mov	r18, r24
    64c2:	30 e0       	ldi	r19, 0x00	; 0
    64c4:	ce 01       	movw	r24, r28
    64c6:	02 96       	adiw	r24, 0x02	; 2
    64c8:	fc 01       	movw	r30, r24
    64ca:	e2 0f       	add	r30, r18
    64cc:	f3 1f       	adc	r31, r19
    64ce:	10 82       	st	Z, r1
GINT_ENABLE_INTERRUPT();
    64d0:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <GINT_ENABLE_INTERRUPT>
return send;
    64d4:	ce 01       	movw	r24, r28
    64d6:	02 96       	adiw	r24, 0x02	; 2
}
    64d8:	60 96       	adiw	r28, 0x10	; 16
    64da:	0f b6       	in	r0, 0x3f	; 63
    64dc:	f8 94       	cli
    64de:	de bf       	out	0x3e, r29	; 62
    64e0:	0f be       	out	0x3f, r0	; 63
    64e2:	cd bf       	out	0x3d, r28	; 61
    64e4:	cf 91       	pop	r28
    64e6:	df 91       	pop	r29
    64e8:	08 95       	ret

000064ea <EXT_INT_UASRT_Callout>:




void EXT_INT_UASRT_Callout(void(*ptr)(u8))
{
    64ea:	df 93       	push	r29
    64ec:	cf 93       	push	r28
    64ee:	00 d0       	rcall	.+0      	; 0x64f0 <EXT_INT_UASRT_Callout+0x6>
    64f0:	cd b7       	in	r28, 0x3d	; 61
    64f2:	de b7       	in	r29, 0x3e	; 62
    64f4:	9a 83       	std	Y+2, r25	; 0x02
    64f6:	89 83       	std	Y+1, r24	; 0x01

	USART_RXC=ptr;
    64f8:	89 81       	ldd	r24, Y+1	; 0x01
    64fa:	9a 81       	ldd	r25, Y+2	; 0x02
    64fc:	90 93 37 03 	sts	0x0337, r25
    6500:	80 93 36 03 	sts	0x0336, r24

}
    6504:	0f 90       	pop	r0
    6506:	0f 90       	pop	r0
    6508:	cf 91       	pop	r28
    650a:	df 91       	pop	r29
    650c:	08 95       	ret

0000650e <WDT_Int>:
 */

#include "WDT_Interface.h"

void WDT_Int()
{
    650e:	df 93       	push	r29
    6510:	cf 93       	push	r28
    6512:	cd b7       	in	r28, 0x3d	; 61
    6514:	de b7       	in	r29, 0x3e	; 62
	// Watchdog Enable
	SET_BIT(WDTCR_REG,3);
    6516:	a1 e4       	ldi	r26, 0x41	; 65
    6518:	b0 e0       	ldi	r27, 0x00	; 0
    651a:	e1 e4       	ldi	r30, 0x41	; 65
    651c:	f0 e0       	ldi	r31, 0x00	; 0
    651e:	80 81       	ld	r24, Z
    6520:	88 60       	ori	r24, 0x08	; 8
    6522:	8c 93       	st	X, r24

}
    6524:	cf 91       	pop	r28
    6526:	df 91       	pop	r29
    6528:	08 95       	ret

0000652a <WDT_Refresh>:

void WDT_Refresh()
{
    652a:	df 93       	push	r29
    652c:	cf 93       	push	r28
    652e:	cd b7       	in	r28, 0x3d	; 61
    6530:	de b7       	in	r29, 0x3e	; 62
	// WDR in assemplay means that u say to th eprossecor to reset the watchdog timer
	asm("WDR");
    6532:	a8 95       	wdr
}
    6534:	cf 91       	pop	r28
    6536:	df 91       	pop	r29
    6538:	08 95       	ret

0000653a <WDT_Start>:

void WDT_Start()
{
    653a:	df 93       	push	r29
    653c:	cf 93       	push	r28
    653e:	cd b7       	in	r28, 0x3d	; 61
    6540:	de b7       	in	r29, 0x3e	; 62
		//Watchdog Timer Prescaler 2, 1, and 0 to be 2.1 sec
	SET_BIT(WDTCR_REG,0);
    6542:	a1 e4       	ldi	r26, 0x41	; 65
    6544:	b0 e0       	ldi	r27, 0x00	; 0
    6546:	e1 e4       	ldi	r30, 0x41	; 65
    6548:	f0 e0       	ldi	r31, 0x00	; 0
    654a:	80 81       	ld	r24, Z
    654c:	81 60       	ori	r24, 0x01	; 1
    654e:	8c 93       	st	X, r24
	SET_BIT(WDTCR_REG,1);
    6550:	a1 e4       	ldi	r26, 0x41	; 65
    6552:	b0 e0       	ldi	r27, 0x00	; 0
    6554:	e1 e4       	ldi	r30, 0x41	; 65
    6556:	f0 e0       	ldi	r31, 0x00	; 0
    6558:	80 81       	ld	r24, Z
    655a:	82 60       	ori	r24, 0x02	; 2
    655c:	8c 93       	st	X, r24
	SET_BIT(WDTCR_REG,2);
    655e:	a1 e4       	ldi	r26, 0x41	; 65
    6560:	b0 e0       	ldi	r27, 0x00	; 0
    6562:	e1 e4       	ldi	r30, 0x41	; 65
    6564:	f0 e0       	ldi	r31, 0x00	; 0
    6566:	80 81       	ld	r24, Z
    6568:	84 60       	ori	r24, 0x04	; 4
    656a:	8c 93       	st	X, r24
}
    656c:	cf 91       	pop	r28
    656e:	df 91       	pop	r29
    6570:	08 95       	ret

00006572 <Delay2>:
u16 tot_overflow2=0;
u8 rem2;
u8 check_no2=0;


void Delay2(u16 delay_number){
    6572:	df 93       	push	r29
    6574:	cf 93       	push	r28
    6576:	cd b7       	in	r28, 0x3d	; 61
    6578:	de b7       	in	r29, 0x3e	; 62
    657a:	2a 97       	sbiw	r28, 0x0a	; 10
    657c:	0f b6       	in	r0, 0x3f	; 63
    657e:	f8 94       	cli
    6580:	de bf       	out	0x3e, r29	; 62
    6582:	0f be       	out	0x3f, r0	; 63
    6584:	cd bf       	out	0x3d, r28	; 61
    6586:	9a 87       	std	Y+10, r25	; 0x0a
    6588:	89 87       	std	Y+9, r24	; 0x09


		f32 loc_delay_time=delay_number/1000;
    658a:	89 85       	ldd	r24, Y+9	; 0x09
    658c:	9a 85       	ldd	r25, Y+10	; 0x0a
    658e:	28 ee       	ldi	r18, 0xE8	; 232
    6590:	33 e0       	ldi	r19, 0x03	; 3
    6592:	b9 01       	movw	r22, r18
    6594:	0e 94 09 3e 	call	0x7c12	; 0x7c12 <__udivmodhi4>
    6598:	cb 01       	movw	r24, r22
    659a:	cc 01       	movw	r24, r24
    659c:	a0 e0       	ldi	r26, 0x00	; 0
    659e:	b0 e0       	ldi	r27, 0x00	; 0
    65a0:	bc 01       	movw	r22, r24
    65a2:	cd 01       	movw	r24, r26
    65a4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    65a8:	dc 01       	movw	r26, r24
    65aa:	cb 01       	movw	r24, r22
    65ac:	8d 83       	std	Y+5, r24	; 0x05
    65ae:	9e 83       	std	Y+6, r25	; 0x06
    65b0:	af 83       	std	Y+7, r26	; 0x07
    65b2:	b8 87       	std	Y+8, r27	; 0x08

		f32 ovf=0.016384;
    65b4:	8d eb       	ldi	r24, 0xBD	; 189
    65b6:	97 e3       	ldi	r25, 0x37	; 55
    65b8:	a6 e8       	ldi	r26, 0x86	; 134
    65ba:	bc e3       	ldi	r27, 0x3C	; 60
    65bc:	89 83       	std	Y+1, r24	; 0x01
    65be:	9a 83       	std	Y+2, r25	; 0x02
    65c0:	ab 83       	std	Y+3, r26	; 0x03
    65c2:	bc 83       	std	Y+4, r27	; 0x04

		no_of_ovf2 =loc_delay_time/ovf;
    65c4:	6d 81       	ldd	r22, Y+5	; 0x05
    65c6:	7e 81       	ldd	r23, Y+6	; 0x06
    65c8:	8f 81       	ldd	r24, Y+7	; 0x07
    65ca:	98 85       	ldd	r25, Y+8	; 0x08
    65cc:	29 81       	ldd	r18, Y+1	; 0x01
    65ce:	3a 81       	ldd	r19, Y+2	; 0x02
    65d0:	4b 81       	ldd	r20, Y+3	; 0x03
    65d2:	5c 81       	ldd	r21, Y+4	; 0x04
    65d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    65d8:	dc 01       	movw	r26, r24
    65da:	cb 01       	movw	r24, r22
    65dc:	bc 01       	movw	r22, r24
    65de:	cd 01       	movw	r24, r26
    65e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65e4:	dc 01       	movw	r26, r24
    65e6:	cb 01       	movw	r24, r22
    65e8:	90 93 4d 03 	sts	0x034D, r25
    65ec:	80 93 4c 03 	sts	0x034C, r24
		rem2=	fmod((loc_delay_time/ovf)*100,100);
    65f0:	6d 81       	ldd	r22, Y+5	; 0x05
    65f2:	7e 81       	ldd	r23, Y+6	; 0x06
    65f4:	8f 81       	ldd	r24, Y+7	; 0x07
    65f6:	98 85       	ldd	r25, Y+8	; 0x08
    65f8:	29 81       	ldd	r18, Y+1	; 0x01
    65fa:	3a 81       	ldd	r19, Y+2	; 0x02
    65fc:	4b 81       	ldd	r20, Y+3	; 0x03
    65fe:	5c 81       	ldd	r21, Y+4	; 0x04
    6600:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6604:	dc 01       	movw	r26, r24
    6606:	cb 01       	movw	r24, r22
    6608:	bc 01       	movw	r22, r24
    660a:	cd 01       	movw	r24, r26
    660c:	20 e0       	ldi	r18, 0x00	; 0
    660e:	30 e0       	ldi	r19, 0x00	; 0
    6610:	48 ec       	ldi	r20, 0xC8	; 200
    6612:	52 e4       	ldi	r21, 0x42	; 66
    6614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6618:	dc 01       	movw	r26, r24
    661a:	cb 01       	movw	r24, r22
    661c:	bc 01       	movw	r22, r24
    661e:	cd 01       	movw	r24, r26
    6620:	20 e0       	ldi	r18, 0x00	; 0
    6622:	30 e0       	ldi	r19, 0x00	; 0
    6624:	48 ec       	ldi	r20, 0xC8	; 200
    6626:	52 e4       	ldi	r21, 0x42	; 66
    6628:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <fmod>
    662c:	dc 01       	movw	r26, r24
    662e:	cb 01       	movw	r24, r22
    6630:	bc 01       	movw	r22, r24
    6632:	cd 01       	movw	r24, r26
    6634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6638:	dc 01       	movw	r26, r24
    663a:	cb 01       	movw	r24, r22
    663c:	80 93 4b 03 	sts	0x034B, r24

	TCCR2 = 4; /* Timer0, normal mode, /1024 prescalar */
    6640:	e5 e4       	ldi	r30, 0x45	; 69
    6642:	f0 e0       	ldi	r31, 0x00	; 0
    6644:	84 e0       	ldi	r24, 0x04	; 4
    6646:	80 83       	st	Z, r24
		TCNT2 = rem2;
    6648:	e4 e4       	ldi	r30, 0x44	; 68
    664a:	f0 e0       	ldi	r31, 0x00	; 0
    664c:	80 91 4b 03 	lds	r24, 0x034B
    6650:	80 83       	st	Z, r24
    6652:	1b c0       	rjmp	.+54     	; 0x668a <Delay2+0x118>
		while(tot_overflow2<no_of_ovf2)
		{/* Load TCNT0, count for 10ms */
		while((TIFR&0x01)==0);  /* Wait for TOV0 to roll over */
    6654:	e8 e5       	ldi	r30, 0x58	; 88
    6656:	f0 e0       	ldi	r31, 0x00	; 0
    6658:	80 81       	ld	r24, Z
    665a:	88 2f       	mov	r24, r24
    665c:	90 e0       	ldi	r25, 0x00	; 0
    665e:	81 70       	andi	r24, 0x01	; 1
    6660:	90 70       	andi	r25, 0x00	; 0
    6662:	00 97       	sbiw	r24, 0x00	; 0
    6664:	b9 f3       	breq	.-18     	; 0x6654 <Delay2+0xe2>
		TCNT2 = rem2;
    6666:	e4 e4       	ldi	r30, 0x44	; 68
    6668:	f0 e0       	ldi	r31, 0x00	; 0
    666a:	80 91 4b 03 	lds	r24, 0x034B
    666e:	80 83       	st	Z, r24
tot_overflow2++;
    6670:	80 91 38 03 	lds	r24, 0x0338
    6674:	90 91 39 03 	lds	r25, 0x0339
    6678:	01 96       	adiw	r24, 0x01	; 1
    667a:	90 93 39 03 	sts	0x0339, r25
    667e:	80 93 38 03 	sts	0x0338, r24
		TIFR = 0x1;
    6682:	e8 e5       	ldi	r30, 0x58	; 88
    6684:	f0 e0       	ldi	r31, 0x00	; 0
    6686:	81 e0       	ldi	r24, 0x01	; 1
    6688:	80 83       	st	Z, r24
		no_of_ovf2 =loc_delay_time/ovf;
		rem2=	fmod((loc_delay_time/ovf)*100,100);

	TCCR2 = 4; /* Timer0, normal mode, /1024 prescalar */
		TCNT2 = rem2;
		while(tot_overflow2<no_of_ovf2)
    668a:	20 91 38 03 	lds	r18, 0x0338
    668e:	30 91 39 03 	lds	r19, 0x0339
    6692:	80 91 4c 03 	lds	r24, 0x034C
    6696:	90 91 4d 03 	lds	r25, 0x034D
    669a:	28 17       	cp	r18, r24
    669c:	39 07       	cpc	r19, r25
    669e:	d0 f2       	brcs	.-76     	; 0x6654 <Delay2+0xe2>
		while((TIFR&0x01)==0);  /* Wait for TOV0 to roll over */
		TCNT2 = rem2;
tot_overflow2++;
		TIFR = 0x1;
}
		TCCR2 = 0;
    66a0:	e5 e4       	ldi	r30, 0x45	; 69
    66a2:	f0 e0       	ldi	r31, 0x00	; 0
    66a4:	10 82       	st	Z, r1
		tot_overflow2=0;
    66a6:	10 92 39 03 	sts	0x0339, r1
    66aa:	10 92 38 03 	sts	0x0338, r1
}
    66ae:	2a 96       	adiw	r28, 0x0a	; 10
    66b0:	0f b6       	in	r0, 0x3f	; 63
    66b2:	f8 94       	cli
    66b4:	de bf       	out	0x3e, r29	; 62
    66b6:	0f be       	out	0x3f, r0	; 63
    66b8:	cd bf       	out	0x3d, r28	; 61
    66ba:	cf 91       	pop	r28
    66bc:	df 91       	pop	r29
    66be:	08 95       	ret

000066c0 <Timer2_FPWM_Int>:



void Timer2_FPWM_Int()
{
    66c0:	df 93       	push	r29
    66c2:	cf 93       	push	r28
    66c4:	cd b7       	in	r28, 0x3d	; 61
    66c6:	de b7       	in	r29, 0x3e	; 62


	// to choose mode FPWM using ICR1 in timer1
	SET_BIT(TCCR2_REG,3);
    66c8:	a5 e4       	ldi	r26, 0x45	; 69
    66ca:	b0 e0       	ldi	r27, 0x00	; 0
    66cc:	e5 e4       	ldi	r30, 0x45	; 69
    66ce:	f0 e0       	ldi	r31, 0x00	; 0
    66d0:	80 81       	ld	r24, Z
    66d2:	88 60       	ori	r24, 0x08	; 8
    66d4:	8c 93       	st	X, r24
	SET_BIT(TCCR2_REG,4);
    66d6:	a5 e4       	ldi	r26, 0x45	; 69
    66d8:	b0 e0       	ldi	r27, 0x00	; 0
    66da:	e5 e4       	ldi	r30, 0x45	; 69
    66dc:	f0 e0       	ldi	r31, 0x00	; 0
    66de:	80 81       	ld	r24, Z
    66e0:	80 61       	ori	r24, 0x10	; 16
    66e2:	8c 93       	st	X, r24



//to choose non inv mode

	SET_BIT(TCCR2_REG,5);
    66e4:	a5 e4       	ldi	r26, 0x45	; 69
    66e6:	b0 e0       	ldi	r27, 0x00	; 0
    66e8:	e5 e4       	ldi	r30, 0x45	; 69
    66ea:	f0 e0       	ldi	r31, 0x00	; 0
    66ec:	80 81       	ld	r24, Z
    66ee:	80 62       	ori	r24, 0x20	; 32
    66f0:	8c 93       	st	X, r24

GINT_ENABLE_INTERRUPT();
    66f2:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <GINT_ENABLE_INTERRUPT>
SET_BIT(TIMSK_REG,6);
    66f6:	a9 e5       	ldi	r26, 0x59	; 89
    66f8:	b0 e0       	ldi	r27, 0x00	; 0
    66fa:	e9 e5       	ldi	r30, 0x59	; 89
    66fc:	f0 e0       	ldi	r31, 0x00	; 0
    66fe:	80 81       	ld	r24, Z
    6700:	80 64       	ori	r24, 0x40	; 64
    6702:	8c 93       	st	X, r24

SET_BIT(DDRD,7);
    6704:	a1 e3       	ldi	r26, 0x31	; 49
    6706:	b0 e0       	ldi	r27, 0x00	; 0
    6708:	e1 e3       	ldi	r30, 0x31	; 49
    670a:	f0 e0       	ldi	r31, 0x00	; 0
    670c:	80 81       	ld	r24, Z
    670e:	80 68       	ori	r24, 0x80	; 128
    6710:	8c 93       	st	X, r24

}
    6712:	cf 91       	pop	r28
    6714:	df 91       	pop	r29
    6716:	08 95       	ret

00006718 <Timer2_FPWM_Start>:


void Timer2_FPWM_Start()
{
    6718:	df 93       	push	r29
    671a:	cf 93       	push	r28
    671c:	cd b7       	in	r28, 0x3d	; 61
    671e:	de b7       	in	r29, 0x3e	; 62
	// choosing prescaller 256 to make 50Hz
	//SIT_BIT(TCCR2_REG,0);
	SET_BIT(TCCR2_REG,1);
    6720:	a5 e4       	ldi	r26, 0x45	; 69
    6722:	b0 e0       	ldi	r27, 0x00	; 0
    6724:	e5 e4       	ldi	r30, 0x45	; 69
    6726:	f0 e0       	ldi	r31, 0x00	; 0
    6728:	80 81       	ld	r24, Z
    672a:	82 60       	ori	r24, 0x02	; 2
    672c:	8c 93       	st	X, r24
	SET_BIT(TCCR2_REG,2);
    672e:	a5 e4       	ldi	r26, 0x45	; 69
    6730:	b0 e0       	ldi	r27, 0x00	; 0
    6732:	e5 e4       	ldi	r30, 0x45	; 69
    6734:	f0 e0       	ldi	r31, 0x00	; 0
    6736:	80 81       	ld	r24, Z
    6738:	84 60       	ori	r24, 0x04	; 4
    673a:	8c 93       	st	X, r24

}
    673c:	cf 91       	pop	r28
    673e:	df 91       	pop	r29
    6740:	08 95       	ret

00006742 <Timer2_Set_Duty>:

void Timer2_Set_Duty(u8 duty_cycle)
{
    6742:	df 93       	push	r29
    6744:	cf 93       	push	r28
    6746:	0f 92       	push	r0
    6748:	cd b7       	in	r28, 0x3d	; 61
    674a:	de b7       	in	r29, 0x3e	; 62
    674c:	89 83       	std	Y+1, r24	; 0x01
	OCR2_REG=((duty_cycle*256)/100)-1;
    674e:	e3 e4       	ldi	r30, 0x43	; 67
    6750:	f0 e0       	ldi	r31, 0x00	; 0
    6752:	89 81       	ldd	r24, Y+1	; 0x01
    6754:	88 2f       	mov	r24, r24
    6756:	90 e0       	ldi	r25, 0x00	; 0
    6758:	98 2f       	mov	r25, r24
    675a:	88 27       	eor	r24, r24
    675c:	24 e6       	ldi	r18, 0x64	; 100
    675e:	30 e0       	ldi	r19, 0x00	; 0
    6760:	b9 01       	movw	r22, r18
    6762:	0e 94 1d 3e 	call	0x7c3a	; 0x7c3a <__divmodhi4>
    6766:	cb 01       	movw	r24, r22
    6768:	81 50       	subi	r24, 0x01	; 1
    676a:	80 83       	st	Z, r24
}
    676c:	0f 90       	pop	r0
    676e:	cf 91       	pop	r28
    6770:	df 91       	pop	r29
    6772:	08 95       	ret

00006774 <Timer2_FPWM_Stop>:
void Timer2_FPWM_Stop(){
    6774:	df 93       	push	r29
    6776:	cf 93       	push	r28
    6778:	cd b7       	in	r28, 0x3d	; 61
    677a:	de b7       	in	r29, 0x3e	; 62
	// to stop the timer

	CLEAR_BIT(TCCR2_REG,0);
    677c:	a5 e4       	ldi	r26, 0x45	; 69
    677e:	b0 e0       	ldi	r27, 0x00	; 0
    6780:	e5 e4       	ldi	r30, 0x45	; 69
    6782:	f0 e0       	ldi	r31, 0x00	; 0
    6784:	80 81       	ld	r24, Z
    6786:	8e 7f       	andi	r24, 0xFE	; 254
    6788:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2_REG,1);
    678a:	a5 e4       	ldi	r26, 0x45	; 69
    678c:	b0 e0       	ldi	r27, 0x00	; 0
    678e:	e5 e4       	ldi	r30, 0x45	; 69
    6790:	f0 e0       	ldi	r31, 0x00	; 0
    6792:	80 81       	ld	r24, Z
    6794:	8d 7f       	andi	r24, 0xFD	; 253
    6796:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2_REG,2);
    6798:	a5 e4       	ldi	r26, 0x45	; 69
    679a:	b0 e0       	ldi	r27, 0x00	; 0
    679c:	e5 e4       	ldi	r30, 0x45	; 69
    679e:	f0 e0       	ldi	r31, 0x00	; 0
    67a0:	80 81       	ld	r24, Z
    67a2:	8b 7f       	andi	r24, 0xFB	; 251
    67a4:	8c 93       	st	X, r24
}
    67a6:	cf 91       	pop	r28
    67a8:	df 91       	pop	r29
    67aa:	08 95       	ret

000067ac <Timer1_Int>:
#include "Timer1_Interface.h"



void Timer1_Int(void)
{
    67ac:	df 93       	push	r29
    67ae:	cf 93       	push	r28
    67b0:	cd b7       	in	r28, 0x3d	; 61
    67b2:	de b7       	in	r29, 0x3e	; 62
	// choose ctc mode 4 in timer1
	CLEAR_BIT(TCCR1A_REG,0);
    67b4:	af e4       	ldi	r26, 0x4F	; 79
    67b6:	b0 e0       	ldi	r27, 0x00	; 0
    67b8:	ef e4       	ldi	r30, 0x4F	; 79
    67ba:	f0 e0       	ldi	r31, 0x00	; 0
    67bc:	80 81       	ld	r24, Z
    67be:	8e 7f       	andi	r24, 0xFE	; 254
    67c0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A_REG,1);
    67c2:	af e4       	ldi	r26, 0x4F	; 79
    67c4:	b0 e0       	ldi	r27, 0x00	; 0
    67c6:	ef e4       	ldi	r30, 0x4F	; 79
    67c8:	f0 e0       	ldi	r31, 0x00	; 0
    67ca:	80 81       	ld	r24, Z
    67cc:	8d 7f       	andi	r24, 0xFD	; 253
    67ce:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,3);
    67d0:	ae e4       	ldi	r26, 0x4E	; 78
    67d2:	b0 e0       	ldi	r27, 0x00	; 0
    67d4:	ee e4       	ldi	r30, 0x4E	; 78
    67d6:	f0 e0       	ldi	r31, 0x00	; 0
    67d8:	80 81       	ld	r24, Z
    67da:	88 60       	ori	r24, 0x08	; 8
    67dc:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_REG,4);
    67de:	ae e4       	ldi	r26, 0x4E	; 78
    67e0:	b0 e0       	ldi	r27, 0x00	; 0
    67e2:	ee e4       	ldi	r30, 0x4E	; 78
    67e4:	f0 e0       	ldi	r31, 0x00	; 0
    67e6:	80 81       	ld	r24, Z
    67e8:	8f 7e       	andi	r24, 0xEF	; 239
    67ea:	8c 93       	st	X, r24
	// to open global interrupt
	GINT_ENABLE_INTERRUPT();
    67ec:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <GINT_ENABLE_INTERRUPT>
	// enable OCRA interrupt
	SET_BIT(TIMSK_REG,4);
    67f0:	a9 e5       	ldi	r26, 0x59	; 89
    67f2:	b0 e0       	ldi	r27, 0x00	; 0
    67f4:	e9 e5       	ldi	r30, 0x59	; 89
    67f6:	f0 e0       	ldi	r31, 0x00	; 0
    67f8:	80 81       	ld	r24, Z
    67fa:	80 61       	ori	r24, 0x10	; 16
    67fc:	8c 93       	st	X, r24
}
    67fe:	cf 91       	pop	r28
    6800:	df 91       	pop	r29
    6802:	08 95       	ret

00006804 <Timer1_SetTime>:

void Timer1_SetTime(u32 time_delay)
{
    6804:	df 93       	push	r29
    6806:	cf 93       	push	r28
    6808:	cd b7       	in	r28, 0x3d	; 61
    680a:	de b7       	in	r29, 0x3e	; 62
    680c:	2c 97       	sbiw	r28, 0x0c	; 12
    680e:	0f b6       	in	r0, 0x3f	; 63
    6810:	f8 94       	cli
    6812:	de bf       	out	0x3e, r29	; 62
    6814:	0f be       	out	0x3f, r0	; 63
    6816:	cd bf       	out	0x3d, r28	; 61
    6818:	69 87       	std	Y+9, r22	; 0x09
    681a:	7a 87       	std	Y+10, r23	; 0x0a
    681c:	8b 87       	std	Y+11, r24	; 0x0b
    681e:	9c 87       	std	Y+12, r25	; 0x0c

		u32 ticktime=1024/16; //result in micro
    6820:	80 e4       	ldi	r24, 0x40	; 64
    6822:	90 e0       	ldi	r25, 0x00	; 0
    6824:	a0 e0       	ldi	r26, 0x00	; 0
    6826:	b0 e0       	ldi	r27, 0x00	; 0
    6828:	8d 83       	std	Y+5, r24	; 0x05
    682a:	9e 83       	std	Y+6, r25	; 0x06
    682c:	af 83       	std	Y+7, r26	; 0x07
    682e:	b8 87       	std	Y+8, r27	; 0x08
		u32 totaltiks =(time_delay *1000)/ticktime;
    6830:	89 85       	ldd	r24, Y+9	; 0x09
    6832:	9a 85       	ldd	r25, Y+10	; 0x0a
    6834:	ab 85       	ldd	r26, Y+11	; 0x0b
    6836:	bc 85       	ldd	r27, Y+12	; 0x0c
    6838:	28 ee       	ldi	r18, 0xE8	; 232
    683a:	33 e0       	ldi	r19, 0x03	; 3
    683c:	40 e0       	ldi	r20, 0x00	; 0
    683e:	50 e0       	ldi	r21, 0x00	; 0
    6840:	bc 01       	movw	r22, r24
    6842:	cd 01       	movw	r24, r26
    6844:	0e 94 de 3d 	call	0x7bbc	; 0x7bbc <__mulsi3>
    6848:	dc 01       	movw	r26, r24
    684a:	cb 01       	movw	r24, r22
    684c:	2d 81       	ldd	r18, Y+5	; 0x05
    684e:	3e 81       	ldd	r19, Y+6	; 0x06
    6850:	4f 81       	ldd	r20, Y+7	; 0x07
    6852:	58 85       	ldd	r21, Y+8	; 0x08
    6854:	bc 01       	movw	r22, r24
    6856:	cd 01       	movw	r24, r26
    6858:	0e 94 30 3e 	call	0x7c60	; 0x7c60 <__udivmodsi4>
    685c:	da 01       	movw	r26, r20
    685e:	c9 01       	movw	r24, r18
    6860:	89 83       	std	Y+1, r24	; 0x01
    6862:	9a 83       	std	Y+2, r25	; 0x02
    6864:	ab 83       	std	Y+3, r26	; 0x03
    6866:	bc 83       	std	Y+4, r27	; 0x04
		OCR1A_REG=totaltiks-1;
    6868:	ea e4       	ldi	r30, 0x4A	; 74
    686a:	f0 e0       	ldi	r31, 0x00	; 0
    686c:	89 81       	ldd	r24, Y+1	; 0x01
    686e:	9a 81       	ldd	r25, Y+2	; 0x02
    6870:	01 97       	sbiw	r24, 0x01	; 1
    6872:	91 83       	std	Z+1, r25	; 0x01
    6874:	80 83       	st	Z, r24


}
    6876:	2c 96       	adiw	r28, 0x0c	; 12
    6878:	0f b6       	in	r0, 0x3f	; 63
    687a:	f8 94       	cli
    687c:	de bf       	out	0x3e, r29	; 62
    687e:	0f be       	out	0x3f, r0	; 63
    6880:	cd bf       	out	0x3d, r28	; 61
    6882:	cf 91       	pop	r28
    6884:	df 91       	pop	r29
    6886:	08 95       	ret

00006888 <Timer1_Start>:

void Timer1_Start(void)
{
    6888:	df 93       	push	r29
    688a:	cf 93       	push	r28
    688c:	cd b7       	in	r28, 0x3d	; 61
    688e:	de b7       	in	r29, 0x3e	; 62
	// choose prescaler  1024 for timer1
	SET_BIT(TCCR1B_REG,0);
    6890:	ae e4       	ldi	r26, 0x4E	; 78
    6892:	b0 e0       	ldi	r27, 0x00	; 0
    6894:	ee e4       	ldi	r30, 0x4E	; 78
    6896:	f0 e0       	ldi	r31, 0x00	; 0
    6898:	80 81       	ld	r24, Z
    689a:	81 60       	ori	r24, 0x01	; 1
    689c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_REG,1);
    689e:	ae e4       	ldi	r26, 0x4E	; 78
    68a0:	b0 e0       	ldi	r27, 0x00	; 0
    68a2:	ee e4       	ldi	r30, 0x4E	; 78
    68a4:	f0 e0       	ldi	r31, 0x00	; 0
    68a6:	80 81       	ld	r24, Z
    68a8:	8d 7f       	andi	r24, 0xFD	; 253
    68aa:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,2);
    68ac:	ae e4       	ldi	r26, 0x4E	; 78
    68ae:	b0 e0       	ldi	r27, 0x00	; 0
    68b0:	ee e4       	ldi	r30, 0x4E	; 78
    68b2:	f0 e0       	ldi	r31, 0x00	; 0
    68b4:	80 81       	ld	r24, Z
    68b6:	84 60       	ori	r24, 0x04	; 4
    68b8:	8c 93       	st	X, r24

}
    68ba:	cf 91       	pop	r28
    68bc:	df 91       	pop	r29
    68be:	08 95       	ret

000068c0 <Timer1_Stop>:

void Timer1_Stop(void)
{
    68c0:	df 93       	push	r29
    68c2:	cf 93       	push	r28
    68c4:	cd b7       	in	r28, 0x3d	; 61
    68c6:	de b7       	in	r29, 0x3e	; 62
	// to stop timer1
	CLEAR_BIT(TCCR1B_REG,0);
    68c8:	ae e4       	ldi	r26, 0x4E	; 78
    68ca:	b0 e0       	ldi	r27, 0x00	; 0
    68cc:	ee e4       	ldi	r30, 0x4E	; 78
    68ce:	f0 e0       	ldi	r31, 0x00	; 0
    68d0:	80 81       	ld	r24, Z
    68d2:	8e 7f       	andi	r24, 0xFE	; 254
    68d4:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_REG,1);
    68d6:	ae e4       	ldi	r26, 0x4E	; 78
    68d8:	b0 e0       	ldi	r27, 0x00	; 0
    68da:	ee e4       	ldi	r30, 0x4E	; 78
    68dc:	f0 e0       	ldi	r31, 0x00	; 0
    68de:	80 81       	ld	r24, Z
    68e0:	8d 7f       	andi	r24, 0xFD	; 253
    68e2:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_REG,2);
    68e4:	ae e4       	ldi	r26, 0x4E	; 78
    68e6:	b0 e0       	ldi	r27, 0x00	; 0
    68e8:	ee e4       	ldi	r30, 0x4E	; 78
    68ea:	f0 e0       	ldi	r31, 0x00	; 0
    68ec:	80 81       	ld	r24, Z
    68ee:	8b 7f       	andi	r24, 0xFB	; 251
    68f0:	8c 93       	st	X, r24
}
    68f2:	cf 91       	pop	r28
    68f4:	df 91       	pop	r29
    68f6:	08 95       	ret

000068f8 <Timer1_FPWM_Int>:




void Timer1_FPWM_Int()
{
    68f8:	df 93       	push	r29
    68fa:	cf 93       	push	r28
    68fc:	cd b7       	in	r28, 0x3d	; 61
    68fe:	de b7       	in	r29, 0x3e	; 62


	// to choose mode FPWM using ICR1 in timer1
CLEAR_BIT(TCCR1A_REG,0);
    6900:	af e4       	ldi	r26, 0x4F	; 79
    6902:	b0 e0       	ldi	r27, 0x00	; 0
    6904:	ef e4       	ldi	r30, 0x4F	; 79
    6906:	f0 e0       	ldi	r31, 0x00	; 0
    6908:	80 81       	ld	r24, Z
    690a:	8e 7f       	andi	r24, 0xFE	; 254
    690c:	8c 93       	st	X, r24
SET_BIT(TCCR1A_REG,1);
    690e:	af e4       	ldi	r26, 0x4F	; 79
    6910:	b0 e0       	ldi	r27, 0x00	; 0
    6912:	ef e4       	ldi	r30, 0x4F	; 79
    6914:	f0 e0       	ldi	r31, 0x00	; 0
    6916:	80 81       	ld	r24, Z
    6918:	82 60       	ori	r24, 0x02	; 2
    691a:	8c 93       	st	X, r24
SET_BIT(TCCR1B_REG,3);
    691c:	ae e4       	ldi	r26, 0x4E	; 78
    691e:	b0 e0       	ldi	r27, 0x00	; 0
    6920:	ee e4       	ldi	r30, 0x4E	; 78
    6922:	f0 e0       	ldi	r31, 0x00	; 0
    6924:	80 81       	ld	r24, Z
    6926:	88 60       	ori	r24, 0x08	; 8
    6928:	8c 93       	st	X, r24
SET_BIT(TCCR1B_REG,4);
    692a:	ae e4       	ldi	r26, 0x4E	; 78
    692c:	b0 e0       	ldi	r27, 0x00	; 0
    692e:	ee e4       	ldi	r30, 0x4E	; 78
    6930:	f0 e0       	ldi	r31, 0x00	; 0
    6932:	80 81       	ld	r24, Z
    6934:	80 61       	ori	r24, 0x10	; 16
    6936:	8c 93       	st	X, r24


//to choose non inv mode

SET_BIT(TCCR1A_REG,7);
    6938:	af e4       	ldi	r26, 0x4F	; 79
    693a:	b0 e0       	ldi	r27, 0x00	; 0
    693c:	ef e4       	ldi	r30, 0x4F	; 79
    693e:	f0 e0       	ldi	r31, 0x00	; 0
    6940:	80 81       	ld	r24, Z
    6942:	80 68       	ori	r24, 0x80	; 128
    6944:	8c 93       	st	X, r24

// put the value in ICR1 to make 50Hz
ICR1_REG=1250;
    6946:	e6 e4       	ldi	r30, 0x46	; 70
    6948:	f0 e0       	ldi	r31, 0x00	; 0
    694a:	82 ee       	ldi	r24, 0xE2	; 226
    694c:	94 e0       	ldi	r25, 0x04	; 4
    694e:	91 83       	std	Z+1, r25	; 0x01
    6950:	80 83       	st	Z, r24

}
    6952:	cf 91       	pop	r28
    6954:	df 91       	pop	r29
    6956:	08 95       	ret

00006958 <Timer1_FPWM_SetTime>:



void Timer1_FPWM_SetTime(u8 duty_cycle)
{
    6958:	df 93       	push	r29
    695a:	cf 93       	push	r28
    695c:	0f 92       	push	r0
    695e:	cd b7       	in	r28, 0x3d	; 61
    6960:	de b7       	in	r29, 0x3e	; 62
    6962:	89 83       	std	Y+1, r24	; 0x01
OCR1A_REG=((duty_cycle*1250)/100)-1;
    6964:	ea e4       	ldi	r30, 0x4A	; 74
    6966:	f0 e0       	ldi	r31, 0x00	; 0
    6968:	89 81       	ldd	r24, Y+1	; 0x01
    696a:	28 2f       	mov	r18, r24
    696c:	30 e0       	ldi	r19, 0x00	; 0
    696e:	82 ee       	ldi	r24, 0xE2	; 226
    6970:	94 e0       	ldi	r25, 0x04	; 4
    6972:	ac 01       	movw	r20, r24
    6974:	24 9f       	mul	r18, r20
    6976:	c0 01       	movw	r24, r0
    6978:	25 9f       	mul	r18, r21
    697a:	90 0d       	add	r25, r0
    697c:	34 9f       	mul	r19, r20
    697e:	90 0d       	add	r25, r0
    6980:	11 24       	eor	r1, r1
    6982:	24 e6       	ldi	r18, 0x64	; 100
    6984:	30 e0       	ldi	r19, 0x00	; 0
    6986:	b9 01       	movw	r22, r18
    6988:	0e 94 1d 3e 	call	0x7c3a	; 0x7c3a <__divmodhi4>
    698c:	cb 01       	movw	r24, r22
    698e:	01 97       	sbiw	r24, 0x01	; 1
    6990:	91 83       	std	Z+1, r25	; 0x01
    6992:	80 83       	st	Z, r24
}
    6994:	0f 90       	pop	r0
    6996:	cf 91       	pop	r28
    6998:	df 91       	pop	r29
    699a:	08 95       	ret

0000699c <Timer1_FPWM_Start>:



void Timer1_FPWM_Start()
{
    699c:	df 93       	push	r29
    699e:	cf 93       	push	r28
    69a0:	cd b7       	in	r28, 0x3d	; 61
    69a2:	de b7       	in	r29, 0x3e	; 62
	// choosing prescaller 256 to make 50Hz
	CLEAR_BIT(TCCR1B_REG,0);
    69a4:	ae e4       	ldi	r26, 0x4E	; 78
    69a6:	b0 e0       	ldi	r27, 0x00	; 0
    69a8:	ee e4       	ldi	r30, 0x4E	; 78
    69aa:	f0 e0       	ldi	r31, 0x00	; 0
    69ac:	80 81       	ld	r24, Z
    69ae:	8e 7f       	andi	r24, 0xFE	; 254
    69b0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_REG,1);
    69b2:	ae e4       	ldi	r26, 0x4E	; 78
    69b4:	b0 e0       	ldi	r27, 0x00	; 0
    69b6:	ee e4       	ldi	r30, 0x4E	; 78
    69b8:	f0 e0       	ldi	r31, 0x00	; 0
    69ba:	80 81       	ld	r24, Z
    69bc:	8d 7f       	andi	r24, 0xFD	; 253
    69be:	8c 93       	st	X, r24
    SET_BIT(TCCR1B_REG,2);
    69c0:	ae e4       	ldi	r26, 0x4E	; 78
    69c2:	b0 e0       	ldi	r27, 0x00	; 0
    69c4:	ee e4       	ldi	r30, 0x4E	; 78
    69c6:	f0 e0       	ldi	r31, 0x00	; 0
    69c8:	80 81       	ld	r24, Z
    69ca:	84 60       	ori	r24, 0x04	; 4
    69cc:	8c 93       	st	X, r24
}
    69ce:	cf 91       	pop	r28
    69d0:	df 91       	pop	r29
    69d2:	08 95       	ret

000069d4 <Timer1_FPWM_Stop>:



void Timer1_FPWM_Stop()
{
    69d4:	df 93       	push	r29
    69d6:	cf 93       	push	r28
    69d8:	cd b7       	in	r28, 0x3d	; 61
    69da:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR1B_REG,0);
    69dc:	ae e4       	ldi	r26, 0x4E	; 78
    69de:	b0 e0       	ldi	r27, 0x00	; 0
    69e0:	ee e4       	ldi	r30, 0x4E	; 78
    69e2:	f0 e0       	ldi	r31, 0x00	; 0
    69e4:	80 81       	ld	r24, Z
    69e6:	8e 7f       	andi	r24, 0xFE	; 254
    69e8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_REG,1);
    69ea:	ae e4       	ldi	r26, 0x4E	; 78
    69ec:	b0 e0       	ldi	r27, 0x00	; 0
    69ee:	ee e4       	ldi	r30, 0x4E	; 78
    69f0:	f0 e0       	ldi	r31, 0x00	; 0
    69f2:	80 81       	ld	r24, Z
    69f4:	8d 7f       	andi	r24, 0xFD	; 253
    69f6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_REG,2);
    69f8:	ae e4       	ldi	r26, 0x4E	; 78
    69fa:	b0 e0       	ldi	r27, 0x00	; 0
    69fc:	ee e4       	ldi	r30, 0x4E	; 78
    69fe:	f0 e0       	ldi	r31, 0x00	; 0
    6a00:	80 81       	ld	r24, Z
    6a02:	8b 7f       	andi	r24, 0xFB	; 251
    6a04:	8c 93       	st	X, r24
}
    6a06:	cf 91       	pop	r28
    6a08:	df 91       	pop	r29
    6a0a:	08 95       	ret

00006a0c <Timer0_Delay>:
u8 check_no=0;

static void (*Timer0_INT0)(void)=NULL;

void Timer0_Delay(f32 delay_time_ms,void(*ptr)(void))
{
    6a0c:	df 93       	push	r29
    6a0e:	cf 93       	push	r28
    6a10:	cd b7       	in	r28, 0x3d	; 61
    6a12:	de b7       	in	r29, 0x3e	; 62
    6a14:	2e 97       	sbiw	r28, 0x0e	; 14
    6a16:	0f b6       	in	r0, 0x3f	; 63
    6a18:	f8 94       	cli
    6a1a:	de bf       	out	0x3e, r29	; 62
    6a1c:	0f be       	out	0x3f, r0	; 63
    6a1e:	cd bf       	out	0x3d, r28	; 61
    6a20:	69 87       	std	Y+9, r22	; 0x09
    6a22:	7a 87       	std	Y+10, r23	; 0x0a
    6a24:	8b 87       	std	Y+11, r24	; 0x0b
    6a26:	9c 87       	std	Y+12, r25	; 0x0c
    6a28:	5e 87       	std	Y+14, r21	; 0x0e
    6a2a:	4d 87       	std	Y+13, r20	; 0x0d
GINT_ENABLE_INTERRUPT();
    6a2c:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <GINT_ENABLE_INTERRUPT>
	Timer0_INT0=ptr;
    6a30:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a32:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a34:	90 93 3f 03 	sts	0x033F, r25
    6a38:	80 93 3e 03 	sts	0x033E, r24
	f32 loc_delay_time=delay_time_ms/1000;
    6a3c:	69 85       	ldd	r22, Y+9	; 0x09
    6a3e:	7a 85       	ldd	r23, Y+10	; 0x0a
    6a40:	8b 85       	ldd	r24, Y+11	; 0x0b
    6a42:	9c 85       	ldd	r25, Y+12	; 0x0c
    6a44:	20 e0       	ldi	r18, 0x00	; 0
    6a46:	30 e0       	ldi	r19, 0x00	; 0
    6a48:	4a e7       	ldi	r20, 0x7A	; 122
    6a4a:	54 e4       	ldi	r21, 0x44	; 68
    6a4c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6a50:	dc 01       	movw	r26, r24
    6a52:	cb 01       	movw	r24, r22
    6a54:	8d 83       	std	Y+5, r24	; 0x05
    6a56:	9e 83       	std	Y+6, r25	; 0x06
    6a58:	af 83       	std	Y+7, r26	; 0x07
    6a5a:	b8 87       	std	Y+8, r27	; 0x08

	f32 ovf=0.016384;
    6a5c:	8d eb       	ldi	r24, 0xBD	; 189
    6a5e:	97 e3       	ldi	r25, 0x37	; 55
    6a60:	a6 e8       	ldi	r26, 0x86	; 134
    6a62:	bc e3       	ldi	r27, 0x3C	; 60
    6a64:	89 83       	std	Y+1, r24	; 0x01
    6a66:	9a 83       	std	Y+2, r25	; 0x02
    6a68:	ab 83       	std	Y+3, r26	; 0x03
    6a6a:	bc 83       	std	Y+4, r27	; 0x04
if(loc_delay_time>ovf)
    6a6c:	6d 81       	ldd	r22, Y+5	; 0x05
    6a6e:	7e 81       	ldd	r23, Y+6	; 0x06
    6a70:	8f 81       	ldd	r24, Y+7	; 0x07
    6a72:	98 85       	ldd	r25, Y+8	; 0x08
    6a74:	29 81       	ldd	r18, Y+1	; 0x01
    6a76:	3a 81       	ldd	r19, Y+2	; 0x02
    6a78:	4b 81       	ldd	r20, Y+3	; 0x03
    6a7a:	5c 81       	ldd	r21, Y+4	; 0x04
    6a7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6a80:	18 16       	cp	r1, r24
    6a82:	0c f0       	brlt	.+2      	; 0x6a86 <Timer0_Delay+0x7a>
    6a84:	4f c0       	rjmp	.+158    	; 0x6b24 <Timer0_Delay+0x118>

{
	check_no=1;
    6a86:	81 e0       	ldi	r24, 0x01	; 1
    6a88:	80 93 3d 03 	sts	0x033D, r24

	no_of_ovf =loc_delay_time/ovf;
    6a8c:	6d 81       	ldd	r22, Y+5	; 0x05
    6a8e:	7e 81       	ldd	r23, Y+6	; 0x06
    6a90:	8f 81       	ldd	r24, Y+7	; 0x07
    6a92:	98 85       	ldd	r25, Y+8	; 0x08
    6a94:	29 81       	ldd	r18, Y+1	; 0x01
    6a96:	3a 81       	ldd	r19, Y+2	; 0x02
    6a98:	4b 81       	ldd	r20, Y+3	; 0x03
    6a9a:	5c 81       	ldd	r21, Y+4	; 0x04
    6a9c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6aa0:	dc 01       	movw	r26, r24
    6aa2:	cb 01       	movw	r24, r22
    6aa4:	bc 01       	movw	r22, r24
    6aa6:	cd 01       	movw	r24, r26
    6aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6aac:	dc 01       	movw	r26, r24
    6aae:	cb 01       	movw	r24, r22
    6ab0:	90 93 4f 03 	sts	0x034F, r25
    6ab4:	80 93 4e 03 	sts	0x034E, r24


			rem=	fmod((loc_delay_time/ovf)*100,100);
    6ab8:	6d 81       	ldd	r22, Y+5	; 0x05
    6aba:	7e 81       	ldd	r23, Y+6	; 0x06
    6abc:	8f 81       	ldd	r24, Y+7	; 0x07
    6abe:	98 85       	ldd	r25, Y+8	; 0x08
    6ac0:	29 81       	ldd	r18, Y+1	; 0x01
    6ac2:	3a 81       	ldd	r19, Y+2	; 0x02
    6ac4:	4b 81       	ldd	r20, Y+3	; 0x03
    6ac6:	5c 81       	ldd	r21, Y+4	; 0x04
    6ac8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6acc:	dc 01       	movw	r26, r24
    6ace:	cb 01       	movw	r24, r22
    6ad0:	bc 01       	movw	r22, r24
    6ad2:	cd 01       	movw	r24, r26
    6ad4:	20 e0       	ldi	r18, 0x00	; 0
    6ad6:	30 e0       	ldi	r19, 0x00	; 0
    6ad8:	48 ec       	ldi	r20, 0xC8	; 200
    6ada:	52 e4       	ldi	r21, 0x42	; 66
    6adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ae0:	dc 01       	movw	r26, r24
    6ae2:	cb 01       	movw	r24, r22
    6ae4:	bc 01       	movw	r22, r24
    6ae6:	cd 01       	movw	r24, r26
    6ae8:	20 e0       	ldi	r18, 0x00	; 0
    6aea:	30 e0       	ldi	r19, 0x00	; 0
    6aec:	48 ec       	ldi	r20, 0xC8	; 200
    6aee:	52 e4       	ldi	r21, 0x42	; 66
    6af0:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <fmod>
    6af4:	dc 01       	movw	r26, r24
    6af6:	cb 01       	movw	r24, r22
    6af8:	bc 01       	movw	r22, r24
    6afa:	cd 01       	movw	r24, r26
    6afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b00:	dc 01       	movw	r26, r24
    6b02:	cb 01       	movw	r24, r22
    6b04:	80 93 50 03 	sts	0x0350, r24


			GINT_ENABLE_INTERRUPT();
    6b08:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <GINT_ENABLE_INTERRUPT>
			SET_BIT(TIMSK_REG,0); //to enable inturrept
    6b0c:	a9 e5       	ldi	r26, 0x59	; 89
    6b0e:	b0 e0       	ldi	r27, 0x00	; 0
    6b10:	e9 e5       	ldi	r30, 0x59	; 89
    6b12:	f0 e0       	ldi	r31, 0x00	; 0
    6b14:	80 81       	ld	r24, Z
    6b16:	81 60       	ori	r24, 0x01	; 1
    6b18:	8c 93       	st	X, r24


			TCCR0_REG=5;
    6b1a:	e3 e5       	ldi	r30, 0x53	; 83
    6b1c:	f0 e0       	ldi	r31, 0x00	; 0
    6b1e:	85 e0       	ldi	r24, 0x05	; 5
    6b20:	80 83       	st	Z, r24
    6b22:	60 c0       	rjmp	.+192    	; 0x6be4 <Timer0_Delay+0x1d8>
			//TCNT0=256-rem;
}
else if (loc_delay_time<ovf)
    6b24:	6d 81       	ldd	r22, Y+5	; 0x05
    6b26:	7e 81       	ldd	r23, Y+6	; 0x06
    6b28:	8f 81       	ldd	r24, Y+7	; 0x07
    6b2a:	98 85       	ldd	r25, Y+8	; 0x08
    6b2c:	29 81       	ldd	r18, Y+1	; 0x01
    6b2e:	3a 81       	ldd	r19, Y+2	; 0x02
    6b30:	4b 81       	ldd	r20, Y+3	; 0x03
    6b32:	5c 81       	ldd	r21, Y+4	; 0x04
    6b34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6b38:	88 23       	and	r24, r24
    6b3a:	0c f0       	brlt	.+2      	; 0x6b3e <Timer0_Delay+0x132>
    6b3c:	53 c0       	rjmp	.+166    	; 0x6be4 <Timer0_Delay+0x1d8>

{
	   check_no=2;
    6b3e:	82 e0       	ldi	r24, 0x02	; 2
    6b40:	80 93 3d 03 	sts	0x033D, r24

		no_of_ovf =loc_delay_time/ovf;
    6b44:	6d 81       	ldd	r22, Y+5	; 0x05
    6b46:	7e 81       	ldd	r23, Y+6	; 0x06
    6b48:	8f 81       	ldd	r24, Y+7	; 0x07
    6b4a:	98 85       	ldd	r25, Y+8	; 0x08
    6b4c:	29 81       	ldd	r18, Y+1	; 0x01
    6b4e:	3a 81       	ldd	r19, Y+2	; 0x02
    6b50:	4b 81       	ldd	r20, Y+3	; 0x03
    6b52:	5c 81       	ldd	r21, Y+4	; 0x04
    6b54:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6b58:	dc 01       	movw	r26, r24
    6b5a:	cb 01       	movw	r24, r22
    6b5c:	bc 01       	movw	r22, r24
    6b5e:	cd 01       	movw	r24, r26
    6b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b64:	dc 01       	movw	r26, r24
    6b66:	cb 01       	movw	r24, r22
    6b68:	90 93 4f 03 	sts	0x034F, r25
    6b6c:	80 93 4e 03 	sts	0x034E, r24


		rem=	fmod((loc_delay_time/ovf)*100,100);
    6b70:	6d 81       	ldd	r22, Y+5	; 0x05
    6b72:	7e 81       	ldd	r23, Y+6	; 0x06
    6b74:	8f 81       	ldd	r24, Y+7	; 0x07
    6b76:	98 85       	ldd	r25, Y+8	; 0x08
    6b78:	29 81       	ldd	r18, Y+1	; 0x01
    6b7a:	3a 81       	ldd	r19, Y+2	; 0x02
    6b7c:	4b 81       	ldd	r20, Y+3	; 0x03
    6b7e:	5c 81       	ldd	r21, Y+4	; 0x04
    6b80:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6b84:	dc 01       	movw	r26, r24
    6b86:	cb 01       	movw	r24, r22
    6b88:	bc 01       	movw	r22, r24
    6b8a:	cd 01       	movw	r24, r26
    6b8c:	20 e0       	ldi	r18, 0x00	; 0
    6b8e:	30 e0       	ldi	r19, 0x00	; 0
    6b90:	48 ec       	ldi	r20, 0xC8	; 200
    6b92:	52 e4       	ldi	r21, 0x42	; 66
    6b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b98:	dc 01       	movw	r26, r24
    6b9a:	cb 01       	movw	r24, r22
    6b9c:	bc 01       	movw	r22, r24
    6b9e:	cd 01       	movw	r24, r26
    6ba0:	20 e0       	ldi	r18, 0x00	; 0
    6ba2:	30 e0       	ldi	r19, 0x00	; 0
    6ba4:	48 ec       	ldi	r20, 0xC8	; 200
    6ba6:	52 e4       	ldi	r21, 0x42	; 66
    6ba8:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <fmod>
    6bac:	dc 01       	movw	r26, r24
    6bae:	cb 01       	movw	r24, r22
    6bb0:	bc 01       	movw	r22, r24
    6bb2:	cd 01       	movw	r24, r26
    6bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6bb8:	dc 01       	movw	r26, r24
    6bba:	cb 01       	movw	r24, r22
    6bbc:	80 93 50 03 	sts	0x0350, r24


		GINT_ENABLE_INTERRUPT();
    6bc0:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <GINT_ENABLE_INTERRUPT>
		SET_BIT(TIMSK_REG,0); //to enable inturrept
    6bc4:	a9 e5       	ldi	r26, 0x59	; 89
    6bc6:	b0 e0       	ldi	r27, 0x00	; 0
    6bc8:	e9 e5       	ldi	r30, 0x59	; 89
    6bca:	f0 e0       	ldi	r31, 0x00	; 0
    6bcc:	80 81       	ld	r24, Z
    6bce:	81 60       	ori	r24, 0x01	; 1
    6bd0:	8c 93       	st	X, r24


		TCCR0_REG=5;
    6bd2:	e3 e5       	ldi	r30, 0x53	; 83
    6bd4:	f0 e0       	ldi	r31, 0x00	; 0
    6bd6:	85 e0       	ldi	r24, 0x05	; 5
    6bd8:	80 83       	st	Z, r24
		TCNT0=rem;
    6bda:	e2 e5       	ldi	r30, 0x52	; 82
    6bdc:	f0 e0       	ldi	r31, 0x00	; 0
    6bde:	80 91 50 03 	lds	r24, 0x0350
    6be2:	80 83       	st	Z, r24
else {

	//do nothing
}

}
    6be4:	2e 96       	adiw	r28, 0x0e	; 14
    6be6:	0f b6       	in	r0, 0x3f	; 63
    6be8:	f8 94       	cli
    6bea:	de bf       	out	0x3e, r29	; 62
    6bec:	0f be       	out	0x3f, r0	; 63
    6bee:	cd bf       	out	0x3d, r28	; 61
    6bf0:	cf 91       	pop	r28
    6bf2:	df 91       	pop	r29
    6bf4:	08 95       	ret

00006bf6 <Delay>:

void Delay(u16 delay_number){
    6bf6:	df 93       	push	r29
    6bf8:	cf 93       	push	r28
    6bfa:	cd b7       	in	r28, 0x3d	; 61
    6bfc:	de b7       	in	r29, 0x3e	; 62
    6bfe:	2a 97       	sbiw	r28, 0x0a	; 10
    6c00:	0f b6       	in	r0, 0x3f	; 63
    6c02:	f8 94       	cli
    6c04:	de bf       	out	0x3e, r29	; 62
    6c06:	0f be       	out	0x3f, r0	; 63
    6c08:	cd bf       	out	0x3d, r28	; 61
    6c0a:	9a 87       	std	Y+10, r25	; 0x0a
    6c0c:	89 87       	std	Y+9, r24	; 0x09


		f32 loc_delay_time=delay_number/1000;
    6c0e:	89 85       	ldd	r24, Y+9	; 0x09
    6c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c12:	28 ee       	ldi	r18, 0xE8	; 232
    6c14:	33 e0       	ldi	r19, 0x03	; 3
    6c16:	b9 01       	movw	r22, r18
    6c18:	0e 94 09 3e 	call	0x7c12	; 0x7c12 <__udivmodhi4>
    6c1c:	cb 01       	movw	r24, r22
    6c1e:	cc 01       	movw	r24, r24
    6c20:	a0 e0       	ldi	r26, 0x00	; 0
    6c22:	b0 e0       	ldi	r27, 0x00	; 0
    6c24:	bc 01       	movw	r22, r24
    6c26:	cd 01       	movw	r24, r26
    6c28:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    6c2c:	dc 01       	movw	r26, r24
    6c2e:	cb 01       	movw	r24, r22
    6c30:	8d 83       	std	Y+5, r24	; 0x05
    6c32:	9e 83       	std	Y+6, r25	; 0x06
    6c34:	af 83       	std	Y+7, r26	; 0x07
    6c36:	b8 87       	std	Y+8, r27	; 0x08

		f32 ovf=0.016384;
    6c38:	8d eb       	ldi	r24, 0xBD	; 189
    6c3a:	97 e3       	ldi	r25, 0x37	; 55
    6c3c:	a6 e8       	ldi	r26, 0x86	; 134
    6c3e:	bc e3       	ldi	r27, 0x3C	; 60
    6c40:	89 83       	std	Y+1, r24	; 0x01
    6c42:	9a 83       	std	Y+2, r25	; 0x02
    6c44:	ab 83       	std	Y+3, r26	; 0x03
    6c46:	bc 83       	std	Y+4, r27	; 0x04

		no_of_ovf =loc_delay_time/ovf;
    6c48:	6d 81       	ldd	r22, Y+5	; 0x05
    6c4a:	7e 81       	ldd	r23, Y+6	; 0x06
    6c4c:	8f 81       	ldd	r24, Y+7	; 0x07
    6c4e:	98 85       	ldd	r25, Y+8	; 0x08
    6c50:	29 81       	ldd	r18, Y+1	; 0x01
    6c52:	3a 81       	ldd	r19, Y+2	; 0x02
    6c54:	4b 81       	ldd	r20, Y+3	; 0x03
    6c56:	5c 81       	ldd	r21, Y+4	; 0x04
    6c58:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6c5c:	dc 01       	movw	r26, r24
    6c5e:	cb 01       	movw	r24, r22
    6c60:	bc 01       	movw	r22, r24
    6c62:	cd 01       	movw	r24, r26
    6c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c68:	dc 01       	movw	r26, r24
    6c6a:	cb 01       	movw	r24, r22
    6c6c:	90 93 4f 03 	sts	0x034F, r25
    6c70:	80 93 4e 03 	sts	0x034E, r24
		rem=	fmod((loc_delay_time/ovf)*100,100);
    6c74:	6d 81       	ldd	r22, Y+5	; 0x05
    6c76:	7e 81       	ldd	r23, Y+6	; 0x06
    6c78:	8f 81       	ldd	r24, Y+7	; 0x07
    6c7a:	98 85       	ldd	r25, Y+8	; 0x08
    6c7c:	29 81       	ldd	r18, Y+1	; 0x01
    6c7e:	3a 81       	ldd	r19, Y+2	; 0x02
    6c80:	4b 81       	ldd	r20, Y+3	; 0x03
    6c82:	5c 81       	ldd	r21, Y+4	; 0x04
    6c84:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6c88:	dc 01       	movw	r26, r24
    6c8a:	cb 01       	movw	r24, r22
    6c8c:	bc 01       	movw	r22, r24
    6c8e:	cd 01       	movw	r24, r26
    6c90:	20 e0       	ldi	r18, 0x00	; 0
    6c92:	30 e0       	ldi	r19, 0x00	; 0
    6c94:	48 ec       	ldi	r20, 0xC8	; 200
    6c96:	52 e4       	ldi	r21, 0x42	; 66
    6c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c9c:	dc 01       	movw	r26, r24
    6c9e:	cb 01       	movw	r24, r22
    6ca0:	bc 01       	movw	r22, r24
    6ca2:	cd 01       	movw	r24, r26
    6ca4:	20 e0       	ldi	r18, 0x00	; 0
    6ca6:	30 e0       	ldi	r19, 0x00	; 0
    6ca8:	48 ec       	ldi	r20, 0xC8	; 200
    6caa:	52 e4       	ldi	r21, 0x42	; 66
    6cac:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <fmod>
    6cb0:	dc 01       	movw	r26, r24
    6cb2:	cb 01       	movw	r24, r22
    6cb4:	bc 01       	movw	r22, r24
    6cb6:	cd 01       	movw	r24, r26
    6cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6cbc:	dc 01       	movw	r26, r24
    6cbe:	cb 01       	movw	r24, r22
    6cc0:	80 93 50 03 	sts	0x0350, r24

	TCCR0_REG = 5; /* Timer0, normal mode, /1024 prescalar */
    6cc4:	e3 e5       	ldi	r30, 0x53	; 83
    6cc6:	f0 e0       	ldi	r31, 0x00	; 0
    6cc8:	85 e0       	ldi	r24, 0x05	; 5
    6cca:	80 83       	st	Z, r24
		TCNT0_REG = rem;
    6ccc:	e2 e5       	ldi	r30, 0x52	; 82
    6cce:	f0 e0       	ldi	r31, 0x00	; 0
    6cd0:	80 91 50 03 	lds	r24, 0x0350
    6cd4:	80 83       	st	Z, r24
    6cd6:	1b c0       	rjmp	.+54     	; 0x6d0e <Delay+0x118>
		while(tot_overflow<no_of_ovf)
		{/* Load TCNT0, count for 10ms */
		while((TIFR_REG&0x01)==0);  /* Wait for TOV0 to roll over */
    6cd8:	e8 e5       	ldi	r30, 0x58	; 88
    6cda:	f0 e0       	ldi	r31, 0x00	; 0
    6cdc:	80 81       	ld	r24, Z
    6cde:	88 2f       	mov	r24, r24
    6ce0:	90 e0       	ldi	r25, 0x00	; 0
    6ce2:	81 70       	andi	r24, 0x01	; 1
    6ce4:	90 70       	andi	r25, 0x00	; 0
    6ce6:	00 97       	sbiw	r24, 0x00	; 0
    6ce8:	b9 f3       	breq	.-18     	; 0x6cd8 <Delay+0xe2>
		TCNT0 = rem;
    6cea:	e2 e5       	ldi	r30, 0x52	; 82
    6cec:	f0 e0       	ldi	r31, 0x00	; 0
    6cee:	80 91 50 03 	lds	r24, 0x0350
    6cf2:	80 83       	st	Z, r24
tot_overflow++;
    6cf4:	80 91 3b 03 	lds	r24, 0x033B
    6cf8:	90 91 3c 03 	lds	r25, 0x033C
    6cfc:	01 96       	adiw	r24, 0x01	; 1
    6cfe:	90 93 3c 03 	sts	0x033C, r25
    6d02:	80 93 3b 03 	sts	0x033B, r24
		TIFR_REG = 0x1;
    6d06:	e8 e5       	ldi	r30, 0x58	; 88
    6d08:	f0 e0       	ldi	r31, 0x00	; 0
    6d0a:	81 e0       	ldi	r24, 0x01	; 1
    6d0c:	80 83       	st	Z, r24
		no_of_ovf =loc_delay_time/ovf;
		rem=	fmod((loc_delay_time/ovf)*100,100);

	TCCR0_REG = 5; /* Timer0, normal mode, /1024 prescalar */
		TCNT0_REG = rem;
		while(tot_overflow<no_of_ovf)
    6d0e:	20 91 3b 03 	lds	r18, 0x033B
    6d12:	30 91 3c 03 	lds	r19, 0x033C
    6d16:	80 91 4e 03 	lds	r24, 0x034E
    6d1a:	90 91 4f 03 	lds	r25, 0x034F
    6d1e:	28 17       	cp	r18, r24
    6d20:	39 07       	cpc	r19, r25
    6d22:	d0 f2       	brcs	.-76     	; 0x6cd8 <Delay+0xe2>
		while((TIFR_REG&0x01)==0);  /* Wait for TOV0 to roll over */
		TCNT0 = rem;
tot_overflow++;
		TIFR_REG = 0x1;
}
		TCCR0_REG = 0;
    6d24:	e3 e5       	ldi	r30, 0x53	; 83
    6d26:	f0 e0       	ldi	r31, 0x00	; 0
    6d28:	10 82       	st	Z, r1
		tot_overflow=0;
    6d2a:	10 92 3c 03 	sts	0x033C, r1
    6d2e:	10 92 3b 03 	sts	0x033B, r1
}
    6d32:	2a 96       	adiw	r28, 0x0a	; 10
    6d34:	0f b6       	in	r0, 0x3f	; 63
    6d36:	f8 94       	cli
    6d38:	de bf       	out	0x3e, r29	; 62
    6d3a:	0f be       	out	0x3f, r0	; 63
    6d3c:	cd bf       	out	0x3d, r28	; 61
    6d3e:	cf 91       	pop	r28
    6d40:	df 91       	pop	r29
    6d42:	08 95       	ret

00006d44 <Timer0_FPWM_Int>:
}
*/



void Timer0_FPWM_Int(){
    6d44:	df 93       	push	r29
    6d46:	cf 93       	push	r28
    6d48:	cd b7       	in	r28, 0x3d	; 61
    6d4a:	de b7       	in	r29, 0x3e	; 62
	// choose the mode of fpwm in timer0

	SET_BIT(TCCR0_REG,6);
    6d4c:	a3 e5       	ldi	r26, 0x53	; 83
    6d4e:	b0 e0       	ldi	r27, 0x00	; 0
    6d50:	e3 e5       	ldi	r30, 0x53	; 83
    6d52:	f0 e0       	ldi	r31, 0x00	; 0
    6d54:	80 81       	ld	r24, Z
    6d56:	80 64       	ori	r24, 0x40	; 64
    6d58:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,3);
    6d5a:	a3 e5       	ldi	r26, 0x53	; 83
    6d5c:	b0 e0       	ldi	r27, 0x00	; 0
    6d5e:	e3 e5       	ldi	r30, 0x53	; 83
    6d60:	f0 e0       	ldi	r31, 0x00	; 0
    6d62:	80 81       	ld	r24, Z
    6d64:	88 60       	ori	r24, 0x08	; 8
    6d66:	8c 93       	st	X, r24
	  // to choose mode of non inverting in fpwm
	 CLEAR_BIT(TCCR0_REG,4);
    6d68:	a3 e5       	ldi	r26, 0x53	; 83
    6d6a:	b0 e0       	ldi	r27, 0x00	; 0
    6d6c:	e3 e5       	ldi	r30, 0x53	; 83
    6d6e:	f0 e0       	ldi	r31, 0x00	; 0
    6d70:	80 81       	ld	r24, Z
    6d72:	8f 7e       	andi	r24, 0xEF	; 239
    6d74:	8c 93       	st	X, r24
	 SET_BIT(TCCR0_REG,5);
    6d76:	a3 e5       	ldi	r26, 0x53	; 83
    6d78:	b0 e0       	ldi	r27, 0x00	; 0
    6d7a:	e3 e5       	ldi	r30, 0x53	; 83
    6d7c:	f0 e0       	ldi	r31, 0x00	; 0
    6d7e:	80 81       	ld	r24, Z
    6d80:	80 62       	ori	r24, 0x20	; 32
    6d82:	8c 93       	st	X, r24

	GINT_ENABLE_INTERRUPT();
    6d84:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <GINT_ENABLE_INTERRUPT>

	SET_BIT(TIMSK_REG,0);
    6d88:	a9 e5       	ldi	r26, 0x59	; 89
    6d8a:	b0 e0       	ldi	r27, 0x00	; 0
    6d8c:	e9 e5       	ldi	r30, 0x59	; 89
    6d8e:	f0 e0       	ldi	r31, 0x00	; 0
    6d90:	80 81       	ld	r24, Z
    6d92:	81 60       	ori	r24, 0x01	; 1
    6d94:	8c 93       	st	X, r24
	// make pin 3 in portB as output to make pwm out from this pin
	SET_BIT(DDRB,3);
    6d96:	a7 e3       	ldi	r26, 0x37	; 55
    6d98:	b0 e0       	ldi	r27, 0x00	; 0
    6d9a:	e7 e3       	ldi	r30, 0x37	; 55
    6d9c:	f0 e0       	ldi	r31, 0x00	; 0
    6d9e:	80 81       	ld	r24, Z
    6da0:	88 60       	ori	r24, 0x08	; 8
    6da2:	8c 93       	st	X, r24
}
    6da4:	cf 91       	pop	r28
    6da6:	df 91       	pop	r29
    6da8:	08 95       	ret

00006daa <Timer0_FPWM_Start>:


void Timer0_FPWM_Start(){
    6daa:	df 93       	push	r29
    6dac:	cf 93       	push	r28
    6dae:	cd b7       	in	r28, 0x3d	; 61
    6db0:	de b7       	in	r29, 0x3e	; 62
	// to start the timer prescaler 256
	TCCR0_REG|= 4;
    6db2:	a3 e5       	ldi	r26, 0x53	; 83
    6db4:	b0 e0       	ldi	r27, 0x00	; 0
    6db6:	e3 e5       	ldi	r30, 0x53	; 83
    6db8:	f0 e0       	ldi	r31, 0x00	; 0
    6dba:	80 81       	ld	r24, Z
    6dbc:	84 60       	ori	r24, 0x04	; 4
    6dbe:	8c 93       	st	X, r24
}
    6dc0:	cf 91       	pop	r28
    6dc2:	df 91       	pop	r29
    6dc4:	08 95       	ret

00006dc6 <Timer0_Set_Duty>:



void Timer0_Set_Duty(u8 duty_cycle){
    6dc6:	df 93       	push	r29
    6dc8:	cf 93       	push	r28
    6dca:	0f 92       	push	r0
    6dcc:	cd b7       	in	r28, 0x3d	; 61
    6dce:	de b7       	in	r29, 0x3e	; 62
    6dd0:	89 83       	std	Y+1, r24	; 0x01
	OCR0_REG=((duty_cycle*256)/100)-1;
    6dd2:	ec e5       	ldi	r30, 0x5C	; 92
    6dd4:	f0 e0       	ldi	r31, 0x00	; 0
    6dd6:	89 81       	ldd	r24, Y+1	; 0x01
    6dd8:	88 2f       	mov	r24, r24
    6dda:	90 e0       	ldi	r25, 0x00	; 0
    6ddc:	98 2f       	mov	r25, r24
    6dde:	88 27       	eor	r24, r24
    6de0:	24 e6       	ldi	r18, 0x64	; 100
    6de2:	30 e0       	ldi	r19, 0x00	; 0
    6de4:	b9 01       	movw	r22, r18
    6de6:	0e 94 1d 3e 	call	0x7c3a	; 0x7c3a <__divmodhi4>
    6dea:	cb 01       	movw	r24, r22
    6dec:	81 50       	subi	r24, 0x01	; 1
    6dee:	80 83       	st	Z, r24
}
    6df0:	0f 90       	pop	r0
    6df2:	cf 91       	pop	r28
    6df4:	df 91       	pop	r29
    6df6:	08 95       	ret

00006df8 <Timer0_FPWM_Stop>:

void Timer0_FPWM_Stop(){
    6df8:	df 93       	push	r29
    6dfa:	cf 93       	push	r28
    6dfc:	cd b7       	in	r28, 0x3d	; 61
    6dfe:	de b7       	in	r29, 0x3e	; 62
	// to stop the timer

	CLEAR_BIT(TCCR0_REG,0);
    6e00:	a3 e5       	ldi	r26, 0x53	; 83
    6e02:	b0 e0       	ldi	r27, 0x00	; 0
    6e04:	e3 e5       	ldi	r30, 0x53	; 83
    6e06:	f0 e0       	ldi	r31, 0x00	; 0
    6e08:	80 81       	ld	r24, Z
    6e0a:	8e 7f       	andi	r24, 0xFE	; 254
    6e0c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_REG,1);
    6e0e:	a3 e5       	ldi	r26, 0x53	; 83
    6e10:	b0 e0       	ldi	r27, 0x00	; 0
    6e12:	e3 e5       	ldi	r30, 0x53	; 83
    6e14:	f0 e0       	ldi	r31, 0x00	; 0
    6e16:	80 81       	ld	r24, Z
    6e18:	8d 7f       	andi	r24, 0xFD	; 253
    6e1a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_REG,2);
    6e1c:	a3 e5       	ldi	r26, 0x53	; 83
    6e1e:	b0 e0       	ldi	r27, 0x00	; 0
    6e20:	e3 e5       	ldi	r30, 0x53	; 83
    6e22:	f0 e0       	ldi	r31, 0x00	; 0
    6e24:	80 81       	ld	r24, Z
    6e26:	8b 7f       	andi	r24, 0xFB	; 251
    6e28:	8c 93       	st	X, r24
}
    6e2a:	cf 91       	pop	r28
    6e2c:	df 91       	pop	r29
    6e2e:	08 95       	ret

00006e30 <__vector_9>:


ISR(TIMER0_OVF_vect)
{
    6e30:	1f 92       	push	r1
    6e32:	0f 92       	push	r0
    6e34:	0f b6       	in	r0, 0x3f	; 63
    6e36:	0f 92       	push	r0
    6e38:	11 24       	eor	r1, r1
    6e3a:	2f 93       	push	r18
    6e3c:	3f 93       	push	r19
    6e3e:	4f 93       	push	r20
    6e40:	5f 93       	push	r21
    6e42:	6f 93       	push	r22
    6e44:	7f 93       	push	r23
    6e46:	8f 93       	push	r24
    6e48:	9f 93       	push	r25
    6e4a:	af 93       	push	r26
    6e4c:	bf 93       	push	r27
    6e4e:	ef 93       	push	r30
    6e50:	ff 93       	push	r31
    6e52:	df 93       	push	r29
    6e54:	cf 93       	push	r28
    6e56:	cd b7       	in	r28, 0x3d	; 61
    6e58:	de b7       	in	r29, 0x3e	; 62
if(Timer0_INT0!=NULL)
    6e5a:	80 91 3e 03 	lds	r24, 0x033E
    6e5e:	90 91 3f 03 	lds	r25, 0x033F
    6e62:	00 97       	sbiw	r24, 0x00	; 0
    6e64:	09 f4       	brne	.+2      	; 0x6e68 <__vector_9+0x38>
    6e66:	46 c0       	rjmp	.+140    	; 0x6ef4 <__vector_9+0xc4>
{

if(check_no==1)
    6e68:	80 91 3d 03 	lds	r24, 0x033D
    6e6c:	81 30       	cpi	r24, 0x01	; 1
    6e6e:	f1 f4       	brne	.+60     	; 0x6eac <__vector_9+0x7c>
{

	if(tot_overflow==no_of_ovf){
    6e70:	20 91 3b 03 	lds	r18, 0x033B
    6e74:	30 91 3c 03 	lds	r19, 0x033C
    6e78:	80 91 4e 03 	lds	r24, 0x034E
    6e7c:	90 91 4f 03 	lds	r25, 0x034F
    6e80:	28 17       	cp	r18, r24
    6e82:	39 07       	cpc	r19, r25
    6e84:	49 f4       	brne	.+18     	; 0x6e98 <__vector_9+0x68>


		Timer0_INT0();
    6e86:	e0 91 3e 03 	lds	r30, 0x033E
    6e8a:	f0 91 3f 03 	lds	r31, 0x033F
    6e8e:	09 95       	icall
			  tot_overflow=0;
    6e90:	10 92 3c 03 	sts	0x033C, r1
    6e94:	10 92 3b 03 	sts	0x033B, r1

			//  TCNT0=256-rem;

			 // Timer0_INT0=NULL;
	}
	tot_overflow++;
    6e98:	80 91 3b 03 	lds	r24, 0x033B
    6e9c:	90 91 3c 03 	lds	r25, 0x033C
    6ea0:	01 96       	adiw	r24, 0x01	; 1
    6ea2:	90 93 3c 03 	sts	0x033C, r25
    6ea6:	80 93 3b 03 	sts	0x033B, r24
    6eaa:	24 c0       	rjmp	.+72     	; 0x6ef4 <__vector_9+0xc4>
}

else if(check_no==2)
    6eac:	80 91 3d 03 	lds	r24, 0x033D
    6eb0:	82 30       	cpi	r24, 0x02	; 2
    6eb2:	01 f5       	brne	.+64     	; 0x6ef4 <__vector_9+0xc4>

{
	if(tot_overflow==(u8)no_of_ovf){
    6eb4:	80 91 4e 03 	lds	r24, 0x034E
    6eb8:	90 91 4f 03 	lds	r25, 0x034F
    6ebc:	28 2f       	mov	r18, r24
    6ebe:	30 e0       	ldi	r19, 0x00	; 0
    6ec0:	80 91 3b 03 	lds	r24, 0x033B
    6ec4:	90 91 3c 03 	lds	r25, 0x033C
    6ec8:	28 17       	cp	r18, r24
    6eca:	39 07       	cpc	r19, r25
    6ecc:	99 f4       	brne	.+38     	; 0x6ef4 <__vector_9+0xc4>


			Timer0_INT0();
    6ece:	e0 91 3e 03 	lds	r30, 0x033E
    6ed2:	f0 91 3f 03 	lds	r31, 0x033F
    6ed6:	09 95       	icall
				  tot_overflow=0;
    6ed8:	10 92 3c 03 	sts	0x033C, r1
    6edc:	10 92 3b 03 	sts	0x033B, r1


				  TCNT0=256-rem;
    6ee0:	e2 e5       	ldi	r30, 0x52	; 82
    6ee2:	f0 e0       	ldi	r31, 0x00	; 0
    6ee4:	80 91 50 03 	lds	r24, 0x0350
    6ee8:	81 95       	neg	r24
    6eea:	80 83       	st	Z, r24

				  Timer0_INT0=NULL;
    6eec:	10 92 3f 03 	sts	0x033F, r1
    6ef0:	10 92 3e 03 	sts	0x033E, r1
}
else
{
//do nothing
}
}
    6ef4:	cf 91       	pop	r28
    6ef6:	df 91       	pop	r29
    6ef8:	ff 91       	pop	r31
    6efa:	ef 91       	pop	r30
    6efc:	bf 91       	pop	r27
    6efe:	af 91       	pop	r26
    6f00:	9f 91       	pop	r25
    6f02:	8f 91       	pop	r24
    6f04:	7f 91       	pop	r23
    6f06:	6f 91       	pop	r22
    6f08:	5f 91       	pop	r21
    6f0a:	4f 91       	pop	r20
    6f0c:	3f 91       	pop	r19
    6f0e:	2f 91       	pop	r18
    6f10:	0f 90       	pop	r0
    6f12:	0f be       	out	0x3f, r0	; 63
    6f14:	0f 90       	pop	r0
    6f16:	1f 90       	pop	r1
    6f18:	18 95       	reti

00006f1a <Timer0_Dimer>:

void Timer0_Dimer(void)
{
    6f1a:	df 93       	push	r29
    6f1c:	cf 93       	push	r28
    6f1e:	cd b7       	in	r28, 0x3d	; 61
    6f20:	de b7       	in	r29, 0x3e	; 62
	// phase correct mode
	SET_BIT(TCCR0_REG,6);
    6f22:	a3 e5       	ldi	r26, 0x53	; 83
    6f24:	b0 e0       	ldi	r27, 0x00	; 0
    6f26:	e3 e5       	ldi	r30, 0x53	; 83
    6f28:	f0 e0       	ldi	r31, 0x00	; 0
    6f2a:	80 81       	ld	r24, Z
    6f2c:	80 64       	ori	r24, 0x40	; 64
    6f2e:	8c 93       	st	X, r24
	//SIT_BIT(TCCR0_REG,3);

	// no prescaller
	SET_BIT(TCCR0_REG,5);
    6f30:	a3 e5       	ldi	r26, 0x53	; 83
    6f32:	b0 e0       	ldi	r27, 0x00	; 0
    6f34:	e3 e5       	ldi	r30, 0x53	; 83
    6f36:	f0 e0       	ldi	r31, 0x00	; 0
    6f38:	80 81       	ld	r24, Z
    6f3a:	80 62       	ori	r24, 0x20	; 32
    6f3c:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,0);
    6f3e:	a3 e5       	ldi	r26, 0x53	; 83
    6f40:	b0 e0       	ldi	r27, 0x00	; 0
    6f42:	e3 e5       	ldi	r30, 0x53	; 83
    6f44:	f0 e0       	ldi	r31, 0x00	; 0
    6f46:	80 81       	ld	r24, Z
    6f48:	81 60       	ori	r24, 0x01	; 1
    6f4a:	8c 93       	st	X, r24

	// make pin 3 in port B be output
	DIO_cnfg_channel(DIO_PORTB, PORT3, DIO_OUTPUT);
    6f4c:	81 e0       	ldi	r24, 0x01	; 1
    6f4e:	63 e0       	ldi	r22, 0x03	; 3
    6f50:	41 e0       	ldi	r20, 0x01	; 1
    6f52:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
}
    6f56:	cf 91       	pop	r28
    6f58:	df 91       	pop	r29
    6f5a:	08 95       	ret

00006f5c <Timer0_Dimmer_Light>:

void Timer0_Dimmer_Light(u8 duty)
{
    6f5c:	df 93       	push	r29
    6f5e:	cf 93       	push	r28
    6f60:	0f 92       	push	r0
    6f62:	cd b7       	in	r28, 0x3d	; 61
    6f64:	de b7       	in	r29, 0x3e	; 62
    6f66:	89 83       	std	Y+1, r24	; 0x01
OCR0_REG=duty;
    6f68:	ec e5       	ldi	r30, 0x5C	; 92
    6f6a:	f0 e0       	ldi	r31, 0x00	; 0
    6f6c:	89 81       	ldd	r24, Y+1	; 0x01
    6f6e:	80 83       	st	Z, r24
}
    6f70:	0f 90       	pop	r0
    6f72:	cf 91       	pop	r28
    6f74:	df 91       	pop	r29
    6f76:	08 95       	ret

00006f78 <TWI_init>:
 */

#include "TWI_Interface.h"

void TWI_init(u8 address)
{
    6f78:	df 93       	push	r29
    6f7a:	cf 93       	push	r28
    6f7c:	00 d0       	rcall	.+0      	; 0x6f7e <TWI_init+0x6>
    6f7e:	cd b7       	in	r28, 0x3d	; 61
    6f80:	de b7       	in	r29, 0x3e	; 62
    6f82:	89 83       	std	Y+1, r24	; 0x01
	TWI->TWI_TWAR=address;
    6f84:	e0 e2       	ldi	r30, 0x20	; 32
    6f86:	f0 e0       	ldi	r31, 0x00	; 0
    6f88:	89 81       	ldd	r24, Y+1	; 0x01
    6f8a:	82 83       	std	Z+2, r24	; 0x02
	TWI->TWI_TWBR=TWBR;
    6f8c:	e0 e2       	ldi	r30, 0x20	; 32
    6f8e:	f0 e0       	ldi	r31, 0x00	; 0
    6f90:	82 e0       	ldi	r24, 0x02	; 2
    6f92:	80 83       	st	Z, r24
	TWI->TWI_TWCR.Bits;
    6f94:	e0 e2       	ldi	r30, 0x20	; 32
    6f96:	f0 e0       	ldi	r31, 0x00	; 0
    6f98:	87 a9       	ldd	r24, Z+55	; 0x37
}
    6f9a:	0f 90       	pop	r0
    6f9c:	0f 90       	pop	r0
    6f9e:	cf 91       	pop	r28
    6fa0:	df 91       	pop	r29
    6fa2:	08 95       	ret

00006fa4 <TWI_status>:



u8 TWI_status(void)
{
    6fa4:	df 93       	push	r29
    6fa6:	cf 93       	push	r28
    6fa8:	cd b7       	in	r28, 0x3d	; 61
    6faa:	de b7       	in	r29, 0x3e	; 62
 return (TWI->TWI_TWSR & 0xF8);
    6fac:	e0 e2       	ldi	r30, 0x20	; 32
    6fae:	f0 e0       	ldi	r31, 0x00	; 0
    6fb0:	81 81       	ldd	r24, Z+1	; 0x01
    6fb2:	88 7f       	andi	r24, 0xF8	; 248
}
    6fb4:	cf 91       	pop	r28
    6fb6:	df 91       	pop	r29
    6fb8:	08 95       	ret

00006fba <TWI_start>:



u8 TWI_start(void)
{
    6fba:	df 93       	push	r29
    6fbc:	cf 93       	push	r28
    6fbe:	cd b7       	in	r28, 0x3d	; 61
    6fc0:	de b7       	in	r29, 0x3e	; 62
   TWI->TWI_TWCR.Bits.TWSTA=1;
    6fc2:	e0 e2       	ldi	r30, 0x20	; 32
    6fc4:	f0 e0       	ldi	r31, 0x00	; 0
    6fc6:	87 a9       	ldd	r24, Z+55	; 0x37
    6fc8:	80 62       	ori	r24, 0x20	; 32
    6fca:	87 ab       	std	Z+55, r24	; 0x37
   TWI->TWI_TWCR.Bits.TWINT=1;
    6fcc:	e0 e2       	ldi	r30, 0x20	; 32
    6fce:	f0 e0       	ldi	r31, 0x00	; 0
    6fd0:	87 a9       	ldd	r24, Z+55	; 0x37
    6fd2:	80 68       	ori	r24, 0x80	; 128
    6fd4:	87 ab       	std	Z+55, r24	; 0x37
   while(TWI->TWI_TWCR.Bits.TWINT==0);
    6fd6:	e0 e2       	ldi	r30, 0x20	; 32
    6fd8:	f0 e0       	ldi	r31, 0x00	; 0
    6fda:	87 a9       	ldd	r24, Z+55	; 0x37
    6fdc:	80 78       	andi	r24, 0x80	; 128
    6fde:	88 23       	and	r24, r24
    6fe0:	d1 f3       	breq	.-12     	; 0x6fd6 <TWI_start+0x1c>
   return TWI_status();
    6fe2:	0e 94 d2 37 	call	0x6fa4	; 0x6fa4 <TWI_status>
}
    6fe6:	cf 91       	pop	r28
    6fe8:	df 91       	pop	r29
    6fea:	08 95       	ret

00006fec <TWI_stop>:



void TWI_stop(void)
{
    6fec:	df 93       	push	r29
    6fee:	cf 93       	push	r28
    6ff0:	cd b7       	in	r28, 0x3d	; 61
    6ff2:	de b7       	in	r29, 0x3e	; 62
   TWI->TWI_TWCR.Bits.TWSTO=1;
    6ff4:	e0 e2       	ldi	r30, 0x20	; 32
    6ff6:	f0 e0       	ldi	r31, 0x00	; 0
    6ff8:	87 a9       	ldd	r24, Z+55	; 0x37
    6ffa:	80 61       	ori	r24, 0x10	; 16
    6ffc:	87 ab       	std	Z+55, r24	; 0x37
   TWI->TWI_TWCR.Bits.TWINT=1;
    6ffe:	e0 e2       	ldi	r30, 0x20	; 32
    7000:	f0 e0       	ldi	r31, 0x00	; 0
    7002:	87 a9       	ldd	r24, Z+55	; 0x37
    7004:	80 68       	ori	r24, 0x80	; 128
    7006:	87 ab       	std	Z+55, r24	; 0x37
   }
    7008:	cf 91       	pop	r28
    700a:	df 91       	pop	r29
    700c:	08 95       	ret

0000700e <TWI_send>:




u8 TWI_send(u8 data)
{
    700e:	df 93       	push	r29
    7010:	cf 93       	push	r28
    7012:	0f 92       	push	r0
    7014:	cd b7       	in	r28, 0x3d	; 61
    7016:	de b7       	in	r29, 0x3e	; 62
    7018:	89 83       	std	Y+1, r24	; 0x01
   TWI->TWI_TWDR=data;
    701a:	e0 e2       	ldi	r30, 0x20	; 32
    701c:	f0 e0       	ldi	r31, 0x00	; 0
    701e:	89 81       	ldd	r24, Y+1	; 0x01
    7020:	83 83       	std	Z+3, r24	; 0x03
   TWI->TWI_TWCR.Bits.TWINT=1;
    7022:	e0 e2       	ldi	r30, 0x20	; 32
    7024:	f0 e0       	ldi	r31, 0x00	; 0
    7026:	87 a9       	ldd	r24, Z+55	; 0x37
    7028:	80 68       	ori	r24, 0x80	; 128
    702a:	87 ab       	std	Z+55, r24	; 0x37
   while(TWI->TWI_TWCR.Bits.TWINT==0);
    702c:	e0 e2       	ldi	r30, 0x20	; 32
    702e:	f0 e0       	ldi	r31, 0x00	; 0
    7030:	87 a9       	ldd	r24, Z+55	; 0x37
    7032:	80 78       	andi	r24, 0x80	; 128
    7034:	88 23       	and	r24, r24
    7036:	d1 f3       	breq	.-12     	; 0x702c <TWI_send+0x1e>
   return TWI_status();
    7038:	0e 94 d2 37 	call	0x6fa4	; 0x6fa4 <TWI_status>
}
    703c:	0f 90       	pop	r0
    703e:	cf 91       	pop	r28
    7040:	df 91       	pop	r29
    7042:	08 95       	ret

00007044 <TWI_read_Ack>:


u8 TWI_read_Ack(u8 * data)
{
    7044:	df 93       	push	r29
    7046:	cf 93       	push	r28
    7048:	00 d0       	rcall	.+0      	; 0x704a <TWI_read_Ack+0x6>
    704a:	cd b7       	in	r28, 0x3d	; 61
    704c:	de b7       	in	r29, 0x3e	; 62
    704e:	9a 83       	std	Y+2, r25	; 0x02
    7050:	89 83       	std	Y+1, r24	; 0x01
	TWI->TWI_TWCR.Bits.TWEA=1;
    7052:	e0 e2       	ldi	r30, 0x20	; 32
    7054:	f0 e0       	ldi	r31, 0x00	; 0
    7056:	87 a9       	ldd	r24, Z+55	; 0x37
    7058:	80 64       	ori	r24, 0x40	; 64
    705a:	87 ab       	std	Z+55, r24	; 0x37
	TWI->TWI_TWCR.Bits.TWINT=1;
    705c:	e0 e2       	ldi	r30, 0x20	; 32
    705e:	f0 e0       	ldi	r31, 0x00	; 0
    7060:	87 a9       	ldd	r24, Z+55	; 0x37
    7062:	80 68       	ori	r24, 0x80	; 128
    7064:	87 ab       	std	Z+55, r24	; 0x37
	while(TWI->TWI_TWCR.Bits.TWINT==0);
    7066:	e0 e2       	ldi	r30, 0x20	; 32
    7068:	f0 e0       	ldi	r31, 0x00	; 0
    706a:	87 a9       	ldd	r24, Z+55	; 0x37
    706c:	80 78       	andi	r24, 0x80	; 128
    706e:	88 23       	and	r24, r24
    7070:	d1 f3       	breq	.-12     	; 0x7066 <TWI_read_Ack+0x22>
	* data=TWI->TWI_TWDR;
    7072:	e0 e2       	ldi	r30, 0x20	; 32
    7074:	f0 e0       	ldi	r31, 0x00	; 0
    7076:	83 81       	ldd	r24, Z+3	; 0x03
    7078:	e9 81       	ldd	r30, Y+1	; 0x01
    707a:	fa 81       	ldd	r31, Y+2	; 0x02
    707c:	80 83       	st	Z, r24
	return TWI_status();
    707e:	0e 94 d2 37 	call	0x6fa4	; 0x6fa4 <TWI_status>

}
    7082:	0f 90       	pop	r0
    7084:	0f 90       	pop	r0
    7086:	cf 91       	pop	r28
    7088:	df 91       	pop	r29
    708a:	08 95       	ret

0000708c <TWI_read_NACK>:



u8 TWI_read_NACK (u8 *data)
{
    708c:	df 93       	push	r29
    708e:	cf 93       	push	r28
    7090:	00 d0       	rcall	.+0      	; 0x7092 <TWI_read_NACK+0x6>
    7092:	cd b7       	in	r28, 0x3d	; 61
    7094:	de b7       	in	r29, 0x3e	; 62
    7096:	9a 83       	std	Y+2, r25	; 0x02
    7098:	89 83       	std	Y+1, r24	; 0x01
	TWI->TWI_TWCR.Bits.TWINT=1;
    709a:	e0 e2       	ldi	r30, 0x20	; 32
    709c:	f0 e0       	ldi	r31, 0x00	; 0
    709e:	87 a9       	ldd	r24, Z+55	; 0x37
    70a0:	80 68       	ori	r24, 0x80	; 128
    70a2:	87 ab       	std	Z+55, r24	; 0x37
	while(TWI->TWI_TWCR.Bits.TWINT==0);
    70a4:	e0 e2       	ldi	r30, 0x20	; 32
    70a6:	f0 e0       	ldi	r31, 0x00	; 0
    70a8:	87 a9       	ldd	r24, Z+55	; 0x37
    70aa:	80 78       	andi	r24, 0x80	; 128
    70ac:	88 23       	and	r24, r24
    70ae:	d1 f3       	breq	.-12     	; 0x70a4 <TWI_read_NACK+0x18>
	*data=TWI->TWI_TWDR;
    70b0:	e0 e2       	ldi	r30, 0x20	; 32
    70b2:	f0 e0       	ldi	r31, 0x00	; 0
    70b4:	83 81       	ldd	r24, Z+3	; 0x03
    70b6:	e9 81       	ldd	r30, Y+1	; 0x01
    70b8:	fa 81       	ldd	r31, Y+2	; 0x02
    70ba:	80 83       	st	Z, r24
	return TWI_status();
    70bc:	0e 94 d2 37 	call	0x6fa4	; 0x6fa4 <TWI_status>
}
    70c0:	0f 90       	pop	r0
    70c2:	0f 90       	pop	r0
    70c4:	cf 91       	pop	r28
    70c6:	df 91       	pop	r29
    70c8:	08 95       	ret

000070ca <Spi_init>:
#include "Spi_interface.h"
#include "DIO_INTERFACE.h"


void Spi_init(spi_initoption option)
{
    70ca:	df 93       	push	r29
    70cc:	cf 93       	push	r28
    70ce:	00 d0       	rcall	.+0      	; 0x70d0 <Spi_init+0x6>
    70d0:	0f 92       	push	r0
    70d2:	cd b7       	in	r28, 0x3d	; 61
    70d4:	de b7       	in	r29, 0x3e	; 62
    70d6:	89 83       	std	Y+1, r24	; 0x01
	switch (option.state)
    70d8:	89 81       	ldd	r24, Y+1	; 0x01
    70da:	28 2f       	mov	r18, r24
    70dc:	30 e0       	ldi	r19, 0x00	; 0
    70de:	3b 83       	std	Y+3, r19	; 0x03
    70e0:	2a 83       	std	Y+2, r18	; 0x02
    70e2:	8a 81       	ldd	r24, Y+2	; 0x02
    70e4:	9b 81       	ldd	r25, Y+3	; 0x03
    70e6:	00 97       	sbiw	r24, 0x00	; 0
    70e8:	31 f0       	breq	.+12     	; 0x70f6 <Spi_init+0x2c>
    70ea:	2a 81       	ldd	r18, Y+2	; 0x02
    70ec:	3b 81       	ldd	r19, Y+3	; 0x03
    70ee:	21 30       	cpi	r18, 0x01	; 1
    70f0:	31 05       	cpc	r19, r1
    70f2:	d1 f0       	breq	.+52     	; 0x7128 <Spi_init+0x5e>
    70f4:	32 c0       	rjmp	.+100    	; 0x715a <Spi_init+0x90>
	{
	case Master:
		DIO_cnfg_channel(Spi_port,Spi_SS_pin, DIO_HIGH);
    70f6:	81 e0       	ldi	r24, 0x01	; 1
    70f8:	64 e0       	ldi	r22, 0x04	; 4
    70fa:	41 e0       	ldi	r20, 0x01	; 1
    70fc:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
		DIO_cnfg_channel(Spi_port, Spi_SCK_pin, DIO_HIGH);
    7100:	81 e0       	ldi	r24, 0x01	; 1
    7102:	67 e0       	ldi	r22, 0x07	; 7
    7104:	41 e0       	ldi	r20, 0x01	; 1
    7106:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
		DIO_cnfg_channel(Spi_port, Spi_MOSI_pin, DIO_HIGH);
    710a:	81 e0       	ldi	r24, 0x01	; 1
    710c:	65 e0       	ldi	r22, 0x05	; 5
    710e:	41 e0       	ldi	r20, 0x01	; 1
    7110:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
		DIO_cnfg_channel(Spi_port, Spi_MISO_pin, DIO_LOW);
    7114:	81 e0       	ldi	r24, 0x01	; 1
    7116:	66 e0       	ldi	r22, 0x06	; 6
    7118:	40 e0       	ldi	r20, 0x00	; 0
    711a:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
		SPI->myspcr.ALLREG=0X50;
    711e:	ed e2       	ldi	r30, 0x2D	; 45
    7120:	f0 e0       	ldi	r31, 0x00	; 0
    7122:	80 e5       	ldi	r24, 0x50	; 80
    7124:	80 83       	st	Z, r24
    7126:	19 c0       	rjmp	.+50     	; 0x715a <Spi_init+0x90>
		break;

	case Slave:
		DIO_cnfg_channel(Spi_port,Spi_SS_pin, DIO_LOW);
    7128:	81 e0       	ldi	r24, 0x01	; 1
    712a:	64 e0       	ldi	r22, 0x04	; 4
    712c:	40 e0       	ldi	r20, 0x00	; 0
    712e:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
		DIO_cnfg_channel(Spi_port, Spi_SCK_pin, DIO_LOW);
    7132:	81 e0       	ldi	r24, 0x01	; 1
    7134:	67 e0       	ldi	r22, 0x07	; 7
    7136:	40 e0       	ldi	r20, 0x00	; 0
    7138:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
		DIO_cnfg_channel(Spi_port, Spi_MOSI_pin, DIO_LOW);
    713c:	81 e0       	ldi	r24, 0x01	; 1
    713e:	65 e0       	ldi	r22, 0x05	; 5
    7140:	40 e0       	ldi	r20, 0x00	; 0
    7142:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
		DIO_cnfg_channel(Spi_port, Spi_MISO_pin, DIO_HIGH);
    7146:	81 e0       	ldi	r24, 0x01	; 1
    7148:	66 e0       	ldi	r22, 0x06	; 6
    714a:	41 e0       	ldi	r20, 0x01	; 1
    714c:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
        SPI->myspcr.bits.SPE=1;
    7150:	ed e2       	ldi	r30, 0x2D	; 45
    7152:	f0 e0       	ldi	r31, 0x00	; 0
    7154:	80 81       	ld	r24, Z
    7156:	80 64       	ori	r24, 0x40	; 64
    7158:	80 83       	st	Z, r24
		break;
	}
}
    715a:	0f 90       	pop	r0
    715c:	0f 90       	pop	r0
    715e:	0f 90       	pop	r0
    7160:	cf 91       	pop	r28
    7162:	df 91       	pop	r29
    7164:	08 95       	ret

00007166 <Spi_TxRx>:


u8 Spi_TxRx (u8 data)
{
    7166:	df 93       	push	r29
    7168:	cf 93       	push	r28
    716a:	0f 92       	push	r0
    716c:	cd b7       	in	r28, 0x3d	; 61
    716e:	de b7       	in	r29, 0x3e	; 62
    7170:	89 83       	std	Y+1, r24	; 0x01
   SPI->myspdr=data;
    7172:	ed e2       	ldi	r30, 0x2D	; 45
    7174:	f0 e0       	ldi	r31, 0x00	; 0
    7176:	89 81       	ldd	r24, Y+1	; 0x01
    7178:	82 83       	std	Z+2, r24	; 0x02
    while(SPI->myspsr.bits.SPIF==FALSE);
    717a:	ed e2       	ldi	r30, 0x2D	; 45
    717c:	f0 e0       	ldi	r31, 0x00	; 0
    717e:	81 81       	ldd	r24, Z+1	; 0x01
    7180:	80 78       	andi	r24, 0x80	; 128
    7182:	88 23       	and	r24, r24
    7184:	d1 f3       	breq	.-12     	; 0x717a <Spi_TxRx+0x14>
    return SPI->myspdr;
    7186:	ed e2       	ldi	r30, 0x2D	; 45
    7188:	f0 e0       	ldi	r31, 0x00	; 0
    718a:	82 81       	ldd	r24, Z+2	; 0x02
}
    718c:	0f 90       	pop	r0
    718e:	cf 91       	pop	r28
    7190:	df 91       	pop	r29
    7192:	08 95       	ret

00007194 <Spi_Slave_Enable>:


void Spi_Slave_Enable(void)
{
    7194:	df 93       	push	r29
    7196:	cf 93       	push	r28
    7198:	cd b7       	in	r28, 0x3d	; 61
    719a:	de b7       	in	r29, 0x3e	; 62
 DIO_cnfg_channel(Spi_port, Spi_SS_pin, DIO_LOW);
    719c:	81 e0       	ldi	r24, 0x01	; 1
    719e:	64 e0       	ldi	r22, 0x04	; 4
    71a0:	40 e0       	ldi	r20, 0x00	; 0
    71a2:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
}
    71a6:	cf 91       	pop	r28
    71a8:	df 91       	pop	r29
    71aa:	08 95       	ret

000071ac <Spi_Slave_Disable>:


void Spi_Slave_Disable(void)
{
    71ac:	df 93       	push	r29
    71ae:	cf 93       	push	r28
    71b0:	cd b7       	in	r28, 0x3d	; 61
    71b2:	de b7       	in	r29, 0x3e	; 62
 DIO_cnfg_channel(Spi_port, Spi_SS_pin, DIO_HIGH);
    71b4:	81 e0       	ldi	r24, 0x01	; 1
    71b6:	64 e0       	ldi	r22, 0x04	; 4
    71b8:	41 e0       	ldi	r20, 0x01	; 1
    71ba:	0e 94 1d 3a 	call	0x743a	; 0x743a <DIO_cnfg_channel>
}
    71be:	cf 91       	pop	r28
    71c0:	df 91       	pop	r29
    71c2:	08 95       	ret

000071c4 <GINT_ENABLE_INTERRUPT>:


#include "GINT_interface.h"

void GINT_ENABLE_INTERRUPT(void)
{
    71c4:	df 93       	push	r29
    71c6:	cf 93       	push	r28
    71c8:	cd b7       	in	r28, 0x3d	; 61
    71ca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_SREG_reg,7);
    71cc:	af e5       	ldi	r26, 0x5F	; 95
    71ce:	b0 e0       	ldi	r27, 0x00	; 0
    71d0:	ef e5       	ldi	r30, 0x5F	; 95
    71d2:	f0 e0       	ldi	r31, 0x00	; 0
    71d4:	80 81       	ld	r24, Z
    71d6:	80 68       	ori	r24, 0x80	; 128
    71d8:	8c 93       	st	X, r24
}
    71da:	cf 91       	pop	r28
    71dc:	df 91       	pop	r29
    71de:	08 95       	ret

000071e0 <GINT_DISABLE_INTERRUPT>:
void GINT_DISABLE_INTERRUPT(void)
{
    71e0:	df 93       	push	r29
    71e2:	cf 93       	push	r28
    71e4:	cd b7       	in	r28, 0x3d	; 61
    71e6:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GINT_SREG_reg,7);
    71e8:	af e5       	ldi	r26, 0x5F	; 95
    71ea:	b0 e0       	ldi	r27, 0x00	; 0
    71ec:	ef e5       	ldi	r30, 0x5F	; 95
    71ee:	f0 e0       	ldi	r31, 0x00	; 0
    71f0:	80 81       	ld	r24, Z
    71f2:	8f 77       	andi	r24, 0x7F	; 127
    71f4:	8c 93       	st	X, r24
}
    71f6:	cf 91       	pop	r28
    71f8:	df 91       	pop	r29
    71fa:	08 95       	ret

000071fc <Ext_INTERRUPT_ENABE>:


#include "EXT_INT.h"

void Ext_INTERRUPT_ENABE(ext_int_t ID)
{
    71fc:	df 93       	push	r29
    71fe:	cf 93       	push	r28
    7200:	00 d0       	rcall	.+0      	; 0x7202 <Ext_INTERRUPT_ENABE+0x6>
    7202:	0f 92       	push	r0
    7204:	cd b7       	in	r28, 0x3d	; 61
    7206:	de b7       	in	r29, 0x3e	; 62
    7208:	89 83       	std	Y+1, r24	; 0x01
	switch(ID)
    720a:	89 81       	ldd	r24, Y+1	; 0x01
    720c:	28 2f       	mov	r18, r24
    720e:	30 e0       	ldi	r19, 0x00	; 0
    7210:	3b 83       	std	Y+3, r19	; 0x03
    7212:	2a 83       	std	Y+2, r18	; 0x02
    7214:	8a 81       	ldd	r24, Y+2	; 0x02
    7216:	9b 81       	ldd	r25, Y+3	; 0x03
    7218:	81 30       	cpi	r24, 0x01	; 1
    721a:	91 05       	cpc	r25, r1
    721c:	89 f0       	breq	.+34     	; 0x7240 <Ext_INTERRUPT_ENABE+0x44>
    721e:	2a 81       	ldd	r18, Y+2	; 0x02
    7220:	3b 81       	ldd	r19, Y+3	; 0x03
    7222:	22 30       	cpi	r18, 0x02	; 2
    7224:	31 05       	cpc	r19, r1
    7226:	a1 f0       	breq	.+40     	; 0x7250 <Ext_INTERRUPT_ENABE+0x54>
    7228:	8a 81       	ldd	r24, Y+2	; 0x02
    722a:	9b 81       	ldd	r25, Y+3	; 0x03
    722c:	00 97       	sbiw	r24, 0x00	; 0
    722e:	b9 f4       	brne	.+46     	; 0x725e <Ext_INTERRUPT_ENABE+0x62>
	{
	case ext_INT0:
		SET_BIT(EXT_INT_GIFR_REG,6);
    7230:	aa e5       	ldi	r26, 0x5A	; 90
    7232:	b0 e0       	ldi	r27, 0x00	; 0
    7234:	ea e5       	ldi	r30, 0x5A	; 90
    7236:	f0 e0       	ldi	r31, 0x00	; 0
    7238:	80 81       	ld	r24, Z
    723a:	80 64       	ori	r24, 0x40	; 64
    723c:	8c 93       	st	X, r24
    723e:	0f c0       	rjmp	.+30     	; 0x725e <Ext_INTERRUPT_ENABE+0x62>
		break;
	case ext_INT1:
		SET_BIT(EXT_INT_GIFR_REG,7);
    7240:	aa e5       	ldi	r26, 0x5A	; 90
    7242:	b0 e0       	ldi	r27, 0x00	; 0
    7244:	ea e5       	ldi	r30, 0x5A	; 90
    7246:	f0 e0       	ldi	r31, 0x00	; 0
    7248:	80 81       	ld	r24, Z
    724a:	80 68       	ori	r24, 0x80	; 128
    724c:	8c 93       	st	X, r24
    724e:	07 c0       	rjmp	.+14     	; 0x725e <Ext_INTERRUPT_ENABE+0x62>
		break;
	case ext_INT2:
			SET_BIT(EXT_INT_GIFR_REG,5);
    7250:	aa e5       	ldi	r26, 0x5A	; 90
    7252:	b0 e0       	ldi	r27, 0x00	; 0
    7254:	ea e5       	ldi	r30, 0x5A	; 90
    7256:	f0 e0       	ldi	r31, 0x00	; 0
    7258:	80 81       	ld	r24, Z
    725a:	80 62       	ori	r24, 0x20	; 32
    725c:	8c 93       	st	X, r24
			break;
	}
}
    725e:	0f 90       	pop	r0
    7260:	0f 90       	pop	r0
    7262:	0f 90       	pop	r0
    7264:	cf 91       	pop	r28
    7266:	df 91       	pop	r29
    7268:	08 95       	ret

0000726a <EXT_INTERRUPT_DISABLE>:
void EXT_INTERRUPT_DISABLE(ext_int_t ID)
{
    726a:	df 93       	push	r29
    726c:	cf 93       	push	r28
    726e:	00 d0       	rcall	.+0      	; 0x7270 <EXT_INTERRUPT_DISABLE+0x6>
    7270:	0f 92       	push	r0
    7272:	cd b7       	in	r28, 0x3d	; 61
    7274:	de b7       	in	r29, 0x3e	; 62
    7276:	89 83       	std	Y+1, r24	; 0x01
	switch(ID)
    7278:	89 81       	ldd	r24, Y+1	; 0x01
    727a:	28 2f       	mov	r18, r24
    727c:	30 e0       	ldi	r19, 0x00	; 0
    727e:	3b 83       	std	Y+3, r19	; 0x03
    7280:	2a 83       	std	Y+2, r18	; 0x02
    7282:	8a 81       	ldd	r24, Y+2	; 0x02
    7284:	9b 81       	ldd	r25, Y+3	; 0x03
    7286:	81 30       	cpi	r24, 0x01	; 1
    7288:	91 05       	cpc	r25, r1
    728a:	89 f0       	breq	.+34     	; 0x72ae <EXT_INTERRUPT_DISABLE+0x44>
    728c:	2a 81       	ldd	r18, Y+2	; 0x02
    728e:	3b 81       	ldd	r19, Y+3	; 0x03
    7290:	22 30       	cpi	r18, 0x02	; 2
    7292:	31 05       	cpc	r19, r1
    7294:	a1 f0       	breq	.+40     	; 0x72be <EXT_INTERRUPT_DISABLE+0x54>
    7296:	8a 81       	ldd	r24, Y+2	; 0x02
    7298:	9b 81       	ldd	r25, Y+3	; 0x03
    729a:	00 97       	sbiw	r24, 0x00	; 0
    729c:	b9 f4       	brne	.+46     	; 0x72cc <EXT_INTERRUPT_DISABLE+0x62>
		{
		case ext_INT0:
			CLEAR_BIT(EXT_INT_GIFR_REG,6);
    729e:	aa e5       	ldi	r26, 0x5A	; 90
    72a0:	b0 e0       	ldi	r27, 0x00	; 0
    72a2:	ea e5       	ldi	r30, 0x5A	; 90
    72a4:	f0 e0       	ldi	r31, 0x00	; 0
    72a6:	80 81       	ld	r24, Z
    72a8:	8f 7b       	andi	r24, 0xBF	; 191
    72aa:	8c 93       	st	X, r24
    72ac:	0f c0       	rjmp	.+30     	; 0x72cc <EXT_INTERRUPT_DISABLE+0x62>
			break;
		case ext_INT1:
			CLEAR_BIT(EXT_INT_GIFR_REG,7);
    72ae:	aa e5       	ldi	r26, 0x5A	; 90
    72b0:	b0 e0       	ldi	r27, 0x00	; 0
    72b2:	ea e5       	ldi	r30, 0x5A	; 90
    72b4:	f0 e0       	ldi	r31, 0x00	; 0
    72b6:	80 81       	ld	r24, Z
    72b8:	8f 77       	andi	r24, 0x7F	; 127
    72ba:	8c 93       	st	X, r24
    72bc:	07 c0       	rjmp	.+14     	; 0x72cc <EXT_INTERRUPT_DISABLE+0x62>
			break;
		case ext_INT2:
			CLEAR_BIT(EXT_INT_GIFR_REG,5);
    72be:	aa e5       	ldi	r26, 0x5A	; 90
    72c0:	b0 e0       	ldi	r27, 0x00	; 0
    72c2:	ea e5       	ldi	r30, 0x5A	; 90
    72c4:	f0 e0       	ldi	r31, 0x00	; 0
    72c6:	80 81       	ld	r24, Z
    72c8:	8f 7d       	andi	r24, 0xDF	; 223
    72ca:	8c 93       	st	X, r24
				break;
		}
}
    72cc:	0f 90       	pop	r0
    72ce:	0f 90       	pop	r0
    72d0:	0f 90       	pop	r0
    72d2:	cf 91       	pop	r28
    72d4:	df 91       	pop	r29
    72d6:	08 95       	ret

000072d8 <EXT_INTERUPPT_SENCONTROL>:


void EXT_INTERUPPT_SENCONTROL (ext_int_t ID,ext_int_modes_t mode)
{
    72d8:	df 93       	push	r29
    72da:	cf 93       	push	r28
    72dc:	00 d0       	rcall	.+0      	; 0x72de <EXT_INTERUPPT_SENCONTROL+0x6>
    72de:	00 d0       	rcall	.+0      	; 0x72e0 <EXT_INTERUPPT_SENCONTROL+0x8>
    72e0:	cd b7       	in	r28, 0x3d	; 61
    72e2:	de b7       	in	r29, 0x3e	; 62
    72e4:	89 83       	std	Y+1, r24	; 0x01
    72e6:	6a 83       	std	Y+2, r22	; 0x02
	switch (ID)
    72e8:	89 81       	ldd	r24, Y+1	; 0x01
    72ea:	28 2f       	mov	r18, r24
    72ec:	30 e0       	ldi	r19, 0x00	; 0
    72ee:	3c 83       	std	Y+4, r19	; 0x04
    72f0:	2b 83       	std	Y+3, r18	; 0x03
    72f2:	8b 81       	ldd	r24, Y+3	; 0x03
    72f4:	9c 81       	ldd	r25, Y+4	; 0x04
    72f6:	81 30       	cpi	r24, 0x01	; 1
    72f8:	91 05       	cpc	r25, r1
    72fa:	91 f0       	breq	.+36     	; 0x7320 <EXT_INTERUPPT_SENCONTROL+0x48>
    72fc:	2b 81       	ldd	r18, Y+3	; 0x03
    72fe:	3c 81       	ldd	r19, Y+4	; 0x04
    7300:	22 30       	cpi	r18, 0x02	; 2
    7302:	31 05       	cpc	r19, r1
    7304:	e9 f0       	breq	.+58     	; 0x7340 <EXT_INTERUPPT_SENCONTROL+0x68>
    7306:	8b 81       	ldd	r24, Y+3	; 0x03
    7308:	9c 81       	ldd	r25, Y+4	; 0x04
    730a:	00 97       	sbiw	r24, 0x00	; 0
    730c:	71 f5       	brne	.+92     	; 0x736a <EXT_INTERUPPT_SENCONTROL+0x92>
	{
	case ext_INT0:
		EXT_INT_MCUCR_REG |=(mode<<0);
    730e:	a5 e5       	ldi	r26, 0x55	; 85
    7310:	b0 e0       	ldi	r27, 0x00	; 0
    7312:	e5 e5       	ldi	r30, 0x55	; 85
    7314:	f0 e0       	ldi	r31, 0x00	; 0
    7316:	90 81       	ld	r25, Z
    7318:	8a 81       	ldd	r24, Y+2	; 0x02
    731a:	89 2b       	or	r24, r25
    731c:	8c 93       	st	X, r24
    731e:	25 c0       	rjmp	.+74     	; 0x736a <EXT_INTERUPPT_SENCONTROL+0x92>
		break;
	case ext_INT1:
		EXT_INT_MCUCR_REG |=(mode<<2);
    7320:	a5 e5       	ldi	r26, 0x55	; 85
    7322:	b0 e0       	ldi	r27, 0x00	; 0
    7324:	e5 e5       	ldi	r30, 0x55	; 85
    7326:	f0 e0       	ldi	r31, 0x00	; 0
    7328:	80 81       	ld	r24, Z
    732a:	28 2f       	mov	r18, r24
    732c:	8a 81       	ldd	r24, Y+2	; 0x02
    732e:	88 2f       	mov	r24, r24
    7330:	90 e0       	ldi	r25, 0x00	; 0
    7332:	88 0f       	add	r24, r24
    7334:	99 1f       	adc	r25, r25
    7336:	88 0f       	add	r24, r24
    7338:	99 1f       	adc	r25, r25
    733a:	82 2b       	or	r24, r18
    733c:	8c 93       	st	X, r24
    733e:	15 c0       	rjmp	.+42     	; 0x736a <EXT_INTERUPPT_SENCONTROL+0x92>
		break;
	case ext_INT2:
		if(mode==The_falling_edge)
    7340:	8a 81       	ldd	r24, Y+2	; 0x02
    7342:	82 30       	cpi	r24, 0x02	; 2
    7344:	41 f4       	brne	.+16     	; 0x7356 <EXT_INTERUPPT_SENCONTROL+0x7e>
		{
			CLEAR_BIT(EXT_INT_MCUCSR_REG,6);
    7346:	a4 e5       	ldi	r26, 0x54	; 84
    7348:	b0 e0       	ldi	r27, 0x00	; 0
    734a:	e4 e5       	ldi	r30, 0x54	; 84
    734c:	f0 e0       	ldi	r31, 0x00	; 0
    734e:	80 81       	ld	r24, Z
    7350:	8f 7b       	andi	r24, 0xBF	; 191
    7352:	8c 93       	st	X, r24
    7354:	0a c0       	rjmp	.+20     	; 0x736a <EXT_INTERUPPT_SENCONTROL+0x92>
		}
		else if (mode==The_rising_edge)
    7356:	8a 81       	ldd	r24, Y+2	; 0x02
    7358:	83 30       	cpi	r24, 0x03	; 3
    735a:	39 f4       	brne	.+14     	; 0x736a <EXT_INTERUPPT_SENCONTROL+0x92>
		{
			SET_BIT(EXT_INT_MCUCSR_REG,6);
    735c:	a4 e5       	ldi	r26, 0x54	; 84
    735e:	b0 e0       	ldi	r27, 0x00	; 0
    7360:	e4 e5       	ldi	r30, 0x54	; 84
    7362:	f0 e0       	ldi	r31, 0x00	; 0
    7364:	80 81       	ld	r24, Z
    7366:	80 64       	ori	r24, 0x40	; 64
    7368:	8c 93       	st	X, r24
			/* do nothing */
		}


	}
}
    736a:	0f 90       	pop	r0
    736c:	0f 90       	pop	r0
    736e:	0f 90       	pop	r0
    7370:	0f 90       	pop	r0
    7372:	cf 91       	pop	r28
    7374:	df 91       	pop	r29
    7376:	08 95       	ret

00007378 <EEPROM_internal_Write>:
 *      Author: lione
 */
#include "EEPROM_Interface_int.h"

void EEPROM_internal_Write(u16 address,u8 data)
{
    7378:	df 93       	push	r29
    737a:	cf 93       	push	r28
    737c:	00 d0       	rcall	.+0      	; 0x737e <EEPROM_internal_Write+0x6>
    737e:	0f 92       	push	r0
    7380:	cd b7       	in	r28, 0x3d	; 61
    7382:	de b7       	in	r29, 0x3e	; 62
    7384:	9a 83       	std	Y+2, r25	; 0x02
    7386:	89 83       	std	Y+1, r24	; 0x01
    7388:	6b 83       	std	Y+3, r22	; 0x03
while(CHECK_BIT(EECR_REG,1));
    738a:	ec e3       	ldi	r30, 0x3C	; 60
    738c:	f0 e0       	ldi	r31, 0x00	; 0
    738e:	80 81       	ld	r24, Z
    7390:	86 95       	lsr	r24
    7392:	88 2f       	mov	r24, r24
    7394:	90 e0       	ldi	r25, 0x00	; 0
    7396:	81 70       	andi	r24, 0x01	; 1
    7398:	90 70       	andi	r25, 0x00	; 0
    739a:	88 23       	and	r24, r24
    739c:	b1 f7       	brne	.-20     	; 0x738a <EEPROM_internal_Write+0x12>
EEARL_REG=address;
    739e:	ee e3       	ldi	r30, 0x3E	; 62
    73a0:	f0 e0       	ldi	r31, 0x00	; 0
    73a2:	89 81       	ldd	r24, Y+1	; 0x01
    73a4:	80 83       	st	Z, r24
EEARH_REG=(address>>8);
    73a6:	ef e3       	ldi	r30, 0x3F	; 63
    73a8:	f0 e0       	ldi	r31, 0x00	; 0
    73aa:	89 81       	ldd	r24, Y+1	; 0x01
    73ac:	9a 81       	ldd	r25, Y+2	; 0x02
    73ae:	89 2f       	mov	r24, r25
    73b0:	99 27       	eor	r25, r25
    73b2:	80 83       	st	Z, r24
EEDR_REG=data;
    73b4:	ed e3       	ldi	r30, 0x3D	; 61
    73b6:	f0 e0       	ldi	r31, 0x00	; 0
    73b8:	8b 81       	ldd	r24, Y+3	; 0x03
    73ba:	80 83       	st	Z, r24
SET_BIT(EECR_REG,2);
    73bc:	ac e3       	ldi	r26, 0x3C	; 60
    73be:	b0 e0       	ldi	r27, 0x00	; 0
    73c0:	ec e3       	ldi	r30, 0x3C	; 60
    73c2:	f0 e0       	ldi	r31, 0x00	; 0
    73c4:	80 81       	ld	r24, Z
    73c6:	84 60       	ori	r24, 0x04	; 4
    73c8:	8c 93       	st	X, r24
SET_BIT(EECR_REG,1);
    73ca:	ac e3       	ldi	r26, 0x3C	; 60
    73cc:	b0 e0       	ldi	r27, 0x00	; 0
    73ce:	ec e3       	ldi	r30, 0x3C	; 60
    73d0:	f0 e0       	ldi	r31, 0x00	; 0
    73d2:	80 81       	ld	r24, Z
    73d4:	82 60       	ori	r24, 0x02	; 2
    73d6:	8c 93       	st	X, r24
}
    73d8:	0f 90       	pop	r0
    73da:	0f 90       	pop	r0
    73dc:	0f 90       	pop	r0
    73de:	cf 91       	pop	r28
    73e0:	df 91       	pop	r29
    73e2:	08 95       	ret

000073e4 <EEPROM_internal_Read>:

u8 EEPROM_internal_Read(u16 address)
{
    73e4:	df 93       	push	r29
    73e6:	cf 93       	push	r28
    73e8:	00 d0       	rcall	.+0      	; 0x73ea <EEPROM_internal_Read+0x6>
    73ea:	cd b7       	in	r28, 0x3d	; 61
    73ec:	de b7       	in	r29, 0x3e	; 62
    73ee:	9a 83       	std	Y+2, r25	; 0x02
    73f0:	89 83       	std	Y+1, r24	; 0x01
	while(CHECK_BIT(EECR_REG,1));
    73f2:	ec e3       	ldi	r30, 0x3C	; 60
    73f4:	f0 e0       	ldi	r31, 0x00	; 0
    73f6:	80 81       	ld	r24, Z
    73f8:	86 95       	lsr	r24
    73fa:	88 2f       	mov	r24, r24
    73fc:	90 e0       	ldi	r25, 0x00	; 0
    73fe:	81 70       	andi	r24, 0x01	; 1
    7400:	90 70       	andi	r25, 0x00	; 0
    7402:	88 23       	and	r24, r24
    7404:	b1 f7       	brne	.-20     	; 0x73f2 <EEPROM_internal_Read+0xe>
	EEARL_REG=address;
    7406:	ee e3       	ldi	r30, 0x3E	; 62
    7408:	f0 e0       	ldi	r31, 0x00	; 0
    740a:	89 81       	ldd	r24, Y+1	; 0x01
    740c:	80 83       	st	Z, r24
	EEARH_REG=(address>>8);
    740e:	ef e3       	ldi	r30, 0x3F	; 63
    7410:	f0 e0       	ldi	r31, 0x00	; 0
    7412:	89 81       	ldd	r24, Y+1	; 0x01
    7414:	9a 81       	ldd	r25, Y+2	; 0x02
    7416:	89 2f       	mov	r24, r25
    7418:	99 27       	eor	r25, r25
    741a:	80 83       	st	Z, r24
	SET_BIT(EECR_REG,0);
    741c:	ac e3       	ldi	r26, 0x3C	; 60
    741e:	b0 e0       	ldi	r27, 0x00	; 0
    7420:	ec e3       	ldi	r30, 0x3C	; 60
    7422:	f0 e0       	ldi	r31, 0x00	; 0
    7424:	80 81       	ld	r24, Z
    7426:	81 60       	ori	r24, 0x01	; 1
    7428:	8c 93       	st	X, r24

	return EEDR_REG;
    742a:	ed e3       	ldi	r30, 0x3D	; 61
    742c:	f0 e0       	ldi	r31, 0x00	; 0
    742e:	80 81       	ld	r24, Z
}
    7430:	0f 90       	pop	r0
    7432:	0f 90       	pop	r0
    7434:	cf 91       	pop	r28
    7436:	df 91       	pop	r29
    7438:	08 95       	ret

0000743a <DIO_cnfg_channel>:




void DIO_cnfg_channel (dio_port_t port, dio_pin_t pin, dio_direction_t direction)
{
    743a:	df 93       	push	r29
    743c:	cf 93       	push	r28
    743e:	00 d0       	rcall	.+0      	; 0x7440 <DIO_cnfg_channel+0x6>
    7440:	00 d0       	rcall	.+0      	; 0x7442 <DIO_cnfg_channel+0x8>
    7442:	0f 92       	push	r0
    7444:	cd b7       	in	r28, 0x3d	; 61
    7446:	de b7       	in	r29, 0x3e	; 62
    7448:	89 83       	std	Y+1, r24	; 0x01
    744a:	6a 83       	std	Y+2, r22	; 0x02
    744c:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    744e:	89 81       	ldd	r24, Y+1	; 0x01
    7450:	28 2f       	mov	r18, r24
    7452:	30 e0       	ldi	r19, 0x00	; 0
    7454:	3d 83       	std	Y+5, r19	; 0x05
    7456:	2c 83       	std	Y+4, r18	; 0x04
    7458:	8c 81       	ldd	r24, Y+4	; 0x04
    745a:	9d 81       	ldd	r25, Y+5	; 0x05
    745c:	81 30       	cpi	r24, 0x01	; 1
    745e:	91 05       	cpc	r25, r1
    7460:	09 f4       	brne	.+2      	; 0x7464 <DIO_cnfg_channel+0x2a>
    7462:	43 c0       	rjmp	.+134    	; 0x74ea <DIO_cnfg_channel+0xb0>
    7464:	2c 81       	ldd	r18, Y+4	; 0x04
    7466:	3d 81       	ldd	r19, Y+5	; 0x05
    7468:	22 30       	cpi	r18, 0x02	; 2
    746a:	31 05       	cpc	r19, r1
    746c:	2c f4       	brge	.+10     	; 0x7478 <DIO_cnfg_channel+0x3e>
    746e:	8c 81       	ldd	r24, Y+4	; 0x04
    7470:	9d 81       	ldd	r25, Y+5	; 0x05
    7472:	00 97       	sbiw	r24, 0x00	; 0
    7474:	71 f0       	breq	.+28     	; 0x7492 <DIO_cnfg_channel+0x58>
    7476:	bc c0       	rjmp	.+376    	; 0x75f0 <DIO_cnfg_channel+0x1b6>
    7478:	2c 81       	ldd	r18, Y+4	; 0x04
    747a:	3d 81       	ldd	r19, Y+5	; 0x05
    747c:	22 30       	cpi	r18, 0x02	; 2
    747e:	31 05       	cpc	r19, r1
    7480:	09 f4       	brne	.+2      	; 0x7484 <DIO_cnfg_channel+0x4a>
    7482:	5f c0       	rjmp	.+190    	; 0x7542 <DIO_cnfg_channel+0x108>
    7484:	8c 81       	ldd	r24, Y+4	; 0x04
    7486:	9d 81       	ldd	r25, Y+5	; 0x05
    7488:	83 30       	cpi	r24, 0x03	; 3
    748a:	91 05       	cpc	r25, r1
    748c:	09 f4       	brne	.+2      	; 0x7490 <DIO_cnfg_channel+0x56>
    748e:	85 c0       	rjmp	.+266    	; 0x759a <DIO_cnfg_channel+0x160>
    7490:	af c0       	rjmp	.+350    	; 0x75f0 <DIO_cnfg_channel+0x1b6>
	{
	case DIO_PORTA:
		if(direction==DIO_INPUT)
    7492:	8b 81       	ldd	r24, Y+3	; 0x03
    7494:	88 23       	and	r24, r24
    7496:	a9 f4       	brne	.+42     	; 0x74c2 <DIO_cnfg_channel+0x88>
		{
			CLEAR_BIT(DIO_DDRA_REG,pin);
    7498:	aa e3       	ldi	r26, 0x3A	; 58
    749a:	b0 e0       	ldi	r27, 0x00	; 0
    749c:	ea e3       	ldi	r30, 0x3A	; 58
    749e:	f0 e0       	ldi	r31, 0x00	; 0
    74a0:	80 81       	ld	r24, Z
    74a2:	48 2f       	mov	r20, r24
    74a4:	8a 81       	ldd	r24, Y+2	; 0x02
    74a6:	28 2f       	mov	r18, r24
    74a8:	30 e0       	ldi	r19, 0x00	; 0
    74aa:	81 e0       	ldi	r24, 0x01	; 1
    74ac:	90 e0       	ldi	r25, 0x00	; 0
    74ae:	02 2e       	mov	r0, r18
    74b0:	02 c0       	rjmp	.+4      	; 0x74b6 <DIO_cnfg_channel+0x7c>
    74b2:	88 0f       	add	r24, r24
    74b4:	99 1f       	adc	r25, r25
    74b6:	0a 94       	dec	r0
    74b8:	e2 f7       	brpl	.-8      	; 0x74b2 <DIO_cnfg_channel+0x78>
    74ba:	80 95       	com	r24
    74bc:	84 23       	and	r24, r20
    74be:	8c 93       	st	X, r24
    74c0:	97 c0       	rjmp	.+302    	; 0x75f0 <DIO_cnfg_channel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    74c2:	aa e3       	ldi	r26, 0x3A	; 58
    74c4:	b0 e0       	ldi	r27, 0x00	; 0
    74c6:	ea e3       	ldi	r30, 0x3A	; 58
    74c8:	f0 e0       	ldi	r31, 0x00	; 0
    74ca:	80 81       	ld	r24, Z
    74cc:	48 2f       	mov	r20, r24
    74ce:	8a 81       	ldd	r24, Y+2	; 0x02
    74d0:	28 2f       	mov	r18, r24
    74d2:	30 e0       	ldi	r19, 0x00	; 0
    74d4:	81 e0       	ldi	r24, 0x01	; 1
    74d6:	90 e0       	ldi	r25, 0x00	; 0
    74d8:	02 2e       	mov	r0, r18
    74da:	02 c0       	rjmp	.+4      	; 0x74e0 <DIO_cnfg_channel+0xa6>
    74dc:	88 0f       	add	r24, r24
    74de:	99 1f       	adc	r25, r25
    74e0:	0a 94       	dec	r0
    74e2:	e2 f7       	brpl	.-8      	; 0x74dc <DIO_cnfg_channel+0xa2>
    74e4:	84 2b       	or	r24, r20
    74e6:	8c 93       	st	X, r24
    74e8:	83 c0       	rjmp	.+262    	; 0x75f0 <DIO_cnfg_channel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if(direction==DIO_INPUT)
    74ea:	8b 81       	ldd	r24, Y+3	; 0x03
    74ec:	88 23       	and	r24, r24
    74ee:	a9 f4       	brne	.+42     	; 0x751a <DIO_cnfg_channel+0xe0>
		{
			CLEAR_BIT(DIO_DDRB_REG,pin);
    74f0:	a7 e3       	ldi	r26, 0x37	; 55
    74f2:	b0 e0       	ldi	r27, 0x00	; 0
    74f4:	e7 e3       	ldi	r30, 0x37	; 55
    74f6:	f0 e0       	ldi	r31, 0x00	; 0
    74f8:	80 81       	ld	r24, Z
    74fa:	48 2f       	mov	r20, r24
    74fc:	8a 81       	ldd	r24, Y+2	; 0x02
    74fe:	28 2f       	mov	r18, r24
    7500:	30 e0       	ldi	r19, 0x00	; 0
    7502:	81 e0       	ldi	r24, 0x01	; 1
    7504:	90 e0       	ldi	r25, 0x00	; 0
    7506:	02 2e       	mov	r0, r18
    7508:	02 c0       	rjmp	.+4      	; 0x750e <DIO_cnfg_channel+0xd4>
    750a:	88 0f       	add	r24, r24
    750c:	99 1f       	adc	r25, r25
    750e:	0a 94       	dec	r0
    7510:	e2 f7       	brpl	.-8      	; 0x750a <DIO_cnfg_channel+0xd0>
    7512:	80 95       	com	r24
    7514:	84 23       	and	r24, r20
    7516:	8c 93       	st	X, r24
    7518:	6b c0       	rjmp	.+214    	; 0x75f0 <DIO_cnfg_channel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    751a:	a7 e3       	ldi	r26, 0x37	; 55
    751c:	b0 e0       	ldi	r27, 0x00	; 0
    751e:	e7 e3       	ldi	r30, 0x37	; 55
    7520:	f0 e0       	ldi	r31, 0x00	; 0
    7522:	80 81       	ld	r24, Z
    7524:	48 2f       	mov	r20, r24
    7526:	8a 81       	ldd	r24, Y+2	; 0x02
    7528:	28 2f       	mov	r18, r24
    752a:	30 e0       	ldi	r19, 0x00	; 0
    752c:	81 e0       	ldi	r24, 0x01	; 1
    752e:	90 e0       	ldi	r25, 0x00	; 0
    7530:	02 2e       	mov	r0, r18
    7532:	02 c0       	rjmp	.+4      	; 0x7538 <DIO_cnfg_channel+0xfe>
    7534:	88 0f       	add	r24, r24
    7536:	99 1f       	adc	r25, r25
    7538:	0a 94       	dec	r0
    753a:	e2 f7       	brpl	.-8      	; 0x7534 <DIO_cnfg_channel+0xfa>
    753c:	84 2b       	or	r24, r20
    753e:	8c 93       	st	X, r24
    7540:	57 c0       	rjmp	.+174    	; 0x75f0 <DIO_cnfg_channel+0x1b6>
		}
		break;


	case DIO_PORTC:
			if(direction==DIO_INPUT)
    7542:	8b 81       	ldd	r24, Y+3	; 0x03
    7544:	88 23       	and	r24, r24
    7546:	a9 f4       	brne	.+42     	; 0x7572 <DIO_cnfg_channel+0x138>
			{
				CLEAR_BIT(DIO_DDRC_REG,pin);
    7548:	a4 e3       	ldi	r26, 0x34	; 52
    754a:	b0 e0       	ldi	r27, 0x00	; 0
    754c:	e4 e3       	ldi	r30, 0x34	; 52
    754e:	f0 e0       	ldi	r31, 0x00	; 0
    7550:	80 81       	ld	r24, Z
    7552:	48 2f       	mov	r20, r24
    7554:	8a 81       	ldd	r24, Y+2	; 0x02
    7556:	28 2f       	mov	r18, r24
    7558:	30 e0       	ldi	r19, 0x00	; 0
    755a:	81 e0       	ldi	r24, 0x01	; 1
    755c:	90 e0       	ldi	r25, 0x00	; 0
    755e:	02 2e       	mov	r0, r18
    7560:	02 c0       	rjmp	.+4      	; 0x7566 <DIO_cnfg_channel+0x12c>
    7562:	88 0f       	add	r24, r24
    7564:	99 1f       	adc	r25, r25
    7566:	0a 94       	dec	r0
    7568:	e2 f7       	brpl	.-8      	; 0x7562 <DIO_cnfg_channel+0x128>
    756a:	80 95       	com	r24
    756c:	84 23       	and	r24, r20
    756e:	8c 93       	st	X, r24
    7570:	3f c0       	rjmp	.+126    	; 0x75f0 <DIO_cnfg_channel+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRC_REG,pin);
    7572:	a4 e3       	ldi	r26, 0x34	; 52
    7574:	b0 e0       	ldi	r27, 0x00	; 0
    7576:	e4 e3       	ldi	r30, 0x34	; 52
    7578:	f0 e0       	ldi	r31, 0x00	; 0
    757a:	80 81       	ld	r24, Z
    757c:	48 2f       	mov	r20, r24
    757e:	8a 81       	ldd	r24, Y+2	; 0x02
    7580:	28 2f       	mov	r18, r24
    7582:	30 e0       	ldi	r19, 0x00	; 0
    7584:	81 e0       	ldi	r24, 0x01	; 1
    7586:	90 e0       	ldi	r25, 0x00	; 0
    7588:	02 2e       	mov	r0, r18
    758a:	02 c0       	rjmp	.+4      	; 0x7590 <DIO_cnfg_channel+0x156>
    758c:	88 0f       	add	r24, r24
    758e:	99 1f       	adc	r25, r25
    7590:	0a 94       	dec	r0
    7592:	e2 f7       	brpl	.-8      	; 0x758c <DIO_cnfg_channel+0x152>
    7594:	84 2b       	or	r24, r20
    7596:	8c 93       	st	X, r24
    7598:	2b c0       	rjmp	.+86     	; 0x75f0 <DIO_cnfg_channel+0x1b6>
			}
			break;

	case DIO_PORTD:
			if(direction==DIO_INPUT)
    759a:	8b 81       	ldd	r24, Y+3	; 0x03
    759c:	88 23       	and	r24, r24
    759e:	a9 f4       	brne	.+42     	; 0x75ca <DIO_cnfg_channel+0x190>
			{
				CLEAR_BIT(DIO_DDRD_REG,pin);
    75a0:	a1 e3       	ldi	r26, 0x31	; 49
    75a2:	b0 e0       	ldi	r27, 0x00	; 0
    75a4:	e1 e3       	ldi	r30, 0x31	; 49
    75a6:	f0 e0       	ldi	r31, 0x00	; 0
    75a8:	80 81       	ld	r24, Z
    75aa:	48 2f       	mov	r20, r24
    75ac:	8a 81       	ldd	r24, Y+2	; 0x02
    75ae:	28 2f       	mov	r18, r24
    75b0:	30 e0       	ldi	r19, 0x00	; 0
    75b2:	81 e0       	ldi	r24, 0x01	; 1
    75b4:	90 e0       	ldi	r25, 0x00	; 0
    75b6:	02 2e       	mov	r0, r18
    75b8:	02 c0       	rjmp	.+4      	; 0x75be <DIO_cnfg_channel+0x184>
    75ba:	88 0f       	add	r24, r24
    75bc:	99 1f       	adc	r25, r25
    75be:	0a 94       	dec	r0
    75c0:	e2 f7       	brpl	.-8      	; 0x75ba <DIO_cnfg_channel+0x180>
    75c2:	80 95       	com	r24
    75c4:	84 23       	and	r24, r20
    75c6:	8c 93       	st	X, r24
    75c8:	13 c0       	rjmp	.+38     	; 0x75f0 <DIO_cnfg_channel+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRD_REG,pin);
    75ca:	a1 e3       	ldi	r26, 0x31	; 49
    75cc:	b0 e0       	ldi	r27, 0x00	; 0
    75ce:	e1 e3       	ldi	r30, 0x31	; 49
    75d0:	f0 e0       	ldi	r31, 0x00	; 0
    75d2:	80 81       	ld	r24, Z
    75d4:	48 2f       	mov	r20, r24
    75d6:	8a 81       	ldd	r24, Y+2	; 0x02
    75d8:	28 2f       	mov	r18, r24
    75da:	30 e0       	ldi	r19, 0x00	; 0
    75dc:	81 e0       	ldi	r24, 0x01	; 1
    75de:	90 e0       	ldi	r25, 0x00	; 0
    75e0:	02 2e       	mov	r0, r18
    75e2:	02 c0       	rjmp	.+4      	; 0x75e8 <DIO_cnfg_channel+0x1ae>
    75e4:	88 0f       	add	r24, r24
    75e6:	99 1f       	adc	r25, r25
    75e8:	0a 94       	dec	r0
    75ea:	e2 f7       	brpl	.-8      	; 0x75e4 <DIO_cnfg_channel+0x1aa>
    75ec:	84 2b       	or	r24, r20
    75ee:	8c 93       	st	X, r24
			}
			break;
	}
}
    75f0:	0f 90       	pop	r0
    75f2:	0f 90       	pop	r0
    75f4:	0f 90       	pop	r0
    75f6:	0f 90       	pop	r0
    75f8:	0f 90       	pop	r0
    75fa:	cf 91       	pop	r28
    75fc:	df 91       	pop	r29
    75fe:	08 95       	ret

00007600 <DIO_write>:




void DIO_write (dio_port_t port, dio_pin_t pin, dio_level_t level)
{
    7600:	df 93       	push	r29
    7602:	cf 93       	push	r28
    7604:	00 d0       	rcall	.+0      	; 0x7606 <DIO_write+0x6>
    7606:	00 d0       	rcall	.+0      	; 0x7608 <DIO_write+0x8>
    7608:	0f 92       	push	r0
    760a:	cd b7       	in	r28, 0x3d	; 61
    760c:	de b7       	in	r29, 0x3e	; 62
    760e:	89 83       	std	Y+1, r24	; 0x01
    7610:	6a 83       	std	Y+2, r22	; 0x02
    7612:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    7614:	89 81       	ldd	r24, Y+1	; 0x01
    7616:	28 2f       	mov	r18, r24
    7618:	30 e0       	ldi	r19, 0x00	; 0
    761a:	3d 83       	std	Y+5, r19	; 0x05
    761c:	2c 83       	std	Y+4, r18	; 0x04
    761e:	8c 81       	ldd	r24, Y+4	; 0x04
    7620:	9d 81       	ldd	r25, Y+5	; 0x05
    7622:	81 30       	cpi	r24, 0x01	; 1
    7624:	91 05       	cpc	r25, r1
    7626:	09 f4       	brne	.+2      	; 0x762a <DIO_write+0x2a>
    7628:	43 c0       	rjmp	.+134    	; 0x76b0 <DIO_write+0xb0>
    762a:	2c 81       	ldd	r18, Y+4	; 0x04
    762c:	3d 81       	ldd	r19, Y+5	; 0x05
    762e:	22 30       	cpi	r18, 0x02	; 2
    7630:	31 05       	cpc	r19, r1
    7632:	2c f4       	brge	.+10     	; 0x763e <DIO_write+0x3e>
    7634:	8c 81       	ldd	r24, Y+4	; 0x04
    7636:	9d 81       	ldd	r25, Y+5	; 0x05
    7638:	00 97       	sbiw	r24, 0x00	; 0
    763a:	71 f0       	breq	.+28     	; 0x7658 <DIO_write+0x58>
    763c:	bc c0       	rjmp	.+376    	; 0x77b6 <DIO_write+0x1b6>
    763e:	2c 81       	ldd	r18, Y+4	; 0x04
    7640:	3d 81       	ldd	r19, Y+5	; 0x05
    7642:	22 30       	cpi	r18, 0x02	; 2
    7644:	31 05       	cpc	r19, r1
    7646:	09 f4       	brne	.+2      	; 0x764a <DIO_write+0x4a>
    7648:	5f c0       	rjmp	.+190    	; 0x7708 <DIO_write+0x108>
    764a:	8c 81       	ldd	r24, Y+4	; 0x04
    764c:	9d 81       	ldd	r25, Y+5	; 0x05
    764e:	83 30       	cpi	r24, 0x03	; 3
    7650:	91 05       	cpc	r25, r1
    7652:	09 f4       	brne	.+2      	; 0x7656 <DIO_write+0x56>
    7654:	85 c0       	rjmp	.+266    	; 0x7760 <DIO_write+0x160>
    7656:	af c0       	rjmp	.+350    	; 0x77b6 <DIO_write+0x1b6>
		{
		case DIO_PORTA:
			if (level == DIO_HIGH)
    7658:	8b 81       	ldd	r24, Y+3	; 0x03
    765a:	81 30       	cpi	r24, 0x01	; 1
    765c:	a1 f4       	brne	.+40     	; 0x7686 <DIO_write+0x86>
			{
				SET_BIT(DIO_PORTA_REG,pin);
    765e:	ab e3       	ldi	r26, 0x3B	; 59
    7660:	b0 e0       	ldi	r27, 0x00	; 0
    7662:	eb e3       	ldi	r30, 0x3B	; 59
    7664:	f0 e0       	ldi	r31, 0x00	; 0
    7666:	80 81       	ld	r24, Z
    7668:	48 2f       	mov	r20, r24
    766a:	8a 81       	ldd	r24, Y+2	; 0x02
    766c:	28 2f       	mov	r18, r24
    766e:	30 e0       	ldi	r19, 0x00	; 0
    7670:	81 e0       	ldi	r24, 0x01	; 1
    7672:	90 e0       	ldi	r25, 0x00	; 0
    7674:	02 2e       	mov	r0, r18
    7676:	02 c0       	rjmp	.+4      	; 0x767c <DIO_write+0x7c>
    7678:	88 0f       	add	r24, r24
    767a:	99 1f       	adc	r25, r25
    767c:	0a 94       	dec	r0
    767e:	e2 f7       	brpl	.-8      	; 0x7678 <DIO_write+0x78>
    7680:	84 2b       	or	r24, r20
    7682:	8c 93       	st	X, r24
    7684:	98 c0       	rjmp	.+304    	; 0x77b6 <DIO_write+0x1b6>
			}
			else
			{
				CLEAR_BIT(DIO_PORTA_REG,pin);
    7686:	ab e3       	ldi	r26, 0x3B	; 59
    7688:	b0 e0       	ldi	r27, 0x00	; 0
    768a:	eb e3       	ldi	r30, 0x3B	; 59
    768c:	f0 e0       	ldi	r31, 0x00	; 0
    768e:	80 81       	ld	r24, Z
    7690:	48 2f       	mov	r20, r24
    7692:	8a 81       	ldd	r24, Y+2	; 0x02
    7694:	28 2f       	mov	r18, r24
    7696:	30 e0       	ldi	r19, 0x00	; 0
    7698:	81 e0       	ldi	r24, 0x01	; 1
    769a:	90 e0       	ldi	r25, 0x00	; 0
    769c:	02 2e       	mov	r0, r18
    769e:	02 c0       	rjmp	.+4      	; 0x76a4 <DIO_write+0xa4>
    76a0:	88 0f       	add	r24, r24
    76a2:	99 1f       	adc	r25, r25
    76a4:	0a 94       	dec	r0
    76a6:	e2 f7       	brpl	.-8      	; 0x76a0 <DIO_write+0xa0>
    76a8:	80 95       	com	r24
    76aa:	84 23       	and	r24, r20
    76ac:	8c 93       	st	X, r24
    76ae:	83 c0       	rjmp	.+262    	; 0x77b6 <DIO_write+0x1b6>
			}
			break;
		case DIO_PORTB:
			if (level == DIO_HIGH)
    76b0:	8b 81       	ldd	r24, Y+3	; 0x03
    76b2:	81 30       	cpi	r24, 0x01	; 1
    76b4:	a1 f4       	brne	.+40     	; 0x76de <DIO_write+0xde>
			{
				SET_BIT(DIO_PORTB_REG,pin);
    76b6:	a8 e3       	ldi	r26, 0x38	; 56
    76b8:	b0 e0       	ldi	r27, 0x00	; 0
    76ba:	e8 e3       	ldi	r30, 0x38	; 56
    76bc:	f0 e0       	ldi	r31, 0x00	; 0
    76be:	80 81       	ld	r24, Z
    76c0:	48 2f       	mov	r20, r24
    76c2:	8a 81       	ldd	r24, Y+2	; 0x02
    76c4:	28 2f       	mov	r18, r24
    76c6:	30 e0       	ldi	r19, 0x00	; 0
    76c8:	81 e0       	ldi	r24, 0x01	; 1
    76ca:	90 e0       	ldi	r25, 0x00	; 0
    76cc:	02 2e       	mov	r0, r18
    76ce:	02 c0       	rjmp	.+4      	; 0x76d4 <DIO_write+0xd4>
    76d0:	88 0f       	add	r24, r24
    76d2:	99 1f       	adc	r25, r25
    76d4:	0a 94       	dec	r0
    76d6:	e2 f7       	brpl	.-8      	; 0x76d0 <DIO_write+0xd0>
    76d8:	84 2b       	or	r24, r20
    76da:	8c 93       	st	X, r24
    76dc:	6c c0       	rjmp	.+216    	; 0x77b6 <DIO_write+0x1b6>
			}
			else
			{
				CLEAR_BIT(DIO_PORTB_REG,pin);
    76de:	a8 e3       	ldi	r26, 0x38	; 56
    76e0:	b0 e0       	ldi	r27, 0x00	; 0
    76e2:	e8 e3       	ldi	r30, 0x38	; 56
    76e4:	f0 e0       	ldi	r31, 0x00	; 0
    76e6:	80 81       	ld	r24, Z
    76e8:	48 2f       	mov	r20, r24
    76ea:	8a 81       	ldd	r24, Y+2	; 0x02
    76ec:	28 2f       	mov	r18, r24
    76ee:	30 e0       	ldi	r19, 0x00	; 0
    76f0:	81 e0       	ldi	r24, 0x01	; 1
    76f2:	90 e0       	ldi	r25, 0x00	; 0
    76f4:	02 2e       	mov	r0, r18
    76f6:	02 c0       	rjmp	.+4      	; 0x76fc <DIO_write+0xfc>
    76f8:	88 0f       	add	r24, r24
    76fa:	99 1f       	adc	r25, r25
    76fc:	0a 94       	dec	r0
    76fe:	e2 f7       	brpl	.-8      	; 0x76f8 <DIO_write+0xf8>
    7700:	80 95       	com	r24
    7702:	84 23       	and	r24, r20
    7704:	8c 93       	st	X, r24
    7706:	57 c0       	rjmp	.+174    	; 0x77b6 <DIO_write+0x1b6>
			}
			break;
		case DIO_PORTC:
			if (level == DIO_HIGH)
    7708:	8b 81       	ldd	r24, Y+3	; 0x03
    770a:	81 30       	cpi	r24, 0x01	; 1
    770c:	a1 f4       	brne	.+40     	; 0x7736 <DIO_write+0x136>
			{
				SET_BIT(DIO_PORTC_REG,pin);
    770e:	a5 e3       	ldi	r26, 0x35	; 53
    7710:	b0 e0       	ldi	r27, 0x00	; 0
    7712:	e5 e3       	ldi	r30, 0x35	; 53
    7714:	f0 e0       	ldi	r31, 0x00	; 0
    7716:	80 81       	ld	r24, Z
    7718:	48 2f       	mov	r20, r24
    771a:	8a 81       	ldd	r24, Y+2	; 0x02
    771c:	28 2f       	mov	r18, r24
    771e:	30 e0       	ldi	r19, 0x00	; 0
    7720:	81 e0       	ldi	r24, 0x01	; 1
    7722:	90 e0       	ldi	r25, 0x00	; 0
    7724:	02 2e       	mov	r0, r18
    7726:	02 c0       	rjmp	.+4      	; 0x772c <DIO_write+0x12c>
    7728:	88 0f       	add	r24, r24
    772a:	99 1f       	adc	r25, r25
    772c:	0a 94       	dec	r0
    772e:	e2 f7       	brpl	.-8      	; 0x7728 <DIO_write+0x128>
    7730:	84 2b       	or	r24, r20
    7732:	8c 93       	st	X, r24
    7734:	40 c0       	rjmp	.+128    	; 0x77b6 <DIO_write+0x1b6>
			}
			else
			{
				CLEAR_BIT(DIO_PORTC_REG,pin);
    7736:	a5 e3       	ldi	r26, 0x35	; 53
    7738:	b0 e0       	ldi	r27, 0x00	; 0
    773a:	e5 e3       	ldi	r30, 0x35	; 53
    773c:	f0 e0       	ldi	r31, 0x00	; 0
    773e:	80 81       	ld	r24, Z
    7740:	48 2f       	mov	r20, r24
    7742:	8a 81       	ldd	r24, Y+2	; 0x02
    7744:	28 2f       	mov	r18, r24
    7746:	30 e0       	ldi	r19, 0x00	; 0
    7748:	81 e0       	ldi	r24, 0x01	; 1
    774a:	90 e0       	ldi	r25, 0x00	; 0
    774c:	02 2e       	mov	r0, r18
    774e:	02 c0       	rjmp	.+4      	; 0x7754 <DIO_write+0x154>
    7750:	88 0f       	add	r24, r24
    7752:	99 1f       	adc	r25, r25
    7754:	0a 94       	dec	r0
    7756:	e2 f7       	brpl	.-8      	; 0x7750 <DIO_write+0x150>
    7758:	80 95       	com	r24
    775a:	84 23       	and	r24, r20
    775c:	8c 93       	st	X, r24
    775e:	2b c0       	rjmp	.+86     	; 0x77b6 <DIO_write+0x1b6>
			}
			break;
		case DIO_PORTD:
			if (level == DIO_HIGH)
    7760:	8b 81       	ldd	r24, Y+3	; 0x03
    7762:	81 30       	cpi	r24, 0x01	; 1
    7764:	a1 f4       	brne	.+40     	; 0x778e <DIO_write+0x18e>
			{
				SET_BIT(DIO_PORTD_REG,pin);
    7766:	a2 e3       	ldi	r26, 0x32	; 50
    7768:	b0 e0       	ldi	r27, 0x00	; 0
    776a:	e2 e3       	ldi	r30, 0x32	; 50
    776c:	f0 e0       	ldi	r31, 0x00	; 0
    776e:	80 81       	ld	r24, Z
    7770:	48 2f       	mov	r20, r24
    7772:	8a 81       	ldd	r24, Y+2	; 0x02
    7774:	28 2f       	mov	r18, r24
    7776:	30 e0       	ldi	r19, 0x00	; 0
    7778:	81 e0       	ldi	r24, 0x01	; 1
    777a:	90 e0       	ldi	r25, 0x00	; 0
    777c:	02 2e       	mov	r0, r18
    777e:	02 c0       	rjmp	.+4      	; 0x7784 <DIO_write+0x184>
    7780:	88 0f       	add	r24, r24
    7782:	99 1f       	adc	r25, r25
    7784:	0a 94       	dec	r0
    7786:	e2 f7       	brpl	.-8      	; 0x7780 <DIO_write+0x180>
    7788:	84 2b       	or	r24, r20
    778a:	8c 93       	st	X, r24
    778c:	14 c0       	rjmp	.+40     	; 0x77b6 <DIO_write+0x1b6>
			}
			else
			{
				CLEAR_BIT(DIO_PORTD_REG,pin);
    778e:	a2 e3       	ldi	r26, 0x32	; 50
    7790:	b0 e0       	ldi	r27, 0x00	; 0
    7792:	e2 e3       	ldi	r30, 0x32	; 50
    7794:	f0 e0       	ldi	r31, 0x00	; 0
    7796:	80 81       	ld	r24, Z
    7798:	48 2f       	mov	r20, r24
    779a:	8a 81       	ldd	r24, Y+2	; 0x02
    779c:	28 2f       	mov	r18, r24
    779e:	30 e0       	ldi	r19, 0x00	; 0
    77a0:	81 e0       	ldi	r24, 0x01	; 1
    77a2:	90 e0       	ldi	r25, 0x00	; 0
    77a4:	02 2e       	mov	r0, r18
    77a6:	02 c0       	rjmp	.+4      	; 0x77ac <DIO_write+0x1ac>
    77a8:	88 0f       	add	r24, r24
    77aa:	99 1f       	adc	r25, r25
    77ac:	0a 94       	dec	r0
    77ae:	e2 f7       	brpl	.-8      	; 0x77a8 <DIO_write+0x1a8>
    77b0:	80 95       	com	r24
    77b2:	84 23       	and	r24, r20
    77b4:	8c 93       	st	X, r24
			break;
		}



}
    77b6:	0f 90       	pop	r0
    77b8:	0f 90       	pop	r0
    77ba:	0f 90       	pop	r0
    77bc:	0f 90       	pop	r0
    77be:	0f 90       	pop	r0
    77c0:	cf 91       	pop	r28
    77c2:	df 91       	pop	r29
    77c4:	08 95       	ret

000077c6 <DIO_write_Group>:


void DIO_write_Group(dio_port_t port,u8 mask,u8 data)
{
    77c6:	df 93       	push	r29
    77c8:	cf 93       	push	r28
    77ca:	00 d0       	rcall	.+0      	; 0x77cc <DIO_write_Group+0x6>
    77cc:	00 d0       	rcall	.+0      	; 0x77ce <DIO_write_Group+0x8>
    77ce:	0f 92       	push	r0
    77d0:	cd b7       	in	r28, 0x3d	; 61
    77d2:	de b7       	in	r29, 0x3e	; 62
    77d4:	89 83       	std	Y+1, r24	; 0x01
    77d6:	6a 83       	std	Y+2, r22	; 0x02
    77d8:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    77da:	89 81       	ldd	r24, Y+1	; 0x01
    77dc:	28 2f       	mov	r18, r24
    77de:	30 e0       	ldi	r19, 0x00	; 0
    77e0:	3d 83       	std	Y+5, r19	; 0x05
    77e2:	2c 83       	std	Y+4, r18	; 0x04
    77e4:	8c 81       	ldd	r24, Y+4	; 0x04
    77e6:	9d 81       	ldd	r25, Y+5	; 0x05
    77e8:	81 30       	cpi	r24, 0x01	; 1
    77ea:	91 05       	cpc	r25, r1
    77ec:	29 f1       	breq	.+74     	; 0x7838 <DIO_write_Group+0x72>
    77ee:	2c 81       	ldd	r18, Y+4	; 0x04
    77f0:	3d 81       	ldd	r19, Y+5	; 0x05
    77f2:	22 30       	cpi	r18, 0x02	; 2
    77f4:	31 05       	cpc	r19, r1
    77f6:	2c f4       	brge	.+10     	; 0x7802 <DIO_write_Group+0x3c>
    77f8:	8c 81       	ldd	r24, Y+4	; 0x04
    77fa:	9d 81       	ldd	r25, Y+5	; 0x05
    77fc:	00 97       	sbiw	r24, 0x00	; 0
    77fe:	61 f0       	breq	.+24     	; 0x7818 <DIO_write_Group+0x52>
    7800:	4a c0       	rjmp	.+148    	; 0x7896 <DIO_write_Group+0xd0>
    7802:	2c 81       	ldd	r18, Y+4	; 0x04
    7804:	3d 81       	ldd	r19, Y+5	; 0x05
    7806:	22 30       	cpi	r18, 0x02	; 2
    7808:	31 05       	cpc	r19, r1
    780a:	31 f1       	breq	.+76     	; 0x7858 <DIO_write_Group+0x92>
    780c:	8c 81       	ldd	r24, Y+4	; 0x04
    780e:	9d 81       	ldd	r25, Y+5	; 0x05
    7810:	83 30       	cpi	r24, 0x03	; 3
    7812:	91 05       	cpc	r25, r1
    7814:	89 f1       	breq	.+98     	; 0x7878 <DIO_write_Group+0xb2>
    7816:	3f c0       	rjmp	.+126    	; 0x7896 <DIO_write_Group+0xd0>
	{
	case DIO_PORTA:
		DIO_PORTA_REG =(DIO_PORTA_REG&~mask)|(data&mask);
    7818:	ab e3       	ldi	r26, 0x3B	; 59
    781a:	b0 e0       	ldi	r27, 0x00	; 0
    781c:	eb e3       	ldi	r30, 0x3B	; 59
    781e:	f0 e0       	ldi	r31, 0x00	; 0
    7820:	80 81       	ld	r24, Z
    7822:	98 2f       	mov	r25, r24
    7824:	8a 81       	ldd	r24, Y+2	; 0x02
    7826:	80 95       	com	r24
    7828:	29 2f       	mov	r18, r25
    782a:	28 23       	and	r18, r24
    782c:	9b 81       	ldd	r25, Y+3	; 0x03
    782e:	8a 81       	ldd	r24, Y+2	; 0x02
    7830:	89 23       	and	r24, r25
    7832:	82 2b       	or	r24, r18
    7834:	8c 93       	st	X, r24
    7836:	2f c0       	rjmp	.+94     	; 0x7896 <DIO_write_Group+0xd0>
		break;
	case DIO_PORTB:
		DIO_PORTB_REG =(DIO_PORTB_REG&~mask)|(data&mask);
    7838:	a8 e3       	ldi	r26, 0x38	; 56
    783a:	b0 e0       	ldi	r27, 0x00	; 0
    783c:	e8 e3       	ldi	r30, 0x38	; 56
    783e:	f0 e0       	ldi	r31, 0x00	; 0
    7840:	80 81       	ld	r24, Z
    7842:	98 2f       	mov	r25, r24
    7844:	8a 81       	ldd	r24, Y+2	; 0x02
    7846:	80 95       	com	r24
    7848:	29 2f       	mov	r18, r25
    784a:	28 23       	and	r18, r24
    784c:	9b 81       	ldd	r25, Y+3	; 0x03
    784e:	8a 81       	ldd	r24, Y+2	; 0x02
    7850:	89 23       	and	r24, r25
    7852:	82 2b       	or	r24, r18
    7854:	8c 93       	st	X, r24
    7856:	1f c0       	rjmp	.+62     	; 0x7896 <DIO_write_Group+0xd0>
		break;
	case DIO_PORTC:
		DIO_PORTC_REG =(DIO_PORTC_REG&~mask)|(data&mask);
    7858:	a5 e3       	ldi	r26, 0x35	; 53
    785a:	b0 e0       	ldi	r27, 0x00	; 0
    785c:	e5 e3       	ldi	r30, 0x35	; 53
    785e:	f0 e0       	ldi	r31, 0x00	; 0
    7860:	80 81       	ld	r24, Z
    7862:	98 2f       	mov	r25, r24
    7864:	8a 81       	ldd	r24, Y+2	; 0x02
    7866:	80 95       	com	r24
    7868:	29 2f       	mov	r18, r25
    786a:	28 23       	and	r18, r24
    786c:	9b 81       	ldd	r25, Y+3	; 0x03
    786e:	8a 81       	ldd	r24, Y+2	; 0x02
    7870:	89 23       	and	r24, r25
    7872:	82 2b       	or	r24, r18
    7874:	8c 93       	st	X, r24
    7876:	0f c0       	rjmp	.+30     	; 0x7896 <DIO_write_Group+0xd0>
		break;
	case DIO_PORTD:
			DIO_PORTD_REG =(DIO_PORTD_REG&~mask)|(data&mask);
    7878:	a2 e3       	ldi	r26, 0x32	; 50
    787a:	b0 e0       	ldi	r27, 0x00	; 0
    787c:	e2 e3       	ldi	r30, 0x32	; 50
    787e:	f0 e0       	ldi	r31, 0x00	; 0
    7880:	80 81       	ld	r24, Z
    7882:	98 2f       	mov	r25, r24
    7884:	8a 81       	ldd	r24, Y+2	; 0x02
    7886:	80 95       	com	r24
    7888:	29 2f       	mov	r18, r25
    788a:	28 23       	and	r18, r24
    788c:	9b 81       	ldd	r25, Y+3	; 0x03
    788e:	8a 81       	ldd	r24, Y+2	; 0x02
    7890:	89 23       	and	r24, r25
    7892:	82 2b       	or	r24, r18
    7894:	8c 93       	st	X, r24
		break;
		}
}
    7896:	0f 90       	pop	r0
    7898:	0f 90       	pop	r0
    789a:	0f 90       	pop	r0
    789c:	0f 90       	pop	r0
    789e:	0f 90       	pop	r0
    78a0:	cf 91       	pop	r28
    78a2:	df 91       	pop	r29
    78a4:	08 95       	ret

000078a6 <DIO_read>:



dio_level_t DIO_read(dio_port_t port,dio_pin_t pin )
{
    78a6:	df 93       	push	r29
    78a8:	cf 93       	push	r28
    78aa:	00 d0       	rcall	.+0      	; 0x78ac <DIO_read+0x6>
    78ac:	00 d0       	rcall	.+0      	; 0x78ae <DIO_read+0x8>
    78ae:	0f 92       	push	r0
    78b0:	cd b7       	in	r28, 0x3d	; 61
    78b2:	de b7       	in	r29, 0x3e	; 62
    78b4:	8a 83       	std	Y+2, r24	; 0x02
    78b6:	6b 83       	std	Y+3, r22	; 0x03
	dio_level_t loc_result = DIO_LOW;
    78b8:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    78ba:	8a 81       	ldd	r24, Y+2	; 0x02
    78bc:	28 2f       	mov	r18, r24
    78be:	30 e0       	ldi	r19, 0x00	; 0
    78c0:	3d 83       	std	Y+5, r19	; 0x05
    78c2:	2c 83       	std	Y+4, r18	; 0x04
    78c4:	4c 81       	ldd	r20, Y+4	; 0x04
    78c6:	5d 81       	ldd	r21, Y+5	; 0x05
    78c8:	41 30       	cpi	r20, 0x01	; 1
    78ca:	51 05       	cpc	r21, r1
    78cc:	09 f4       	brne	.+2      	; 0x78d0 <DIO_read+0x2a>
    78ce:	41 c0       	rjmp	.+130    	; 0x7952 <DIO_read+0xac>
    78d0:	8c 81       	ldd	r24, Y+4	; 0x04
    78d2:	9d 81       	ldd	r25, Y+5	; 0x05
    78d4:	82 30       	cpi	r24, 0x02	; 2
    78d6:	91 05       	cpc	r25, r1
    78d8:	34 f4       	brge	.+12     	; 0x78e6 <DIO_read+0x40>
    78da:	2c 81       	ldd	r18, Y+4	; 0x04
    78dc:	3d 81       	ldd	r19, Y+5	; 0x05
    78de:	21 15       	cp	r18, r1
    78e0:	31 05       	cpc	r19, r1
    78e2:	71 f0       	breq	.+28     	; 0x7900 <DIO_read+0x5a>
    78e4:	7d c0       	rjmp	.+250    	; 0x79e0 <DIO_read+0x13a>
    78e6:	4c 81       	ldd	r20, Y+4	; 0x04
    78e8:	5d 81       	ldd	r21, Y+5	; 0x05
    78ea:	42 30       	cpi	r20, 0x02	; 2
    78ec:	51 05       	cpc	r21, r1
    78ee:	09 f4       	brne	.+2      	; 0x78f2 <DIO_read+0x4c>
    78f0:	48 c0       	rjmp	.+144    	; 0x7982 <DIO_read+0xdc>
    78f2:	8c 81       	ldd	r24, Y+4	; 0x04
    78f4:	9d 81       	ldd	r25, Y+5	; 0x05
    78f6:	83 30       	cpi	r24, 0x03	; 3
    78f8:	91 05       	cpc	r25, r1
    78fa:	09 f4       	brne	.+2      	; 0x78fe <DIO_read+0x58>
    78fc:	5a c0       	rjmp	.+180    	; 0x79b2 <DIO_read+0x10c>
    78fe:	70 c0       	rjmp	.+224    	; 0x79e0 <DIO_read+0x13a>
	{
        case DIO_PORTA:

        	loc_result=CHECK_BIT(DIO_PINA_REG,pin);
    7900:	e9 e3       	ldi	r30, 0x39	; 57
    7902:	f0 e0       	ldi	r31, 0x00	; 0
    7904:	80 81       	ld	r24, Z
    7906:	28 2f       	mov	r18, r24
    7908:	30 e0       	ldi	r19, 0x00	; 0
    790a:	8b 81       	ldd	r24, Y+3	; 0x03
    790c:	88 2f       	mov	r24, r24
    790e:	90 e0       	ldi	r25, 0x00	; 0
    7910:	a9 01       	movw	r20, r18
    7912:	02 c0       	rjmp	.+4      	; 0x7918 <DIO_read+0x72>
    7914:	55 95       	asr	r21
    7916:	47 95       	ror	r20
    7918:	8a 95       	dec	r24
    791a:	e2 f7       	brpl	.-8      	; 0x7914 <DIO_read+0x6e>
    791c:	ca 01       	movw	r24, r20
    791e:	81 70       	andi	r24, 0x01	; 1
    7920:	89 83       	std	Y+1, r24	; 0x01
	if (CHECK_BIT(DIO_PINA_REG,pin) == 1)
    7922:	e9 e3       	ldi	r30, 0x39	; 57
    7924:	f0 e0       	ldi	r31, 0x00	; 0
    7926:	80 81       	ld	r24, Z
    7928:	28 2f       	mov	r18, r24
    792a:	30 e0       	ldi	r19, 0x00	; 0
    792c:	8b 81       	ldd	r24, Y+3	; 0x03
    792e:	88 2f       	mov	r24, r24
    7930:	90 e0       	ldi	r25, 0x00	; 0
    7932:	a9 01       	movw	r20, r18
    7934:	02 c0       	rjmp	.+4      	; 0x793a <DIO_read+0x94>
    7936:	55 95       	asr	r21
    7938:	47 95       	ror	r20
    793a:	8a 95       	dec	r24
    793c:	e2 f7       	brpl	.-8      	; 0x7936 <DIO_read+0x90>
    793e:	ca 01       	movw	r24, r20
    7940:	81 70       	andi	r24, 0x01	; 1
    7942:	90 70       	andi	r25, 0x00	; 0
    7944:	88 23       	and	r24, r24
    7946:	19 f0       	breq	.+6      	; 0x794e <DIO_read+0xa8>
		{
			loc_result = DIO_HIGH;
    7948:	81 e0       	ldi	r24, 0x01	; 1
    794a:	89 83       	std	Y+1, r24	; 0x01
    794c:	49 c0       	rjmp	.+146    	; 0x79e0 <DIO_read+0x13a>
		}
		else
		{
		loc_result = DIO_LOW;
    794e:	19 82       	std	Y+1, r1	; 0x01
    7950:	47 c0       	rjmp	.+142    	; 0x79e0 <DIO_read+0x13a>
		break;



         case DIO_PORTB:
					if (CHECK_BIT(DIO_PINB_REG,pin) == 1)
    7952:	e6 e3       	ldi	r30, 0x36	; 54
    7954:	f0 e0       	ldi	r31, 0x00	; 0
    7956:	80 81       	ld	r24, Z
    7958:	28 2f       	mov	r18, r24
    795a:	30 e0       	ldi	r19, 0x00	; 0
    795c:	8b 81       	ldd	r24, Y+3	; 0x03
    795e:	88 2f       	mov	r24, r24
    7960:	90 e0       	ldi	r25, 0x00	; 0
    7962:	a9 01       	movw	r20, r18
    7964:	02 c0       	rjmp	.+4      	; 0x796a <DIO_read+0xc4>
    7966:	55 95       	asr	r21
    7968:	47 95       	ror	r20
    796a:	8a 95       	dec	r24
    796c:	e2 f7       	brpl	.-8      	; 0x7966 <DIO_read+0xc0>
    796e:	ca 01       	movw	r24, r20
    7970:	81 70       	andi	r24, 0x01	; 1
    7972:	90 70       	andi	r25, 0x00	; 0
    7974:	88 23       	and	r24, r24
    7976:	19 f0       	breq	.+6      	; 0x797e <DIO_read+0xd8>
					{
						loc_result = DIO_HIGH;
    7978:	81 e0       	ldi	r24, 0x01	; 1
    797a:	89 83       	std	Y+1, r24	; 0x01
    797c:	31 c0       	rjmp	.+98     	; 0x79e0 <DIO_read+0x13a>
					}
					else
					{
						loc_result = DIO_LOW;
    797e:	19 82       	std	Y+1, r1	; 0x01
    7980:	2f c0       	rjmp	.+94     	; 0x79e0 <DIO_read+0x13a>
					}
					break;

				case DIO_PORTC:
					if (CHECK_BIT(DIO_PINC_REG,pin) == 1)
    7982:	e3 e3       	ldi	r30, 0x33	; 51
    7984:	f0 e0       	ldi	r31, 0x00	; 0
    7986:	80 81       	ld	r24, Z
    7988:	28 2f       	mov	r18, r24
    798a:	30 e0       	ldi	r19, 0x00	; 0
    798c:	8b 81       	ldd	r24, Y+3	; 0x03
    798e:	88 2f       	mov	r24, r24
    7990:	90 e0       	ldi	r25, 0x00	; 0
    7992:	a9 01       	movw	r20, r18
    7994:	02 c0       	rjmp	.+4      	; 0x799a <DIO_read+0xf4>
    7996:	55 95       	asr	r21
    7998:	47 95       	ror	r20
    799a:	8a 95       	dec	r24
    799c:	e2 f7       	brpl	.-8      	; 0x7996 <DIO_read+0xf0>
    799e:	ca 01       	movw	r24, r20
    79a0:	81 70       	andi	r24, 0x01	; 1
    79a2:	90 70       	andi	r25, 0x00	; 0
    79a4:	88 23       	and	r24, r24
    79a6:	19 f0       	breq	.+6      	; 0x79ae <DIO_read+0x108>
					{
						loc_result = DIO_HIGH;
    79a8:	81 e0       	ldi	r24, 0x01	; 1
    79aa:	89 83       	std	Y+1, r24	; 0x01
    79ac:	19 c0       	rjmp	.+50     	; 0x79e0 <DIO_read+0x13a>
					}
					else
					{
						loc_result = DIO_LOW;
    79ae:	19 82       	std	Y+1, r1	; 0x01
    79b0:	17 c0       	rjmp	.+46     	; 0x79e0 <DIO_read+0x13a>
					}
					break;

				case DIO_PORTD:
					if (CHECK_BIT(DIO_PIND_REG,pin) == 1)
    79b2:	e0 e3       	ldi	r30, 0x30	; 48
    79b4:	f0 e0       	ldi	r31, 0x00	; 0
    79b6:	80 81       	ld	r24, Z
    79b8:	28 2f       	mov	r18, r24
    79ba:	30 e0       	ldi	r19, 0x00	; 0
    79bc:	8b 81       	ldd	r24, Y+3	; 0x03
    79be:	88 2f       	mov	r24, r24
    79c0:	90 e0       	ldi	r25, 0x00	; 0
    79c2:	a9 01       	movw	r20, r18
    79c4:	02 c0       	rjmp	.+4      	; 0x79ca <DIO_read+0x124>
    79c6:	55 95       	asr	r21
    79c8:	47 95       	ror	r20
    79ca:	8a 95       	dec	r24
    79cc:	e2 f7       	brpl	.-8      	; 0x79c6 <DIO_read+0x120>
    79ce:	ca 01       	movw	r24, r20
    79d0:	81 70       	andi	r24, 0x01	; 1
    79d2:	90 70       	andi	r25, 0x00	; 0
    79d4:	88 23       	and	r24, r24
    79d6:	19 f0       	breq	.+6      	; 0x79de <DIO_read+0x138>
					{
						loc_result = DIO_HIGH;
    79d8:	81 e0       	ldi	r24, 0x01	; 1
    79da:	89 83       	std	Y+1, r24	; 0x01
    79dc:	01 c0       	rjmp	.+2      	; 0x79e0 <DIO_read+0x13a>
					}
					else
					{
						loc_result = DIO_LOW;
    79de:	19 82       	std	Y+1, r1	; 0x01
					}
					break;
}
	return loc_result;
    79e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    79e2:	0f 90       	pop	r0
    79e4:	0f 90       	pop	r0
    79e6:	0f 90       	pop	r0
    79e8:	0f 90       	pop	r0
    79ea:	0f 90       	pop	r0
    79ec:	cf 91       	pop	r28
    79ee:	df 91       	pop	r29
    79f0:	08 95       	ret

000079f2 <DIO_flip>:


void DIO_flip(dio_port_t port,dio_pin_t pin )
{
    79f2:	df 93       	push	r29
    79f4:	cf 93       	push	r28
    79f6:	00 d0       	rcall	.+0      	; 0x79f8 <DIO_flip+0x6>
    79f8:	00 d0       	rcall	.+0      	; 0x79fa <DIO_flip+0x8>
    79fa:	cd b7       	in	r28, 0x3d	; 61
    79fc:	de b7       	in	r29, 0x3e	; 62
    79fe:	89 83       	std	Y+1, r24	; 0x01
    7a00:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    7a02:	89 81       	ldd	r24, Y+1	; 0x01
    7a04:	28 2f       	mov	r18, r24
    7a06:	30 e0       	ldi	r19, 0x00	; 0
    7a08:	3c 83       	std	Y+4, r19	; 0x04
    7a0a:	2b 83       	std	Y+3, r18	; 0x03
    7a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    7a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    7a10:	81 30       	cpi	r24, 0x01	; 1
    7a12:	91 05       	cpc	r25, r1
    7a14:	49 f1       	breq	.+82     	; 0x7a68 <DIO_flip+0x76>
    7a16:	2b 81       	ldd	r18, Y+3	; 0x03
    7a18:	3c 81       	ldd	r19, Y+4	; 0x04
    7a1a:	22 30       	cpi	r18, 0x02	; 2
    7a1c:	31 05       	cpc	r19, r1
    7a1e:	2c f4       	brge	.+10     	; 0x7a2a <DIO_flip+0x38>
    7a20:	8b 81       	ldd	r24, Y+3	; 0x03
    7a22:	9c 81       	ldd	r25, Y+4	; 0x04
    7a24:	00 97       	sbiw	r24, 0x00	; 0
    7a26:	61 f0       	breq	.+24     	; 0x7a40 <DIO_flip+0x4e>
    7a28:	5a c0       	rjmp	.+180    	; 0x7ade <DIO_flip+0xec>
    7a2a:	2b 81       	ldd	r18, Y+3	; 0x03
    7a2c:	3c 81       	ldd	r19, Y+4	; 0x04
    7a2e:	22 30       	cpi	r18, 0x02	; 2
    7a30:	31 05       	cpc	r19, r1
    7a32:	71 f1       	breq	.+92     	; 0x7a90 <DIO_flip+0x9e>
    7a34:	8b 81       	ldd	r24, Y+3	; 0x03
    7a36:	9c 81       	ldd	r25, Y+4	; 0x04
    7a38:	83 30       	cpi	r24, 0x03	; 3
    7a3a:	91 05       	cpc	r25, r1
    7a3c:	e9 f1       	breq	.+122    	; 0x7ab8 <DIO_flip+0xc6>
    7a3e:	4f c0       	rjmp	.+158    	; 0x7ade <DIO_flip+0xec>
		{
		case DIO_PORTA:
			TOGGLE_BIT(DIO_PORTA_REG,pin);
    7a40:	ab e3       	ldi	r26, 0x3B	; 59
    7a42:	b0 e0       	ldi	r27, 0x00	; 0
    7a44:	eb e3       	ldi	r30, 0x3B	; 59
    7a46:	f0 e0       	ldi	r31, 0x00	; 0
    7a48:	80 81       	ld	r24, Z
    7a4a:	48 2f       	mov	r20, r24
    7a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    7a4e:	28 2f       	mov	r18, r24
    7a50:	30 e0       	ldi	r19, 0x00	; 0
    7a52:	81 e0       	ldi	r24, 0x01	; 1
    7a54:	90 e0       	ldi	r25, 0x00	; 0
    7a56:	02 2e       	mov	r0, r18
    7a58:	02 c0       	rjmp	.+4      	; 0x7a5e <DIO_flip+0x6c>
    7a5a:	88 0f       	add	r24, r24
    7a5c:	99 1f       	adc	r25, r25
    7a5e:	0a 94       	dec	r0
    7a60:	e2 f7       	brpl	.-8      	; 0x7a5a <DIO_flip+0x68>
    7a62:	84 27       	eor	r24, r20
    7a64:	8c 93       	st	X, r24
    7a66:	3b c0       	rjmp	.+118    	; 0x7ade <DIO_flip+0xec>
			break;

		case DIO_PORTB:
			TOGGLE_BIT(DIO_PORTB_REG,pin);
    7a68:	a8 e3       	ldi	r26, 0x38	; 56
    7a6a:	b0 e0       	ldi	r27, 0x00	; 0
    7a6c:	e8 e3       	ldi	r30, 0x38	; 56
    7a6e:	f0 e0       	ldi	r31, 0x00	; 0
    7a70:	80 81       	ld	r24, Z
    7a72:	48 2f       	mov	r20, r24
    7a74:	8a 81       	ldd	r24, Y+2	; 0x02
    7a76:	28 2f       	mov	r18, r24
    7a78:	30 e0       	ldi	r19, 0x00	; 0
    7a7a:	81 e0       	ldi	r24, 0x01	; 1
    7a7c:	90 e0       	ldi	r25, 0x00	; 0
    7a7e:	02 2e       	mov	r0, r18
    7a80:	02 c0       	rjmp	.+4      	; 0x7a86 <DIO_flip+0x94>
    7a82:	88 0f       	add	r24, r24
    7a84:	99 1f       	adc	r25, r25
    7a86:	0a 94       	dec	r0
    7a88:	e2 f7       	brpl	.-8      	; 0x7a82 <DIO_flip+0x90>
    7a8a:	84 27       	eor	r24, r20
    7a8c:	8c 93       	st	X, r24
    7a8e:	27 c0       	rjmp	.+78     	; 0x7ade <DIO_flip+0xec>
			break;

		case DIO_PORTC:
			TOGGLE_BIT(DIO_PORTC_REG,pin);
    7a90:	a5 e3       	ldi	r26, 0x35	; 53
    7a92:	b0 e0       	ldi	r27, 0x00	; 0
    7a94:	e5 e3       	ldi	r30, 0x35	; 53
    7a96:	f0 e0       	ldi	r31, 0x00	; 0
    7a98:	80 81       	ld	r24, Z
    7a9a:	48 2f       	mov	r20, r24
    7a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    7a9e:	28 2f       	mov	r18, r24
    7aa0:	30 e0       	ldi	r19, 0x00	; 0
    7aa2:	81 e0       	ldi	r24, 0x01	; 1
    7aa4:	90 e0       	ldi	r25, 0x00	; 0
    7aa6:	02 2e       	mov	r0, r18
    7aa8:	02 c0       	rjmp	.+4      	; 0x7aae <DIO_flip+0xbc>
    7aaa:	88 0f       	add	r24, r24
    7aac:	99 1f       	adc	r25, r25
    7aae:	0a 94       	dec	r0
    7ab0:	e2 f7       	brpl	.-8      	; 0x7aaa <DIO_flip+0xb8>
    7ab2:	84 27       	eor	r24, r20
    7ab4:	8c 93       	st	X, r24
    7ab6:	13 c0       	rjmp	.+38     	; 0x7ade <DIO_flip+0xec>
			break;

		case DIO_PORTD:
			TOGGLE_BIT(DIO_PORTD_REG,pin);
    7ab8:	a2 e3       	ldi	r26, 0x32	; 50
    7aba:	b0 e0       	ldi	r27, 0x00	; 0
    7abc:	e2 e3       	ldi	r30, 0x32	; 50
    7abe:	f0 e0       	ldi	r31, 0x00	; 0
    7ac0:	80 81       	ld	r24, Z
    7ac2:	48 2f       	mov	r20, r24
    7ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    7ac6:	28 2f       	mov	r18, r24
    7ac8:	30 e0       	ldi	r19, 0x00	; 0
    7aca:	81 e0       	ldi	r24, 0x01	; 1
    7acc:	90 e0       	ldi	r25, 0x00	; 0
    7ace:	02 2e       	mov	r0, r18
    7ad0:	02 c0       	rjmp	.+4      	; 0x7ad6 <DIO_flip+0xe4>
    7ad2:	88 0f       	add	r24, r24
    7ad4:	99 1f       	adc	r25, r25
    7ad6:	0a 94       	dec	r0
    7ad8:	e2 f7       	brpl	.-8      	; 0x7ad2 <DIO_flip+0xe0>
    7ada:	84 27       	eor	r24, r20
    7adc:	8c 93       	st	X, r24
			break;
		}
}
    7ade:	0f 90       	pop	r0
    7ae0:	0f 90       	pop	r0
    7ae2:	0f 90       	pop	r0
    7ae4:	0f 90       	pop	r0
    7ae6:	cf 91       	pop	r28
    7ae8:	df 91       	pop	r29
    7aea:	08 95       	ret

00007aec <DIO_pull_up>:

void DIO_pull_up(dio_port_t port,dio_pin_t pin)
	{
    7aec:	df 93       	push	r29
    7aee:	cf 93       	push	r28
    7af0:	00 d0       	rcall	.+0      	; 0x7af2 <DIO_pull_up+0x6>
    7af2:	cd b7       	in	r28, 0x3d	; 61
    7af4:	de b7       	in	r29, 0x3e	; 62
    7af6:	89 83       	std	Y+1, r24	; 0x01
    7af8:	6a 83       	std	Y+2, r22	; 0x02
		DIO_write(port, pin, DIO_HIGH);
    7afa:	89 81       	ldd	r24, Y+1	; 0x01
    7afc:	6a 81       	ldd	r22, Y+2	; 0x02
    7afe:	41 e0       	ldi	r20, 0x01	; 1
    7b00:	0e 94 00 3b 	call	0x7600	; 0x7600 <DIO_write>
	}
    7b04:	0f 90       	pop	r0
    7b06:	0f 90       	pop	r0
    7b08:	cf 91       	pop	r28
    7b0a:	df 91       	pop	r29
    7b0c:	08 95       	ret

00007b0e <ADC_init>:

#include "ADC_interface.h"
#include "Bit_Math.h"

void ADC_init(void)
{
    7b0e:	df 93       	push	r29
    7b10:	cf 93       	push	r28
    7b12:	cd b7       	in	r28, 0x3d	; 61
    7b14:	de b7       	in	r29, 0x3e	; 62
	           /* REF=VCC */
	ADC_ADMUX_reg|=(VCC_REF<<6);
    7b16:	a7 e2       	ldi	r26, 0x27	; 39
    7b18:	b0 e0       	ldi	r27, 0x00	; 0
    7b1a:	e7 e2       	ldi	r30, 0x27	; 39
    7b1c:	f0 e0       	ldi	r31, 0x00	; 0
    7b1e:	80 81       	ld	r24, Z
    7b20:	80 64       	ori	r24, 0x40	; 64
    7b22:	8c 93       	st	X, r24

               /*Enable ADC, prescaler=/128 */
	ADC_ADCSRA_reg |= (ADC_ENABLE)|(ADC_ADPS_128);
    7b24:	a6 e2       	ldi	r26, 0x26	; 38
    7b26:	b0 e0       	ldi	r27, 0x00	; 0
    7b28:	e6 e2       	ldi	r30, 0x26	; 38
    7b2a:	f0 e0       	ldi	r31, 0x00	; 0
    7b2c:	80 81       	ld	r24, Z
    7b2e:	87 68       	ori	r24, 0x87	; 135
    7b30:	8c 93       	st	X, r24
}
    7b32:	cf 91       	pop	r28
    7b34:	df 91       	pop	r29
    7b36:	08 95       	ret

00007b38 <ADC_read>:

u16 ADC_read(adc_channel_t channel)
{
    7b38:	df 93       	push	r29
    7b3a:	cf 93       	push	r28
    7b3c:	00 d0       	rcall	.+0      	; 0x7b3e <ADC_read+0x6>
    7b3e:	0f 92       	push	r0
    7b40:	cd b7       	in	r28, 0x3d	; 61
    7b42:	de b7       	in	r29, 0x3e	; 62
    7b44:	8b 83       	std	Y+3, r24	; 0x03

	u16 result;
     /*  select channel */
	ADC_ADMUX_reg=(ADC_ADMUX_reg & 0xF8)|(channel);
    7b46:	a7 e2       	ldi	r26, 0x27	; 39
    7b48:	b0 e0       	ldi	r27, 0x00	; 0
    7b4a:	e7 e2       	ldi	r30, 0x27	; 39
    7b4c:	f0 e0       	ldi	r31, 0x00	; 0
    7b4e:	80 81       	ld	r24, Z
    7b50:	98 2f       	mov	r25, r24
    7b52:	98 7f       	andi	r25, 0xF8	; 248
    7b54:	8b 81       	ldd	r24, Y+3	; 0x03
    7b56:	89 2b       	or	r24, r25
    7b58:	8c 93       	st	X, r24


	/*ADC Start Conversion */
SET_BIT(ADC_ADCSRA_reg,ADC_Start_Conversion_bit_no);
    7b5a:	a6 e2       	ldi	r26, 0x26	; 38
    7b5c:	b0 e0       	ldi	r27, 0x00	; 0
    7b5e:	e6 e2       	ldi	r30, 0x26	; 38
    7b60:	f0 e0       	ldi	r31, 0x00	; 0
    7b62:	80 81       	ld	r24, Z
    7b64:	80 64       	ori	r24, 0x40	; 64
    7b66:	8c 93       	st	X, r24

    /* wait until ADC conversion finish */
while(CHECK_BIT(ADC_ADCSRA_reg,ADC_ADIF_bit_no)!=1)
    7b68:	e6 e2       	ldi	r30, 0x26	; 38
    7b6a:	f0 e0       	ldi	r31, 0x00	; 0
    7b6c:	80 81       	ld	r24, Z
    7b6e:	82 95       	swap	r24
    7b70:	8f 70       	andi	r24, 0x0F	; 15
    7b72:	88 2f       	mov	r24, r24
    7b74:	90 e0       	ldi	r25, 0x00	; 0
    7b76:	81 70       	andi	r24, 0x01	; 1
    7b78:	90 70       	andi	r25, 0x00	; 0
    7b7a:	00 97       	sbiw	r24, 0x00	; 0
    7b7c:	a9 f3       	breq	.-22     	; 0x7b68 <ADC_read+0x30>
{
	/* do nothing */
}

    /* clear interrupt flag to start another conversion */
 SET_BIT(ADC_ADCSRA_reg,ADC_ADIF_bit_no);
    7b7e:	a6 e2       	ldi	r26, 0x26	; 38
    7b80:	b0 e0       	ldi	r27, 0x00	; 0
    7b82:	e6 e2       	ldi	r30, 0x26	; 38
    7b84:	f0 e0       	ldi	r31, 0x00	; 0
    7b86:	80 81       	ld	r24, Z
    7b88:	80 61       	ori	r24, 0x10	; 16
    7b8a:	8c 93       	st	X, r24

 /* read ADC Result */
 result = (ADC_ADCL_reg|(ADC_ADCH_reg<<8));
    7b8c:	e4 e2       	ldi	r30, 0x24	; 36
    7b8e:	f0 e0       	ldi	r31, 0x00	; 0
    7b90:	80 81       	ld	r24, Z
    7b92:	28 2f       	mov	r18, r24
    7b94:	30 e0       	ldi	r19, 0x00	; 0
    7b96:	e5 e2       	ldi	r30, 0x25	; 37
    7b98:	f0 e0       	ldi	r31, 0x00	; 0
    7b9a:	80 81       	ld	r24, Z
    7b9c:	88 2f       	mov	r24, r24
    7b9e:	90 e0       	ldi	r25, 0x00	; 0
    7ba0:	98 2f       	mov	r25, r24
    7ba2:	88 27       	eor	r24, r24
    7ba4:	82 2b       	or	r24, r18
    7ba6:	93 2b       	or	r25, r19
    7ba8:	9a 83       	std	Y+2, r25	; 0x02
    7baa:	89 83       	std	Y+1, r24	; 0x01

 return result;
    7bac:	89 81       	ldd	r24, Y+1	; 0x01
    7bae:	9a 81       	ldd	r25, Y+2	; 0x02

}
    7bb0:	0f 90       	pop	r0
    7bb2:	0f 90       	pop	r0
    7bb4:	0f 90       	pop	r0
    7bb6:	cf 91       	pop	r28
    7bb8:	df 91       	pop	r29
    7bba:	08 95       	ret

00007bbc <__mulsi3>:
    7bbc:	62 9f       	mul	r22, r18
    7bbe:	d0 01       	movw	r26, r0
    7bc0:	73 9f       	mul	r23, r19
    7bc2:	f0 01       	movw	r30, r0
    7bc4:	82 9f       	mul	r24, r18
    7bc6:	e0 0d       	add	r30, r0
    7bc8:	f1 1d       	adc	r31, r1
    7bca:	64 9f       	mul	r22, r20
    7bcc:	e0 0d       	add	r30, r0
    7bce:	f1 1d       	adc	r31, r1
    7bd0:	92 9f       	mul	r25, r18
    7bd2:	f0 0d       	add	r31, r0
    7bd4:	83 9f       	mul	r24, r19
    7bd6:	f0 0d       	add	r31, r0
    7bd8:	74 9f       	mul	r23, r20
    7bda:	f0 0d       	add	r31, r0
    7bdc:	65 9f       	mul	r22, r21
    7bde:	f0 0d       	add	r31, r0
    7be0:	99 27       	eor	r25, r25
    7be2:	72 9f       	mul	r23, r18
    7be4:	b0 0d       	add	r27, r0
    7be6:	e1 1d       	adc	r30, r1
    7be8:	f9 1f       	adc	r31, r25
    7bea:	63 9f       	mul	r22, r19
    7bec:	b0 0d       	add	r27, r0
    7bee:	e1 1d       	adc	r30, r1
    7bf0:	f9 1f       	adc	r31, r25
    7bf2:	bd 01       	movw	r22, r26
    7bf4:	cf 01       	movw	r24, r30
    7bf6:	11 24       	eor	r1, r1
    7bf8:	08 95       	ret

00007bfa <__udivmodqi4>:
    7bfa:	99 1b       	sub	r25, r25
    7bfc:	79 e0       	ldi	r23, 0x09	; 9
    7bfe:	04 c0       	rjmp	.+8      	; 0x7c08 <__udivmodqi4_ep>

00007c00 <__udivmodqi4_loop>:
    7c00:	99 1f       	adc	r25, r25
    7c02:	96 17       	cp	r25, r22
    7c04:	08 f0       	brcs	.+2      	; 0x7c08 <__udivmodqi4_ep>
    7c06:	96 1b       	sub	r25, r22

00007c08 <__udivmodqi4_ep>:
    7c08:	88 1f       	adc	r24, r24
    7c0a:	7a 95       	dec	r23
    7c0c:	c9 f7       	brne	.-14     	; 0x7c00 <__udivmodqi4_loop>
    7c0e:	80 95       	com	r24
    7c10:	08 95       	ret

00007c12 <__udivmodhi4>:
    7c12:	aa 1b       	sub	r26, r26
    7c14:	bb 1b       	sub	r27, r27
    7c16:	51 e1       	ldi	r21, 0x11	; 17
    7c18:	07 c0       	rjmp	.+14     	; 0x7c28 <__udivmodhi4_ep>

00007c1a <__udivmodhi4_loop>:
    7c1a:	aa 1f       	adc	r26, r26
    7c1c:	bb 1f       	adc	r27, r27
    7c1e:	a6 17       	cp	r26, r22
    7c20:	b7 07       	cpc	r27, r23
    7c22:	10 f0       	brcs	.+4      	; 0x7c28 <__udivmodhi4_ep>
    7c24:	a6 1b       	sub	r26, r22
    7c26:	b7 0b       	sbc	r27, r23

00007c28 <__udivmodhi4_ep>:
    7c28:	88 1f       	adc	r24, r24
    7c2a:	99 1f       	adc	r25, r25
    7c2c:	5a 95       	dec	r21
    7c2e:	a9 f7       	brne	.-22     	; 0x7c1a <__udivmodhi4_loop>
    7c30:	80 95       	com	r24
    7c32:	90 95       	com	r25
    7c34:	bc 01       	movw	r22, r24
    7c36:	cd 01       	movw	r24, r26
    7c38:	08 95       	ret

00007c3a <__divmodhi4>:
    7c3a:	97 fb       	bst	r25, 7
    7c3c:	09 2e       	mov	r0, r25
    7c3e:	07 26       	eor	r0, r23
    7c40:	0a d0       	rcall	.+20     	; 0x7c56 <__divmodhi4_neg1>
    7c42:	77 fd       	sbrc	r23, 7
    7c44:	04 d0       	rcall	.+8      	; 0x7c4e <__divmodhi4_neg2>
    7c46:	e5 df       	rcall	.-54     	; 0x7c12 <__udivmodhi4>
    7c48:	06 d0       	rcall	.+12     	; 0x7c56 <__divmodhi4_neg1>
    7c4a:	00 20       	and	r0, r0
    7c4c:	1a f4       	brpl	.+6      	; 0x7c54 <__divmodhi4_exit>

00007c4e <__divmodhi4_neg2>:
    7c4e:	70 95       	com	r23
    7c50:	61 95       	neg	r22
    7c52:	7f 4f       	sbci	r23, 0xFF	; 255

00007c54 <__divmodhi4_exit>:
    7c54:	08 95       	ret

00007c56 <__divmodhi4_neg1>:
    7c56:	f6 f7       	brtc	.-4      	; 0x7c54 <__divmodhi4_exit>
    7c58:	90 95       	com	r25
    7c5a:	81 95       	neg	r24
    7c5c:	9f 4f       	sbci	r25, 0xFF	; 255
    7c5e:	08 95       	ret

00007c60 <__udivmodsi4>:
    7c60:	a1 e2       	ldi	r26, 0x21	; 33
    7c62:	1a 2e       	mov	r1, r26
    7c64:	aa 1b       	sub	r26, r26
    7c66:	bb 1b       	sub	r27, r27
    7c68:	fd 01       	movw	r30, r26
    7c6a:	0d c0       	rjmp	.+26     	; 0x7c86 <__udivmodsi4_ep>

00007c6c <__udivmodsi4_loop>:
    7c6c:	aa 1f       	adc	r26, r26
    7c6e:	bb 1f       	adc	r27, r27
    7c70:	ee 1f       	adc	r30, r30
    7c72:	ff 1f       	adc	r31, r31
    7c74:	a2 17       	cp	r26, r18
    7c76:	b3 07       	cpc	r27, r19
    7c78:	e4 07       	cpc	r30, r20
    7c7a:	f5 07       	cpc	r31, r21
    7c7c:	20 f0       	brcs	.+8      	; 0x7c86 <__udivmodsi4_ep>
    7c7e:	a2 1b       	sub	r26, r18
    7c80:	b3 0b       	sbc	r27, r19
    7c82:	e4 0b       	sbc	r30, r20
    7c84:	f5 0b       	sbc	r31, r21

00007c86 <__udivmodsi4_ep>:
    7c86:	66 1f       	adc	r22, r22
    7c88:	77 1f       	adc	r23, r23
    7c8a:	88 1f       	adc	r24, r24
    7c8c:	99 1f       	adc	r25, r25
    7c8e:	1a 94       	dec	r1
    7c90:	69 f7       	brne	.-38     	; 0x7c6c <__udivmodsi4_loop>
    7c92:	60 95       	com	r22
    7c94:	70 95       	com	r23
    7c96:	80 95       	com	r24
    7c98:	90 95       	com	r25
    7c9a:	9b 01       	movw	r18, r22
    7c9c:	ac 01       	movw	r20, r24
    7c9e:	bd 01       	movw	r22, r26
    7ca0:	cf 01       	movw	r24, r30
    7ca2:	08 95       	ret

00007ca4 <__prologue_saves__>:
    7ca4:	2f 92       	push	r2
    7ca6:	3f 92       	push	r3
    7ca8:	4f 92       	push	r4
    7caa:	5f 92       	push	r5
    7cac:	6f 92       	push	r6
    7cae:	7f 92       	push	r7
    7cb0:	8f 92       	push	r8
    7cb2:	9f 92       	push	r9
    7cb4:	af 92       	push	r10
    7cb6:	bf 92       	push	r11
    7cb8:	cf 92       	push	r12
    7cba:	df 92       	push	r13
    7cbc:	ef 92       	push	r14
    7cbe:	ff 92       	push	r15
    7cc0:	0f 93       	push	r16
    7cc2:	1f 93       	push	r17
    7cc4:	cf 93       	push	r28
    7cc6:	df 93       	push	r29
    7cc8:	cd b7       	in	r28, 0x3d	; 61
    7cca:	de b7       	in	r29, 0x3e	; 62
    7ccc:	ca 1b       	sub	r28, r26
    7cce:	db 0b       	sbc	r29, r27
    7cd0:	0f b6       	in	r0, 0x3f	; 63
    7cd2:	f8 94       	cli
    7cd4:	de bf       	out	0x3e, r29	; 62
    7cd6:	0f be       	out	0x3f, r0	; 63
    7cd8:	cd bf       	out	0x3d, r28	; 61
    7cda:	09 94       	ijmp

00007cdc <__epilogue_restores__>:
    7cdc:	2a 88       	ldd	r2, Y+18	; 0x12
    7cde:	39 88       	ldd	r3, Y+17	; 0x11
    7ce0:	48 88       	ldd	r4, Y+16	; 0x10
    7ce2:	5f 84       	ldd	r5, Y+15	; 0x0f
    7ce4:	6e 84       	ldd	r6, Y+14	; 0x0e
    7ce6:	7d 84       	ldd	r7, Y+13	; 0x0d
    7ce8:	8c 84       	ldd	r8, Y+12	; 0x0c
    7cea:	9b 84       	ldd	r9, Y+11	; 0x0b
    7cec:	aa 84       	ldd	r10, Y+10	; 0x0a
    7cee:	b9 84       	ldd	r11, Y+9	; 0x09
    7cf0:	c8 84       	ldd	r12, Y+8	; 0x08
    7cf2:	df 80       	ldd	r13, Y+7	; 0x07
    7cf4:	ee 80       	ldd	r14, Y+6	; 0x06
    7cf6:	fd 80       	ldd	r15, Y+5	; 0x05
    7cf8:	0c 81       	ldd	r16, Y+4	; 0x04
    7cfa:	1b 81       	ldd	r17, Y+3	; 0x03
    7cfc:	aa 81       	ldd	r26, Y+2	; 0x02
    7cfe:	b9 81       	ldd	r27, Y+1	; 0x01
    7d00:	ce 0f       	add	r28, r30
    7d02:	d1 1d       	adc	r29, r1
    7d04:	0f b6       	in	r0, 0x3f	; 63
    7d06:	f8 94       	cli
    7d08:	de bf       	out	0x3e, r29	; 62
    7d0a:	0f be       	out	0x3f, r0	; 63
    7d0c:	cd bf       	out	0x3d, r28	; 61
    7d0e:	ed 01       	movw	r28, r26
    7d10:	08 95       	ret

00007d12 <strcmp>:
    7d12:	fb 01       	movw	r30, r22
    7d14:	dc 01       	movw	r26, r24
    7d16:	8d 91       	ld	r24, X+
    7d18:	01 90       	ld	r0, Z+
    7d1a:	80 19       	sub	r24, r0
    7d1c:	01 10       	cpse	r0, r1
    7d1e:	d9 f3       	breq	.-10     	; 0x7d16 <strcmp+0x4>
    7d20:	99 0b       	sbc	r25, r25
    7d22:	08 95       	ret

00007d24 <sprintf>:
    7d24:	ae e0       	ldi	r26, 0x0E	; 14
    7d26:	b0 e0       	ldi	r27, 0x00	; 0
    7d28:	e8 e9       	ldi	r30, 0x98	; 152
    7d2a:	fe e3       	ldi	r31, 0x3E	; 62
    7d2c:	0c 94 60 3e 	jmp	0x7cc0	; 0x7cc0 <__prologue_saves__+0x1c>
    7d30:	0d 89       	ldd	r16, Y+21	; 0x15
    7d32:	1e 89       	ldd	r17, Y+22	; 0x16
    7d34:	86 e0       	ldi	r24, 0x06	; 6
    7d36:	8c 83       	std	Y+4, r24	; 0x04
    7d38:	1a 83       	std	Y+2, r17	; 0x02
    7d3a:	09 83       	std	Y+1, r16	; 0x01
    7d3c:	8f ef       	ldi	r24, 0xFF	; 255
    7d3e:	9f e7       	ldi	r25, 0x7F	; 127
    7d40:	9e 83       	std	Y+6, r25	; 0x06
    7d42:	8d 83       	std	Y+5, r24	; 0x05
    7d44:	9e 01       	movw	r18, r28
    7d46:	27 5e       	subi	r18, 0xE7	; 231
    7d48:	3f 4f       	sbci	r19, 0xFF	; 255
    7d4a:	ce 01       	movw	r24, r28
    7d4c:	01 96       	adiw	r24, 0x01	; 1
    7d4e:	6f 89       	ldd	r22, Y+23	; 0x17
    7d50:	78 8d       	ldd	r23, Y+24	; 0x18
    7d52:	a9 01       	movw	r20, r18
    7d54:	0e 94 4c 3f 	call	0x7e98	; 0x7e98 <vfprintf>
    7d58:	2f 81       	ldd	r18, Y+7	; 0x07
    7d5a:	38 85       	ldd	r19, Y+8	; 0x08
    7d5c:	02 0f       	add	r16, r18
    7d5e:	13 1f       	adc	r17, r19
    7d60:	f8 01       	movw	r30, r16
    7d62:	10 82       	st	Z, r1
    7d64:	2e 96       	adiw	r28, 0x0e	; 14
    7d66:	e4 e0       	ldi	r30, 0x04	; 4
    7d68:	0c 94 7c 3e 	jmp	0x7cf8	; 0x7cf8 <__epilogue_restores__+0x1c>
    7d6c:	5e d0       	rcall	.+188    	; 0x7e2a <__fp_pscA>
    7d6e:	18 f0       	brcs	.+6      	; 0x7d76 <sprintf+0x52>
    7d70:	11 f0       	breq	.+4      	; 0x7d76 <sprintf+0x52>
    7d72:	62 d0       	rcall	.+196    	; 0x7e38 <__fp_pscB>
    7d74:	38 f4       	brcc	.+14     	; 0x7d84 <fmod+0xa>
    7d76:	56 c0       	rjmp	.+172    	; 0x7e24 <__fp_nan>
    7d78:	89 c0       	rjmp	.+274    	; 0x7e8c <__fp_szero>

00007d7a <fmod>:
    7d7a:	e9 2f       	mov	r30, r25
    7d7c:	64 d0       	rcall	.+200    	; 0x7e46 <__fp_split3>
    7d7e:	b0 f3       	brcs	.-20     	; 0x7d6c <sprintf+0x48>
    7d80:	55 23       	and	r21, r21
    7d82:	c9 f3       	breq	.-14     	; 0x7d76 <sprintf+0x52>
    7d84:	e7 fb       	bst	r30, 7
    7d86:	62 17       	cp	r22, r18
    7d88:	73 07       	cpc	r23, r19
    7d8a:	84 07       	cpc	r24, r20
    7d8c:	95 07       	cpc	r25, r21
    7d8e:	a8 f1       	brcs	.+106    	; 0x7dfa <fmod+0x80>
    7d90:	99 f3       	breq	.-26     	; 0x7d78 <sprintf+0x54>
    7d92:	e9 2f       	mov	r30, r25
    7d94:	ff 27       	eor	r31, r31
    7d96:	88 23       	and	r24, r24
    7d98:	2a f0       	brmi	.+10     	; 0x7da4 <fmod+0x2a>
    7d9a:	31 97       	sbiw	r30, 0x01	; 1
    7d9c:	66 0f       	add	r22, r22
    7d9e:	77 1f       	adc	r23, r23
    7da0:	88 1f       	adc	r24, r24
    7da2:	da f7       	brpl	.-10     	; 0x7d9a <fmod+0x20>
    7da4:	95 2f       	mov	r25, r21
    7da6:	55 27       	eor	r21, r21
    7da8:	44 23       	and	r20, r20
    7daa:	32 f0       	brmi	.+12     	; 0x7db8 <fmod+0x3e>
    7dac:	91 50       	subi	r25, 0x01	; 1
    7dae:	50 40       	sbci	r21, 0x00	; 0
    7db0:	22 0f       	add	r18, r18
    7db2:	33 1f       	adc	r19, r19
    7db4:	44 1f       	adc	r20, r20
    7db6:	d2 f7       	brpl	.-12     	; 0x7dac <fmod+0x32>
    7db8:	bb 27       	eor	r27, r27
    7dba:	e9 1b       	sub	r30, r25
    7dbc:	f5 0b       	sbc	r31, r21
    7dbe:	62 1b       	sub	r22, r18
    7dc0:	73 0b       	sbc	r23, r19
    7dc2:	84 0b       	sbc	r24, r20
    7dc4:	b1 09       	sbc	r27, r1
    7dc6:	c1 f2       	breq	.-80     	; 0x7d78 <sprintf+0x54>
    7dc8:	22 f4       	brpl	.+8      	; 0x7dd2 <fmod+0x58>
    7dca:	62 0f       	add	r22, r18
    7dcc:	73 1f       	adc	r23, r19
    7dce:	84 1f       	adc	r24, r20
    7dd0:	b1 1d       	adc	r27, r1
    7dd2:	31 97       	sbiw	r30, 0x01	; 1
    7dd4:	2a f0       	brmi	.+10     	; 0x7de0 <fmod+0x66>
    7dd6:	66 0f       	add	r22, r22
    7dd8:	77 1f       	adc	r23, r23
    7dda:	88 1f       	adc	r24, r24
    7ddc:	bb 1f       	adc	r27, r27
    7dde:	ef cf       	rjmp	.-34     	; 0x7dbe <fmod+0x44>
    7de0:	91 50       	subi	r25, 0x01	; 1
    7de2:	50 40       	sbci	r21, 0x00	; 0
    7de4:	5a f0       	brmi	.+22     	; 0x7dfc <fmod+0x82>
    7de6:	41 f0       	breq	.+16     	; 0x7df8 <fmod+0x7e>
    7de8:	88 23       	and	r24, r24
    7dea:	32 f0       	brmi	.+12     	; 0x7df8 <fmod+0x7e>
    7dec:	66 0f       	add	r22, r22
    7dee:	77 1f       	adc	r23, r23
    7df0:	88 1f       	adc	r24, r24
    7df2:	91 50       	subi	r25, 0x01	; 1
    7df4:	50 40       	sbci	r21, 0x00	; 0
    7df6:	c1 f7       	brne	.-16     	; 0x7de8 <fmod+0x6e>
    7df8:	93 95       	inc	r25
    7dfa:	06 c0       	rjmp	.+12     	; 0x7e08 <__fp_mpack>
    7dfc:	86 95       	lsr	r24
    7dfe:	77 95       	ror	r23
    7e00:	67 95       	ror	r22
    7e02:	9f 5f       	subi	r25, 0xFF	; 255
    7e04:	d9 f7       	brne	.-10     	; 0x7dfc <fmod+0x82>
    7e06:	f8 cf       	rjmp	.-16     	; 0x7df8 <fmod+0x7e>

00007e08 <__fp_mpack>:
    7e08:	9f 3f       	cpi	r25, 0xFF	; 255
    7e0a:	31 f0       	breq	.+12     	; 0x7e18 <__fp_mpack_finite+0xc>

00007e0c <__fp_mpack_finite>:
    7e0c:	91 50       	subi	r25, 0x01	; 1
    7e0e:	20 f4       	brcc	.+8      	; 0x7e18 <__fp_mpack_finite+0xc>
    7e10:	87 95       	ror	r24
    7e12:	77 95       	ror	r23
    7e14:	67 95       	ror	r22
    7e16:	b7 95       	ror	r27
    7e18:	88 0f       	add	r24, r24
    7e1a:	91 1d       	adc	r25, r1
    7e1c:	96 95       	lsr	r25
    7e1e:	87 95       	ror	r24
    7e20:	97 f9       	bld	r25, 7
    7e22:	08 95       	ret

00007e24 <__fp_nan>:
    7e24:	9f ef       	ldi	r25, 0xFF	; 255
    7e26:	80 ec       	ldi	r24, 0xC0	; 192
    7e28:	08 95       	ret

00007e2a <__fp_pscA>:
    7e2a:	00 24       	eor	r0, r0
    7e2c:	0a 94       	dec	r0
    7e2e:	16 16       	cp	r1, r22
    7e30:	17 06       	cpc	r1, r23
    7e32:	18 06       	cpc	r1, r24
    7e34:	09 06       	cpc	r0, r25
    7e36:	08 95       	ret

00007e38 <__fp_pscB>:
    7e38:	00 24       	eor	r0, r0
    7e3a:	0a 94       	dec	r0
    7e3c:	12 16       	cp	r1, r18
    7e3e:	13 06       	cpc	r1, r19
    7e40:	14 06       	cpc	r1, r20
    7e42:	05 06       	cpc	r0, r21
    7e44:	08 95       	ret

00007e46 <__fp_split3>:
    7e46:	57 fd       	sbrc	r21, 7
    7e48:	90 58       	subi	r25, 0x80	; 128
    7e4a:	44 0f       	add	r20, r20
    7e4c:	55 1f       	adc	r21, r21
    7e4e:	59 f0       	breq	.+22     	; 0x7e66 <__fp_splitA+0x10>
    7e50:	5f 3f       	cpi	r21, 0xFF	; 255
    7e52:	71 f0       	breq	.+28     	; 0x7e70 <__fp_splitA+0x1a>
    7e54:	47 95       	ror	r20

00007e56 <__fp_splitA>:
    7e56:	88 0f       	add	r24, r24
    7e58:	97 fb       	bst	r25, 7
    7e5a:	99 1f       	adc	r25, r25
    7e5c:	61 f0       	breq	.+24     	; 0x7e76 <__fp_splitA+0x20>
    7e5e:	9f 3f       	cpi	r25, 0xFF	; 255
    7e60:	79 f0       	breq	.+30     	; 0x7e80 <__fp_splitA+0x2a>
    7e62:	87 95       	ror	r24
    7e64:	08 95       	ret
    7e66:	12 16       	cp	r1, r18
    7e68:	13 06       	cpc	r1, r19
    7e6a:	14 06       	cpc	r1, r20
    7e6c:	55 1f       	adc	r21, r21
    7e6e:	f2 cf       	rjmp	.-28     	; 0x7e54 <__fp_split3+0xe>
    7e70:	46 95       	lsr	r20
    7e72:	f1 df       	rcall	.-30     	; 0x7e56 <__fp_splitA>
    7e74:	08 c0       	rjmp	.+16     	; 0x7e86 <__fp_splitA+0x30>
    7e76:	16 16       	cp	r1, r22
    7e78:	17 06       	cpc	r1, r23
    7e7a:	18 06       	cpc	r1, r24
    7e7c:	99 1f       	adc	r25, r25
    7e7e:	f1 cf       	rjmp	.-30     	; 0x7e62 <__fp_splitA+0xc>
    7e80:	86 95       	lsr	r24
    7e82:	71 05       	cpc	r23, r1
    7e84:	61 05       	cpc	r22, r1
    7e86:	08 94       	sec
    7e88:	08 95       	ret

00007e8a <__fp_zero>:
    7e8a:	e8 94       	clt

00007e8c <__fp_szero>:
    7e8c:	bb 27       	eor	r27, r27
    7e8e:	66 27       	eor	r22, r22
    7e90:	77 27       	eor	r23, r23
    7e92:	cb 01       	movw	r24, r22
    7e94:	97 f9       	bld	r25, 7
    7e96:	08 95       	ret

00007e98 <vfprintf>:
    7e98:	ab e0       	ldi	r26, 0x0B	; 11
    7e9a:	b0 e0       	ldi	r27, 0x00	; 0
    7e9c:	e2 e5       	ldi	r30, 0x52	; 82
    7e9e:	ff e3       	ldi	r31, 0x3F	; 63
    7ea0:	0c 94 52 3e 	jmp	0x7ca4	; 0x7ca4 <__prologue_saves__>
    7ea4:	3c 01       	movw	r6, r24
    7ea6:	2b 01       	movw	r4, r22
    7ea8:	5a 01       	movw	r10, r20
    7eaa:	fc 01       	movw	r30, r24
    7eac:	17 82       	std	Z+7, r1	; 0x07
    7eae:	16 82       	std	Z+6, r1	; 0x06
    7eb0:	83 81       	ldd	r24, Z+3	; 0x03
    7eb2:	81 fd       	sbrc	r24, 1
    7eb4:	03 c0       	rjmp	.+6      	; 0x7ebc <vfprintf+0x24>
    7eb6:	6f ef       	ldi	r22, 0xFF	; 255
    7eb8:	7f ef       	ldi	r23, 0xFF	; 255
    7eba:	c6 c1       	rjmp	.+908    	; 0x8248 <vfprintf+0x3b0>
    7ebc:	9a e0       	ldi	r25, 0x0A	; 10
    7ebe:	89 2e       	mov	r8, r25
    7ec0:	1e 01       	movw	r2, r28
    7ec2:	08 94       	sec
    7ec4:	21 1c       	adc	r2, r1
    7ec6:	31 1c       	adc	r3, r1
    7ec8:	f3 01       	movw	r30, r6
    7eca:	23 81       	ldd	r18, Z+3	; 0x03
    7ecc:	f2 01       	movw	r30, r4
    7ece:	23 fd       	sbrc	r18, 3
    7ed0:	85 91       	lpm	r24, Z+
    7ed2:	23 ff       	sbrs	r18, 3
    7ed4:	81 91       	ld	r24, Z+
    7ed6:	2f 01       	movw	r4, r30
    7ed8:	88 23       	and	r24, r24
    7eda:	09 f4       	brne	.+2      	; 0x7ede <vfprintf+0x46>
    7edc:	b2 c1       	rjmp	.+868    	; 0x8242 <vfprintf+0x3aa>
    7ede:	85 32       	cpi	r24, 0x25	; 37
    7ee0:	39 f4       	brne	.+14     	; 0x7ef0 <vfprintf+0x58>
    7ee2:	23 fd       	sbrc	r18, 3
    7ee4:	85 91       	lpm	r24, Z+
    7ee6:	23 ff       	sbrs	r18, 3
    7ee8:	81 91       	ld	r24, Z+
    7eea:	2f 01       	movw	r4, r30
    7eec:	85 32       	cpi	r24, 0x25	; 37
    7eee:	29 f4       	brne	.+10     	; 0x7efa <vfprintf+0x62>
    7ef0:	90 e0       	ldi	r25, 0x00	; 0
    7ef2:	b3 01       	movw	r22, r6
    7ef4:	0e 94 3f 41 	call	0x827e	; 0x827e <fputc>
    7ef8:	e7 cf       	rjmp	.-50     	; 0x7ec8 <vfprintf+0x30>
    7efa:	98 2f       	mov	r25, r24
    7efc:	ff 24       	eor	r15, r15
    7efe:	ee 24       	eor	r14, r14
    7f00:	99 24       	eor	r9, r9
    7f02:	ff e1       	ldi	r31, 0x1F	; 31
    7f04:	ff 15       	cp	r31, r15
    7f06:	d0 f0       	brcs	.+52     	; 0x7f3c <vfprintf+0xa4>
    7f08:	9b 32       	cpi	r25, 0x2B	; 43
    7f0a:	69 f0       	breq	.+26     	; 0x7f26 <vfprintf+0x8e>
    7f0c:	9c 32       	cpi	r25, 0x2C	; 44
    7f0e:	28 f4       	brcc	.+10     	; 0x7f1a <vfprintf+0x82>
    7f10:	90 32       	cpi	r25, 0x20	; 32
    7f12:	59 f0       	breq	.+22     	; 0x7f2a <vfprintf+0x92>
    7f14:	93 32       	cpi	r25, 0x23	; 35
    7f16:	91 f4       	brne	.+36     	; 0x7f3c <vfprintf+0xa4>
    7f18:	0e c0       	rjmp	.+28     	; 0x7f36 <vfprintf+0x9e>
    7f1a:	9d 32       	cpi	r25, 0x2D	; 45
    7f1c:	49 f0       	breq	.+18     	; 0x7f30 <vfprintf+0x98>
    7f1e:	90 33       	cpi	r25, 0x30	; 48
    7f20:	69 f4       	brne	.+26     	; 0x7f3c <vfprintf+0xa4>
    7f22:	41 e0       	ldi	r20, 0x01	; 1
    7f24:	24 c0       	rjmp	.+72     	; 0x7f6e <vfprintf+0xd6>
    7f26:	52 e0       	ldi	r21, 0x02	; 2
    7f28:	f5 2a       	or	r15, r21
    7f2a:	84 e0       	ldi	r24, 0x04	; 4
    7f2c:	f8 2a       	or	r15, r24
    7f2e:	28 c0       	rjmp	.+80     	; 0x7f80 <vfprintf+0xe8>
    7f30:	98 e0       	ldi	r25, 0x08	; 8
    7f32:	f9 2a       	or	r15, r25
    7f34:	25 c0       	rjmp	.+74     	; 0x7f80 <vfprintf+0xe8>
    7f36:	e0 e1       	ldi	r30, 0x10	; 16
    7f38:	fe 2a       	or	r15, r30
    7f3a:	22 c0       	rjmp	.+68     	; 0x7f80 <vfprintf+0xe8>
    7f3c:	f7 fc       	sbrc	r15, 7
    7f3e:	29 c0       	rjmp	.+82     	; 0x7f92 <vfprintf+0xfa>
    7f40:	89 2f       	mov	r24, r25
    7f42:	80 53       	subi	r24, 0x30	; 48
    7f44:	8a 30       	cpi	r24, 0x0A	; 10
    7f46:	70 f4       	brcc	.+28     	; 0x7f64 <vfprintf+0xcc>
    7f48:	f6 fe       	sbrs	r15, 6
    7f4a:	05 c0       	rjmp	.+10     	; 0x7f56 <vfprintf+0xbe>
    7f4c:	98 9c       	mul	r9, r8
    7f4e:	90 2c       	mov	r9, r0
    7f50:	11 24       	eor	r1, r1
    7f52:	98 0e       	add	r9, r24
    7f54:	15 c0       	rjmp	.+42     	; 0x7f80 <vfprintf+0xe8>
    7f56:	e8 9c       	mul	r14, r8
    7f58:	e0 2c       	mov	r14, r0
    7f5a:	11 24       	eor	r1, r1
    7f5c:	e8 0e       	add	r14, r24
    7f5e:	f0 e2       	ldi	r31, 0x20	; 32
    7f60:	ff 2a       	or	r15, r31
    7f62:	0e c0       	rjmp	.+28     	; 0x7f80 <vfprintf+0xe8>
    7f64:	9e 32       	cpi	r25, 0x2E	; 46
    7f66:	29 f4       	brne	.+10     	; 0x7f72 <vfprintf+0xda>
    7f68:	f6 fc       	sbrc	r15, 6
    7f6a:	6b c1       	rjmp	.+726    	; 0x8242 <vfprintf+0x3aa>
    7f6c:	40 e4       	ldi	r20, 0x40	; 64
    7f6e:	f4 2a       	or	r15, r20
    7f70:	07 c0       	rjmp	.+14     	; 0x7f80 <vfprintf+0xe8>
    7f72:	9c 36       	cpi	r25, 0x6C	; 108
    7f74:	19 f4       	brne	.+6      	; 0x7f7c <vfprintf+0xe4>
    7f76:	50 e8       	ldi	r21, 0x80	; 128
    7f78:	f5 2a       	or	r15, r21
    7f7a:	02 c0       	rjmp	.+4      	; 0x7f80 <vfprintf+0xe8>
    7f7c:	98 36       	cpi	r25, 0x68	; 104
    7f7e:	49 f4       	brne	.+18     	; 0x7f92 <vfprintf+0xfa>
    7f80:	f2 01       	movw	r30, r4
    7f82:	23 fd       	sbrc	r18, 3
    7f84:	95 91       	lpm	r25, Z+
    7f86:	23 ff       	sbrs	r18, 3
    7f88:	91 91       	ld	r25, Z+
    7f8a:	2f 01       	movw	r4, r30
    7f8c:	99 23       	and	r25, r25
    7f8e:	09 f0       	breq	.+2      	; 0x7f92 <vfprintf+0xfa>
    7f90:	b8 cf       	rjmp	.-144    	; 0x7f02 <vfprintf+0x6a>
    7f92:	89 2f       	mov	r24, r25
    7f94:	85 54       	subi	r24, 0x45	; 69
    7f96:	83 30       	cpi	r24, 0x03	; 3
    7f98:	18 f0       	brcs	.+6      	; 0x7fa0 <vfprintf+0x108>
    7f9a:	80 52       	subi	r24, 0x20	; 32
    7f9c:	83 30       	cpi	r24, 0x03	; 3
    7f9e:	38 f4       	brcc	.+14     	; 0x7fae <vfprintf+0x116>
    7fa0:	44 e0       	ldi	r20, 0x04	; 4
    7fa2:	50 e0       	ldi	r21, 0x00	; 0
    7fa4:	a4 0e       	add	r10, r20
    7fa6:	b5 1e       	adc	r11, r21
    7fa8:	5f e3       	ldi	r21, 0x3F	; 63
    7faa:	59 83       	std	Y+1, r21	; 0x01
    7fac:	0f c0       	rjmp	.+30     	; 0x7fcc <vfprintf+0x134>
    7fae:	93 36       	cpi	r25, 0x63	; 99
    7fb0:	31 f0       	breq	.+12     	; 0x7fbe <vfprintf+0x126>
    7fb2:	93 37       	cpi	r25, 0x73	; 115
    7fb4:	79 f0       	breq	.+30     	; 0x7fd4 <vfprintf+0x13c>
    7fb6:	93 35       	cpi	r25, 0x53	; 83
    7fb8:	09 f0       	breq	.+2      	; 0x7fbc <vfprintf+0x124>
    7fba:	56 c0       	rjmp	.+172    	; 0x8068 <vfprintf+0x1d0>
    7fbc:	20 c0       	rjmp	.+64     	; 0x7ffe <vfprintf+0x166>
    7fbe:	f5 01       	movw	r30, r10
    7fc0:	80 81       	ld	r24, Z
    7fc2:	89 83       	std	Y+1, r24	; 0x01
    7fc4:	42 e0       	ldi	r20, 0x02	; 2
    7fc6:	50 e0       	ldi	r21, 0x00	; 0
    7fc8:	a4 0e       	add	r10, r20
    7fca:	b5 1e       	adc	r11, r21
    7fcc:	61 01       	movw	r12, r2
    7fce:	01 e0       	ldi	r16, 0x01	; 1
    7fd0:	10 e0       	ldi	r17, 0x00	; 0
    7fd2:	12 c0       	rjmp	.+36     	; 0x7ff8 <vfprintf+0x160>
    7fd4:	f5 01       	movw	r30, r10
    7fd6:	c0 80       	ld	r12, Z
    7fd8:	d1 80       	ldd	r13, Z+1	; 0x01
    7fda:	f6 fc       	sbrc	r15, 6
    7fdc:	03 c0       	rjmp	.+6      	; 0x7fe4 <vfprintf+0x14c>
    7fde:	6f ef       	ldi	r22, 0xFF	; 255
    7fe0:	7f ef       	ldi	r23, 0xFF	; 255
    7fe2:	02 c0       	rjmp	.+4      	; 0x7fe8 <vfprintf+0x150>
    7fe4:	69 2d       	mov	r22, r9
    7fe6:	70 e0       	ldi	r23, 0x00	; 0
    7fe8:	42 e0       	ldi	r20, 0x02	; 2
    7fea:	50 e0       	ldi	r21, 0x00	; 0
    7fec:	a4 0e       	add	r10, r20
    7fee:	b5 1e       	adc	r11, r21
    7ff0:	c6 01       	movw	r24, r12
    7ff2:	0e 94 34 41 	call	0x8268	; 0x8268 <strnlen>
    7ff6:	8c 01       	movw	r16, r24
    7ff8:	5f e7       	ldi	r21, 0x7F	; 127
    7ffa:	f5 22       	and	r15, r21
    7ffc:	14 c0       	rjmp	.+40     	; 0x8026 <vfprintf+0x18e>
    7ffe:	f5 01       	movw	r30, r10
    8000:	c0 80       	ld	r12, Z
    8002:	d1 80       	ldd	r13, Z+1	; 0x01
    8004:	f6 fc       	sbrc	r15, 6
    8006:	03 c0       	rjmp	.+6      	; 0x800e <vfprintf+0x176>
    8008:	6f ef       	ldi	r22, 0xFF	; 255
    800a:	7f ef       	ldi	r23, 0xFF	; 255
    800c:	02 c0       	rjmp	.+4      	; 0x8012 <vfprintf+0x17a>
    800e:	69 2d       	mov	r22, r9
    8010:	70 e0       	ldi	r23, 0x00	; 0
    8012:	42 e0       	ldi	r20, 0x02	; 2
    8014:	50 e0       	ldi	r21, 0x00	; 0
    8016:	a4 0e       	add	r10, r20
    8018:	b5 1e       	adc	r11, r21
    801a:	c6 01       	movw	r24, r12
    801c:	0e 94 29 41 	call	0x8252	; 0x8252 <strnlen_P>
    8020:	8c 01       	movw	r16, r24
    8022:	50 e8       	ldi	r21, 0x80	; 128
    8024:	f5 2a       	or	r15, r21
    8026:	f3 fe       	sbrs	r15, 3
    8028:	07 c0       	rjmp	.+14     	; 0x8038 <vfprintf+0x1a0>
    802a:	1a c0       	rjmp	.+52     	; 0x8060 <vfprintf+0x1c8>
    802c:	80 e2       	ldi	r24, 0x20	; 32
    802e:	90 e0       	ldi	r25, 0x00	; 0
    8030:	b3 01       	movw	r22, r6
    8032:	0e 94 3f 41 	call	0x827e	; 0x827e <fputc>
    8036:	ea 94       	dec	r14
    8038:	8e 2d       	mov	r24, r14
    803a:	90 e0       	ldi	r25, 0x00	; 0
    803c:	08 17       	cp	r16, r24
    803e:	19 07       	cpc	r17, r25
    8040:	a8 f3       	brcs	.-22     	; 0x802c <vfprintf+0x194>
    8042:	0e c0       	rjmp	.+28     	; 0x8060 <vfprintf+0x1c8>
    8044:	f6 01       	movw	r30, r12
    8046:	f7 fc       	sbrc	r15, 7
    8048:	85 91       	lpm	r24, Z+
    804a:	f7 fe       	sbrs	r15, 7
    804c:	81 91       	ld	r24, Z+
    804e:	6f 01       	movw	r12, r30
    8050:	90 e0       	ldi	r25, 0x00	; 0
    8052:	b3 01       	movw	r22, r6
    8054:	0e 94 3f 41 	call	0x827e	; 0x827e <fputc>
    8058:	e1 10       	cpse	r14, r1
    805a:	ea 94       	dec	r14
    805c:	01 50       	subi	r16, 0x01	; 1
    805e:	10 40       	sbci	r17, 0x00	; 0
    8060:	01 15       	cp	r16, r1
    8062:	11 05       	cpc	r17, r1
    8064:	79 f7       	brne	.-34     	; 0x8044 <vfprintf+0x1ac>
    8066:	ea c0       	rjmp	.+468    	; 0x823c <vfprintf+0x3a4>
    8068:	94 36       	cpi	r25, 0x64	; 100
    806a:	11 f0       	breq	.+4      	; 0x8070 <vfprintf+0x1d8>
    806c:	99 36       	cpi	r25, 0x69	; 105
    806e:	69 f5       	brne	.+90     	; 0x80ca <vfprintf+0x232>
    8070:	f7 fe       	sbrs	r15, 7
    8072:	08 c0       	rjmp	.+16     	; 0x8084 <vfprintf+0x1ec>
    8074:	f5 01       	movw	r30, r10
    8076:	20 81       	ld	r18, Z
    8078:	31 81       	ldd	r19, Z+1	; 0x01
    807a:	42 81       	ldd	r20, Z+2	; 0x02
    807c:	53 81       	ldd	r21, Z+3	; 0x03
    807e:	84 e0       	ldi	r24, 0x04	; 4
    8080:	90 e0       	ldi	r25, 0x00	; 0
    8082:	0a c0       	rjmp	.+20     	; 0x8098 <vfprintf+0x200>
    8084:	f5 01       	movw	r30, r10
    8086:	80 81       	ld	r24, Z
    8088:	91 81       	ldd	r25, Z+1	; 0x01
    808a:	9c 01       	movw	r18, r24
    808c:	44 27       	eor	r20, r20
    808e:	37 fd       	sbrc	r19, 7
    8090:	40 95       	com	r20
    8092:	54 2f       	mov	r21, r20
    8094:	82 e0       	ldi	r24, 0x02	; 2
    8096:	90 e0       	ldi	r25, 0x00	; 0
    8098:	a8 0e       	add	r10, r24
    809a:	b9 1e       	adc	r11, r25
    809c:	9f e6       	ldi	r25, 0x6F	; 111
    809e:	f9 22       	and	r15, r25
    80a0:	57 ff       	sbrs	r21, 7
    80a2:	09 c0       	rjmp	.+18     	; 0x80b6 <vfprintf+0x21e>
    80a4:	50 95       	com	r21
    80a6:	40 95       	com	r20
    80a8:	30 95       	com	r19
    80aa:	21 95       	neg	r18
    80ac:	3f 4f       	sbci	r19, 0xFF	; 255
    80ae:	4f 4f       	sbci	r20, 0xFF	; 255
    80b0:	5f 4f       	sbci	r21, 0xFF	; 255
    80b2:	e0 e8       	ldi	r30, 0x80	; 128
    80b4:	fe 2a       	or	r15, r30
    80b6:	ca 01       	movw	r24, r20
    80b8:	b9 01       	movw	r22, r18
    80ba:	a1 01       	movw	r20, r2
    80bc:	2a e0       	ldi	r18, 0x0A	; 10
    80be:	30 e0       	ldi	r19, 0x00	; 0
    80c0:	0e 94 6b 41 	call	0x82d6	; 0x82d6 <__ultoa_invert>
    80c4:	d8 2e       	mov	r13, r24
    80c6:	d2 18       	sub	r13, r2
    80c8:	40 c0       	rjmp	.+128    	; 0x814a <vfprintf+0x2b2>
    80ca:	95 37       	cpi	r25, 0x75	; 117
    80cc:	29 f4       	brne	.+10     	; 0x80d8 <vfprintf+0x240>
    80ce:	1f 2d       	mov	r17, r15
    80d0:	1f 7e       	andi	r17, 0xEF	; 239
    80d2:	2a e0       	ldi	r18, 0x0A	; 10
    80d4:	30 e0       	ldi	r19, 0x00	; 0
    80d6:	1d c0       	rjmp	.+58     	; 0x8112 <vfprintf+0x27a>
    80d8:	1f 2d       	mov	r17, r15
    80da:	19 7f       	andi	r17, 0xF9	; 249
    80dc:	9f 36       	cpi	r25, 0x6F	; 111
    80de:	61 f0       	breq	.+24     	; 0x80f8 <vfprintf+0x260>
    80e0:	90 37       	cpi	r25, 0x70	; 112
    80e2:	20 f4       	brcc	.+8      	; 0x80ec <vfprintf+0x254>
    80e4:	98 35       	cpi	r25, 0x58	; 88
    80e6:	09 f0       	breq	.+2      	; 0x80ea <vfprintf+0x252>
    80e8:	ac c0       	rjmp	.+344    	; 0x8242 <vfprintf+0x3aa>
    80ea:	0f c0       	rjmp	.+30     	; 0x810a <vfprintf+0x272>
    80ec:	90 37       	cpi	r25, 0x70	; 112
    80ee:	39 f0       	breq	.+14     	; 0x80fe <vfprintf+0x266>
    80f0:	98 37       	cpi	r25, 0x78	; 120
    80f2:	09 f0       	breq	.+2      	; 0x80f6 <vfprintf+0x25e>
    80f4:	a6 c0       	rjmp	.+332    	; 0x8242 <vfprintf+0x3aa>
    80f6:	04 c0       	rjmp	.+8      	; 0x8100 <vfprintf+0x268>
    80f8:	28 e0       	ldi	r18, 0x08	; 8
    80fa:	30 e0       	ldi	r19, 0x00	; 0
    80fc:	0a c0       	rjmp	.+20     	; 0x8112 <vfprintf+0x27a>
    80fe:	10 61       	ori	r17, 0x10	; 16
    8100:	14 fd       	sbrc	r17, 4
    8102:	14 60       	ori	r17, 0x04	; 4
    8104:	20 e1       	ldi	r18, 0x10	; 16
    8106:	30 e0       	ldi	r19, 0x00	; 0
    8108:	04 c0       	rjmp	.+8      	; 0x8112 <vfprintf+0x27a>
    810a:	14 fd       	sbrc	r17, 4
    810c:	16 60       	ori	r17, 0x06	; 6
    810e:	20 e1       	ldi	r18, 0x10	; 16
    8110:	32 e0       	ldi	r19, 0x02	; 2
    8112:	17 ff       	sbrs	r17, 7
    8114:	08 c0       	rjmp	.+16     	; 0x8126 <vfprintf+0x28e>
    8116:	f5 01       	movw	r30, r10
    8118:	60 81       	ld	r22, Z
    811a:	71 81       	ldd	r23, Z+1	; 0x01
    811c:	82 81       	ldd	r24, Z+2	; 0x02
    811e:	93 81       	ldd	r25, Z+3	; 0x03
    8120:	44 e0       	ldi	r20, 0x04	; 4
    8122:	50 e0       	ldi	r21, 0x00	; 0
    8124:	08 c0       	rjmp	.+16     	; 0x8136 <vfprintf+0x29e>
    8126:	f5 01       	movw	r30, r10
    8128:	80 81       	ld	r24, Z
    812a:	91 81       	ldd	r25, Z+1	; 0x01
    812c:	bc 01       	movw	r22, r24
    812e:	80 e0       	ldi	r24, 0x00	; 0
    8130:	90 e0       	ldi	r25, 0x00	; 0
    8132:	42 e0       	ldi	r20, 0x02	; 2
    8134:	50 e0       	ldi	r21, 0x00	; 0
    8136:	a4 0e       	add	r10, r20
    8138:	b5 1e       	adc	r11, r21
    813a:	a1 01       	movw	r20, r2
    813c:	0e 94 6b 41 	call	0x82d6	; 0x82d6 <__ultoa_invert>
    8140:	d8 2e       	mov	r13, r24
    8142:	d2 18       	sub	r13, r2
    8144:	8f e7       	ldi	r24, 0x7F	; 127
    8146:	f8 2e       	mov	r15, r24
    8148:	f1 22       	and	r15, r17
    814a:	f6 fe       	sbrs	r15, 6
    814c:	0b c0       	rjmp	.+22     	; 0x8164 <vfprintf+0x2cc>
    814e:	5e ef       	ldi	r21, 0xFE	; 254
    8150:	f5 22       	and	r15, r21
    8152:	d9 14       	cp	r13, r9
    8154:	38 f4       	brcc	.+14     	; 0x8164 <vfprintf+0x2cc>
    8156:	f4 fe       	sbrs	r15, 4
    8158:	07 c0       	rjmp	.+14     	; 0x8168 <vfprintf+0x2d0>
    815a:	f2 fc       	sbrc	r15, 2
    815c:	05 c0       	rjmp	.+10     	; 0x8168 <vfprintf+0x2d0>
    815e:	8f ee       	ldi	r24, 0xEF	; 239
    8160:	f8 22       	and	r15, r24
    8162:	02 c0       	rjmp	.+4      	; 0x8168 <vfprintf+0x2d0>
    8164:	1d 2d       	mov	r17, r13
    8166:	01 c0       	rjmp	.+2      	; 0x816a <vfprintf+0x2d2>
    8168:	19 2d       	mov	r17, r9
    816a:	f4 fe       	sbrs	r15, 4
    816c:	0d c0       	rjmp	.+26     	; 0x8188 <vfprintf+0x2f0>
    816e:	fe 01       	movw	r30, r28
    8170:	ed 0d       	add	r30, r13
    8172:	f1 1d       	adc	r31, r1
    8174:	80 81       	ld	r24, Z
    8176:	80 33       	cpi	r24, 0x30	; 48
    8178:	19 f4       	brne	.+6      	; 0x8180 <vfprintf+0x2e8>
    817a:	99 ee       	ldi	r25, 0xE9	; 233
    817c:	f9 22       	and	r15, r25
    817e:	08 c0       	rjmp	.+16     	; 0x8190 <vfprintf+0x2f8>
    8180:	1f 5f       	subi	r17, 0xFF	; 255
    8182:	f2 fe       	sbrs	r15, 2
    8184:	05 c0       	rjmp	.+10     	; 0x8190 <vfprintf+0x2f8>
    8186:	03 c0       	rjmp	.+6      	; 0x818e <vfprintf+0x2f6>
    8188:	8f 2d       	mov	r24, r15
    818a:	86 78       	andi	r24, 0x86	; 134
    818c:	09 f0       	breq	.+2      	; 0x8190 <vfprintf+0x2f8>
    818e:	1f 5f       	subi	r17, 0xFF	; 255
    8190:	0f 2d       	mov	r16, r15
    8192:	f3 fc       	sbrc	r15, 3
    8194:	14 c0       	rjmp	.+40     	; 0x81be <vfprintf+0x326>
    8196:	f0 fe       	sbrs	r15, 0
    8198:	0f c0       	rjmp	.+30     	; 0x81b8 <vfprintf+0x320>
    819a:	1e 15       	cp	r17, r14
    819c:	10 f0       	brcs	.+4      	; 0x81a2 <vfprintf+0x30a>
    819e:	9d 2c       	mov	r9, r13
    81a0:	0b c0       	rjmp	.+22     	; 0x81b8 <vfprintf+0x320>
    81a2:	9d 2c       	mov	r9, r13
    81a4:	9e 0c       	add	r9, r14
    81a6:	91 1a       	sub	r9, r17
    81a8:	1e 2d       	mov	r17, r14
    81aa:	06 c0       	rjmp	.+12     	; 0x81b8 <vfprintf+0x320>
    81ac:	80 e2       	ldi	r24, 0x20	; 32
    81ae:	90 e0       	ldi	r25, 0x00	; 0
    81b0:	b3 01       	movw	r22, r6
    81b2:	0e 94 3f 41 	call	0x827e	; 0x827e <fputc>
    81b6:	1f 5f       	subi	r17, 0xFF	; 255
    81b8:	1e 15       	cp	r17, r14
    81ba:	c0 f3       	brcs	.-16     	; 0x81ac <vfprintf+0x314>
    81bc:	04 c0       	rjmp	.+8      	; 0x81c6 <vfprintf+0x32e>
    81be:	1e 15       	cp	r17, r14
    81c0:	10 f4       	brcc	.+4      	; 0x81c6 <vfprintf+0x32e>
    81c2:	e1 1a       	sub	r14, r17
    81c4:	01 c0       	rjmp	.+2      	; 0x81c8 <vfprintf+0x330>
    81c6:	ee 24       	eor	r14, r14
    81c8:	04 ff       	sbrs	r16, 4
    81ca:	0f c0       	rjmp	.+30     	; 0x81ea <vfprintf+0x352>
    81cc:	80 e3       	ldi	r24, 0x30	; 48
    81ce:	90 e0       	ldi	r25, 0x00	; 0
    81d0:	b3 01       	movw	r22, r6
    81d2:	0e 94 3f 41 	call	0x827e	; 0x827e <fputc>
    81d6:	02 ff       	sbrs	r16, 2
    81d8:	1d c0       	rjmp	.+58     	; 0x8214 <vfprintf+0x37c>
    81da:	01 fd       	sbrc	r16, 1
    81dc:	03 c0       	rjmp	.+6      	; 0x81e4 <vfprintf+0x34c>
    81de:	88 e7       	ldi	r24, 0x78	; 120
    81e0:	90 e0       	ldi	r25, 0x00	; 0
    81e2:	0e c0       	rjmp	.+28     	; 0x8200 <vfprintf+0x368>
    81e4:	88 e5       	ldi	r24, 0x58	; 88
    81e6:	90 e0       	ldi	r25, 0x00	; 0
    81e8:	0b c0       	rjmp	.+22     	; 0x8200 <vfprintf+0x368>
    81ea:	80 2f       	mov	r24, r16
    81ec:	86 78       	andi	r24, 0x86	; 134
    81ee:	91 f0       	breq	.+36     	; 0x8214 <vfprintf+0x37c>
    81f0:	01 ff       	sbrs	r16, 1
    81f2:	02 c0       	rjmp	.+4      	; 0x81f8 <vfprintf+0x360>
    81f4:	8b e2       	ldi	r24, 0x2B	; 43
    81f6:	01 c0       	rjmp	.+2      	; 0x81fa <vfprintf+0x362>
    81f8:	80 e2       	ldi	r24, 0x20	; 32
    81fa:	f7 fc       	sbrc	r15, 7
    81fc:	8d e2       	ldi	r24, 0x2D	; 45
    81fe:	90 e0       	ldi	r25, 0x00	; 0
    8200:	b3 01       	movw	r22, r6
    8202:	0e 94 3f 41 	call	0x827e	; 0x827e <fputc>
    8206:	06 c0       	rjmp	.+12     	; 0x8214 <vfprintf+0x37c>
    8208:	80 e3       	ldi	r24, 0x30	; 48
    820a:	90 e0       	ldi	r25, 0x00	; 0
    820c:	b3 01       	movw	r22, r6
    820e:	0e 94 3f 41 	call	0x827e	; 0x827e <fputc>
    8212:	9a 94       	dec	r9
    8214:	d9 14       	cp	r13, r9
    8216:	c0 f3       	brcs	.-16     	; 0x8208 <vfprintf+0x370>
    8218:	da 94       	dec	r13
    821a:	f1 01       	movw	r30, r2
    821c:	ed 0d       	add	r30, r13
    821e:	f1 1d       	adc	r31, r1
    8220:	80 81       	ld	r24, Z
    8222:	90 e0       	ldi	r25, 0x00	; 0
    8224:	b3 01       	movw	r22, r6
    8226:	0e 94 3f 41 	call	0x827e	; 0x827e <fputc>
    822a:	dd 20       	and	r13, r13
    822c:	a9 f7       	brne	.-22     	; 0x8218 <vfprintf+0x380>
    822e:	06 c0       	rjmp	.+12     	; 0x823c <vfprintf+0x3a4>
    8230:	80 e2       	ldi	r24, 0x20	; 32
    8232:	90 e0       	ldi	r25, 0x00	; 0
    8234:	b3 01       	movw	r22, r6
    8236:	0e 94 3f 41 	call	0x827e	; 0x827e <fputc>
    823a:	ea 94       	dec	r14
    823c:	ee 20       	and	r14, r14
    823e:	c1 f7       	brne	.-16     	; 0x8230 <vfprintf+0x398>
    8240:	43 ce       	rjmp	.-890    	; 0x7ec8 <vfprintf+0x30>
    8242:	f3 01       	movw	r30, r6
    8244:	66 81       	ldd	r22, Z+6	; 0x06
    8246:	77 81       	ldd	r23, Z+7	; 0x07
    8248:	cb 01       	movw	r24, r22
    824a:	2b 96       	adiw	r28, 0x0b	; 11
    824c:	e2 e1       	ldi	r30, 0x12	; 18
    824e:	0c 94 6e 3e 	jmp	0x7cdc	; 0x7cdc <__epilogue_restores__>

00008252 <strnlen_P>:
    8252:	fc 01       	movw	r30, r24
    8254:	05 90       	lpm	r0, Z+
    8256:	61 50       	subi	r22, 0x01	; 1
    8258:	70 40       	sbci	r23, 0x00	; 0
    825a:	01 10       	cpse	r0, r1
    825c:	d8 f7       	brcc	.-10     	; 0x8254 <strnlen_P+0x2>
    825e:	80 95       	com	r24
    8260:	90 95       	com	r25
    8262:	8e 0f       	add	r24, r30
    8264:	9f 1f       	adc	r25, r31
    8266:	08 95       	ret

00008268 <strnlen>:
    8268:	fc 01       	movw	r30, r24
    826a:	61 50       	subi	r22, 0x01	; 1
    826c:	70 40       	sbci	r23, 0x00	; 0
    826e:	01 90       	ld	r0, Z+
    8270:	01 10       	cpse	r0, r1
    8272:	d8 f7       	brcc	.-10     	; 0x826a <strnlen+0x2>
    8274:	80 95       	com	r24
    8276:	90 95       	com	r25
    8278:	8e 0f       	add	r24, r30
    827a:	9f 1f       	adc	r25, r31
    827c:	08 95       	ret

0000827e <fputc>:
    827e:	0f 93       	push	r16
    8280:	1f 93       	push	r17
    8282:	cf 93       	push	r28
    8284:	df 93       	push	r29
    8286:	8c 01       	movw	r16, r24
    8288:	eb 01       	movw	r28, r22
    828a:	8b 81       	ldd	r24, Y+3	; 0x03
    828c:	81 ff       	sbrs	r24, 1
    828e:	1b c0       	rjmp	.+54     	; 0x82c6 <fputc+0x48>
    8290:	82 ff       	sbrs	r24, 2
    8292:	0d c0       	rjmp	.+26     	; 0x82ae <fputc+0x30>
    8294:	2e 81       	ldd	r18, Y+6	; 0x06
    8296:	3f 81       	ldd	r19, Y+7	; 0x07
    8298:	8c 81       	ldd	r24, Y+4	; 0x04
    829a:	9d 81       	ldd	r25, Y+5	; 0x05
    829c:	28 17       	cp	r18, r24
    829e:	39 07       	cpc	r19, r25
    82a0:	64 f4       	brge	.+24     	; 0x82ba <fputc+0x3c>
    82a2:	e8 81       	ld	r30, Y
    82a4:	f9 81       	ldd	r31, Y+1	; 0x01
    82a6:	01 93       	st	Z+, r16
    82a8:	f9 83       	std	Y+1, r31	; 0x01
    82aa:	e8 83       	st	Y, r30
    82ac:	06 c0       	rjmp	.+12     	; 0x82ba <fputc+0x3c>
    82ae:	e8 85       	ldd	r30, Y+8	; 0x08
    82b0:	f9 85       	ldd	r31, Y+9	; 0x09
    82b2:	80 2f       	mov	r24, r16
    82b4:	09 95       	icall
    82b6:	89 2b       	or	r24, r25
    82b8:	31 f4       	brne	.+12     	; 0x82c6 <fputc+0x48>
    82ba:	8e 81       	ldd	r24, Y+6	; 0x06
    82bc:	9f 81       	ldd	r25, Y+7	; 0x07
    82be:	01 96       	adiw	r24, 0x01	; 1
    82c0:	9f 83       	std	Y+7, r25	; 0x07
    82c2:	8e 83       	std	Y+6, r24	; 0x06
    82c4:	02 c0       	rjmp	.+4      	; 0x82ca <fputc+0x4c>
    82c6:	0f ef       	ldi	r16, 0xFF	; 255
    82c8:	1f ef       	ldi	r17, 0xFF	; 255
    82ca:	c8 01       	movw	r24, r16
    82cc:	df 91       	pop	r29
    82ce:	cf 91       	pop	r28
    82d0:	1f 91       	pop	r17
    82d2:	0f 91       	pop	r16
    82d4:	08 95       	ret

000082d6 <__ultoa_invert>:
    82d6:	fa 01       	movw	r30, r20
    82d8:	aa 27       	eor	r26, r26
    82da:	28 30       	cpi	r18, 0x08	; 8
    82dc:	51 f1       	breq	.+84     	; 0x8332 <__ultoa_invert+0x5c>
    82de:	20 31       	cpi	r18, 0x10	; 16
    82e0:	81 f1       	breq	.+96     	; 0x8342 <__ultoa_invert+0x6c>
    82e2:	e8 94       	clt
    82e4:	6f 93       	push	r22
    82e6:	6e 7f       	andi	r22, 0xFE	; 254
    82e8:	6e 5f       	subi	r22, 0xFE	; 254
    82ea:	7f 4f       	sbci	r23, 0xFF	; 255
    82ec:	8f 4f       	sbci	r24, 0xFF	; 255
    82ee:	9f 4f       	sbci	r25, 0xFF	; 255
    82f0:	af 4f       	sbci	r26, 0xFF	; 255
    82f2:	b1 e0       	ldi	r27, 0x01	; 1
    82f4:	3e d0       	rcall	.+124    	; 0x8372 <__ultoa_invert+0x9c>
    82f6:	b4 e0       	ldi	r27, 0x04	; 4
    82f8:	3c d0       	rcall	.+120    	; 0x8372 <__ultoa_invert+0x9c>
    82fa:	67 0f       	add	r22, r23
    82fc:	78 1f       	adc	r23, r24
    82fe:	89 1f       	adc	r24, r25
    8300:	9a 1f       	adc	r25, r26
    8302:	a1 1d       	adc	r26, r1
    8304:	68 0f       	add	r22, r24
    8306:	79 1f       	adc	r23, r25
    8308:	8a 1f       	adc	r24, r26
    830a:	91 1d       	adc	r25, r1
    830c:	a1 1d       	adc	r26, r1
    830e:	6a 0f       	add	r22, r26
    8310:	71 1d       	adc	r23, r1
    8312:	81 1d       	adc	r24, r1
    8314:	91 1d       	adc	r25, r1
    8316:	a1 1d       	adc	r26, r1
    8318:	20 d0       	rcall	.+64     	; 0x835a <__ultoa_invert+0x84>
    831a:	09 f4       	brne	.+2      	; 0x831e <__ultoa_invert+0x48>
    831c:	68 94       	set
    831e:	3f 91       	pop	r19
    8320:	2a e0       	ldi	r18, 0x0A	; 10
    8322:	26 9f       	mul	r18, r22
    8324:	11 24       	eor	r1, r1
    8326:	30 19       	sub	r19, r0
    8328:	30 5d       	subi	r19, 0xD0	; 208
    832a:	31 93       	st	Z+, r19
    832c:	de f6       	brtc	.-74     	; 0x82e4 <__ultoa_invert+0xe>
    832e:	cf 01       	movw	r24, r30
    8330:	08 95       	ret
    8332:	46 2f       	mov	r20, r22
    8334:	47 70       	andi	r20, 0x07	; 7
    8336:	40 5d       	subi	r20, 0xD0	; 208
    8338:	41 93       	st	Z+, r20
    833a:	b3 e0       	ldi	r27, 0x03	; 3
    833c:	0f d0       	rcall	.+30     	; 0x835c <__ultoa_invert+0x86>
    833e:	c9 f7       	brne	.-14     	; 0x8332 <__ultoa_invert+0x5c>
    8340:	f6 cf       	rjmp	.-20     	; 0x832e <__ultoa_invert+0x58>
    8342:	46 2f       	mov	r20, r22
    8344:	4f 70       	andi	r20, 0x0F	; 15
    8346:	40 5d       	subi	r20, 0xD0	; 208
    8348:	4a 33       	cpi	r20, 0x3A	; 58
    834a:	18 f0       	brcs	.+6      	; 0x8352 <__ultoa_invert+0x7c>
    834c:	49 5d       	subi	r20, 0xD9	; 217
    834e:	31 fd       	sbrc	r19, 1
    8350:	40 52       	subi	r20, 0x20	; 32
    8352:	41 93       	st	Z+, r20
    8354:	02 d0       	rcall	.+4      	; 0x835a <__ultoa_invert+0x84>
    8356:	a9 f7       	brne	.-22     	; 0x8342 <__ultoa_invert+0x6c>
    8358:	ea cf       	rjmp	.-44     	; 0x832e <__ultoa_invert+0x58>
    835a:	b4 e0       	ldi	r27, 0x04	; 4
    835c:	a6 95       	lsr	r26
    835e:	97 95       	ror	r25
    8360:	87 95       	ror	r24
    8362:	77 95       	ror	r23
    8364:	67 95       	ror	r22
    8366:	ba 95       	dec	r27
    8368:	c9 f7       	brne	.-14     	; 0x835c <__ultoa_invert+0x86>
    836a:	00 97       	sbiw	r24, 0x00	; 0
    836c:	61 05       	cpc	r22, r1
    836e:	71 05       	cpc	r23, r1
    8370:	08 95       	ret
    8372:	9b 01       	movw	r18, r22
    8374:	ac 01       	movw	r20, r24
    8376:	0a 2e       	mov	r0, r26
    8378:	06 94       	lsr	r0
    837a:	57 95       	ror	r21
    837c:	47 95       	ror	r20
    837e:	37 95       	ror	r19
    8380:	27 95       	ror	r18
    8382:	ba 95       	dec	r27
    8384:	c9 f7       	brne	.-14     	; 0x8378 <__ultoa_invert+0xa2>
    8386:	62 0f       	add	r22, r18
    8388:	73 1f       	adc	r23, r19
    838a:	84 1f       	adc	r24, r20
    838c:	95 1f       	adc	r25, r21
    838e:	a0 1d       	adc	r26, r0
    8390:	08 95       	ret

00008392 <_exit>:
    8392:	f8 94       	cli

00008394 <__stop_program>:
    8394:	ff cf       	rjmp	.-2      	; 0x8394 <__stop_program>
